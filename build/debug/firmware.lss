
build/debug/firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000062cc  00006380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000069a  00800116  00800116  00006396  2**0
                  ALLOC
  3 .noinit       00000006  008007b0  008007b0  00006396  2**0
                  ALLOC
  4 .eeprom       00000050  00810000  00810000  00006396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         0000ae48  00000000  00000000  000063e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00003cb3  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00014ee3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__ctors_end>
       4:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
       8:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
       c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      10:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <__vector_4>
      14:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      18:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      1c:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__vector_7>
      20:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      24:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      28:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      2c:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__vector_11>
      30:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      34:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      38:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <__vector_14>
      3c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      40:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      44:	0c 94 bb 2c 	jmp	0x5976	; 0x5976 <__vector_17>
      48:	0c 94 39 2a 	jmp	0x5472	; 0x5472 <__vector_18>
      4c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      50:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__vector_20>
      54:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__vector_21>
      58:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      5c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      60:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      64:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efab4>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <s_gradient>:
      86:	67 72 61 64 69 65 6e 74 00                          gradient.

0000008f <s_sine>:
      8f:	73 69 6e 65 00                                      sine.

00000094 <s_stairs_y>:
      94:	73 74 61 69 72 73 5f 79 00                          stairs_y.

0000009d <s_matrix>:
      9d:	6d 61 74 72 69 78 00                                matrix.

000000a4 <s_heart>:
      a4:	68 65 61 72 74 00                                   heart.

000000aa <s_finite_worm>:
      aa:	66 69 6e 69 74 65 5f 77 6f 72 6d 00                 finite_worm.

000000b6 <s_all_on>:
      b6:	61 6c 6c 5f 6f 6e 00                                all_on.

000000bd <s_clock>:
      bd:	63 6c 6f 63 6b 00                                   clock.

000000c3 <s_tornado>:
      c3:	74 6f 72 6e 61 64 6f 00                             tornado.

000000cb <s_lines>:
      cb:	6c 69 6e 65 73 00                                   lines.

000000d1 <s_tube>:
      d1:	74 75 62 65 00                                      tube.

000000d6 <s_rain>:
      d6:	72 61 69 6e 00                                      rain.

000000db <s_stairs_x>:
      db:	73 74 61 69 72 73 5f 78 00                          stairs_x.

000000e4 <s_character>:
      e4:	63 68 61 72 61 63 74 65 72 00                       character.

000000ee <s_wave>:
      ee:	77 61 76 65 00                                      wave.

000000f3 <s_circle>:
      f3:	63 69 72 63 6c 65 00                                circle.

000000fa <s_template>:
      fa:	74 65 6d 70 6c 61 74 65 00                          template.

00000103 <s_layers>:
     103:	6c 61 79 65 72 73 00                                layers.

0000010a <s_constant>:
     10a:	63 6f 6e 73 74 61 6e 74 00                          constant.

00000113 <s_sphere>:
     113:	73 70 68 65 72 65 00                                sphere.

0000011a <s_game_of_life>:
     11a:	67 61 6d 65 5f 6f 66 5f 6c 69 66 65 00              game_of_life.

00000127 <s_worm>:
     127:	77 6f 72 6d 00                                      worm.

0000012c <s_cube>:
     12c:	63 75 62 65 00                                      cube.

00000131 <s_brownian>:
     131:	62 72 6f 77 6e 69 61 6e 00                          brownian.

0000013a <s_wireframe>:
     13a:	77 69 72 65 66 72 61 6d 65 00                       wireframe.

00000144 <s_countdown>:
     144:	63 6f 75 6e 74 64 6f 77 6e 00                       countdown.

0000014e <s_line>:
     14e:	6c 69 6e 65 00                                      line.

00000153 <s_starfield>:
     153:	73 74 61 72 66 69 65 6c 64 00                       starfield.

0000015d <s_fish>:
     15d:	66 69 73 68 00                                      fish.

00000162 <s_test_sensor1>:
     162:	74 65 73 74 5f 73 65 6e 73 6f 72 31 00              test_sensor1.

0000016f <s_particles>:
     16f:	70 61 72 74 69 63 6c 65 73 00                       particles.

00000179 <s_scroll_text>:
     179:	73 63 72 6f 6c 6c 5f 74 65 78 74 00                 scroll_text.

00000185 <effects>:
     185:	86 00 00 00 1e 07 01 04 8f 00 00 00 a7 07 01 04     ................
     195:	94 00 86 08 00 00 00 04 9d 00 a9 08 f3 08 01 04     ................
     1a5:	a4 00 55 09 5f 09 00 05 aa 00 84 09 b0 09 00 06     ..U._...........
     1b5:	b6 00 00 00 ce 0a 01 04 bd 00 00 00 f1 0a 01 04     ................
     1c5:	c3 00 00 00 d8 0b 01 04 cb 00 00 00 a9 0c 00 04     ................
     1d5:	d1 00 00 00 04 0d 01 04 d6 00 3d 0d 4a 0d 01 04     ..........=.J...
     1e5:	db 00 0f 0e 00 00 00 04 e4 00 00 00 2e 0e 00 04     ................
     1f5:	ee 00 00 00 3c 0e 01 04 f3 00 00 00 23 0f 01 04     ....<.......#...
     205:	fa 00 51 0f 58 0f 01 04 03 01 00 00 5f 0f 01 04     ..Q.X......._...
     215:	0a 01 00 00 8f 0f 01 04 13 01 00 00 af 0f 01 04     ................
     225:	1a 01 b2 10 bc 10 01 0c 27 01 d0 10 f5 10 00 04     ........'.......
     235:	2c 01 6f 11 00 00 00 04 31 01 91 11 a3 11 00 04     ,.o.....1.......
     245:	3a 01 00 00 e4 11 00 04 44 01 23 12 2d 12 01 7d     :.......D.#.-..}
     255:	4e 01 76 12 00 00 00 04 53 01 98 12 e2 12 00 04     N.v.....S.......
     265:	5d 01 00 00 2c 13 01 04 62 01 00 00 3a 13 01 04     ]...,...b...:...
     275:	6f 01 d6 13 10 14 00 04 79 01 00 00 92 14 01 04     o.......y.......

00000285 <default_text.1562>:
     285:	05 45 52 52 4f 52 00                                .ERROR.

0000028c <s_playlist_item_0>:
	...

0000028e <s_playlist_item_1>:
	...

00000290 <s_playlist_item_2>:
	...

00000292 <s_playlist_item_3>:
	...

00000294 <s_playlist_item_4>:
     294:	0b 54 68 69 73 20 77 6f 72 6b 73 21 00              .This works!.

000002a1 <s_playlist_item_5>:
	...

000002a3 <s_playlist_item_6>:
     2a3:	0b 54 68 69 73 20 77 6f 72 6b 73 21 00              .This works!.

000002b0 <s_playlist_item_7>:
	...

000002b2 <s_playlist_item_8>:
	...

000002b4 <s_playlist_item_9>:
	...

000002b6 <s_playlist_item_10>:
	...

000002b8 <s_playlist_item_11>:
	...

000002ba <s_playlist_item_12>:
     2ba:	2f 49 6e 20 74 68 65 20 67 61 6d 65 20 6f 66 20     /In the game of 
     2ca:	6c 69 66 65 20 79 6f 75 20 65 69 74 68 65 72 20     life you either 
     2da:	77 69 6e 2c 20 6f 72 20 79 6f 75 20 64 69 65 2e     win, or you die.
	...

000002eb <s_playlist_item_13>:
	...

000002ed <s_playlist_item_14>:
	...

000002ef <s_playlist_item_15>:
	...

000002f1 <s_playlist_item_16>:
	...

000002f3 <s_playlist_item_17>:
	...

000002f5 <s_playlist_item_18>:
	...

000002f7 <s_playlist_item_19>:
     2f7:	13 57 69 6e 74 65 72 20 69 73 20 63 6f 6d 69 6e     .Winter is comin
     307:	67 2e 2e 2e 00                                      g....

0000030c <s_playlist_item_20>:
	...

0000030e <s_playlist_item_21>:
	...

00000310 <s_playlist_item_22>:
	...

00000312 <s_playlist_item_23>:
	...

00000314 <s_playlist_item_24>:
	...

00000316 <s_playlist_item_25>:
	...

00000318 <s_playlist_item_26>:
     318:	55 43 72 65 64 69 74 73 3a 20 62 65 62 72 61 77     UCredits: bebraw
     328:	2c 20 65 6e 79 6f 6e 65 2c 20 49 63 63 68 61 6e     , enyone, Icchan
     338:	5e 2c 20 69 6c 65 2d 2c 20 6d 61 72 61 6e 74 2c     ^, ile-, marant,
     348:	20 6e 61 6d 74 61 62 2c 20 5a 6f 75 70 70 65 6e      namtab, Zouppen
     358:	2c 20 6b 61 74 69 73 2c 20 4c 61 73 73 65 53 2c     , katis, LasseS,
     368:	20 54 75 67 67 65 00                                 Tugge.

0000036f <s_playlist_item_27>:
	...

00000371 <s_playlist_item_28>:
     371:	13 45 6c 6f 76 61 6c 6f 20 68 61 73 20 61 72 72     .Elovalo has arr
     381:	69 76 65 64 00                                      ived.

00000386 <s_playlist_item_29>:
	...

00000388 <s_playlist_item_30>:
     388:	3f 45 6c 6f 76 61 6c 6f 20 69 6e 76 61 73 69 6f     ?Elovalo invasio
     398:	6e 20 73 70 72 65 61 64 73 20 74 65 72 72 6f 72     n spreads terror
     3a8:	20 61 6e 64 20 63 6f 6e 66 75 73 69 6f 6e 20 61      and confusion a
     3b8:	63 72 6f 73 73 20 50 72 6f 74 6f 6d 6f 21 21 21     cross Protomo!!!
	...

000003c9 <s_playlist_item_31>:
     3c9:	3c 53 74 65 70 20 63 6c 6f 73 65 72 20 6d 79 20     <Step closer my 
     3d9:	66 72 69 65 6e 64 2c 20 67 69 76 65 20 6d 65 20     friend, give me 
     3e9:	61 20 68 75 67 2e 20 4d 61 6b 65 20 6d 79 20 68     a hug. Make my h
     3f9:	65 61 72 74 20 66 6c 75 74 74 65 72 21 00           eart flutter!.

00000407 <s_playlist_item_32>:
	...

00000409 <s_playlist_item_33>:
     409:	32 49 6e 20 74 68 65 20 67 61 6d 65 20 6f 66 20     2In the game of 
     419:	65 6c 6f 76 61 6c 6f 20 79 6f 75 20 65 69 74 68     elovalo you eith
     429:	65 72 20 77 69 6e 2c 20 6f 72 20 79 6f 75 20 64     er win, or you d
     439:	69 65 2e 00                                         ie..

0000043d <s_playlist_item_34>:
	...

0000043f <s_playlist_item_35>:
	...

00000441 <s_playlist_item_36>:
     441:	10 57 68 61 74 20 69 73 20 65 6c 6f 76 61 6c 6f     .What is elovalo
     451:	3f 00                                               ?.

00000453 <s_playlist_item_37>:
	...

00000455 <s_playlist_item_38>:
	...

00000457 <s_playlist_item_39>:
     457:	14 42 61 62 79 20 64 6f 6e 27 74 20 48 65 72 74     .Baby don't Hert
     467:	7a 20 6d 65 21 00                                   z me!.

0000046d <s_playlist_item_40>:
     46d:	13 57 69 6e 74 65 72 20 69 73 20 63 6f 6d 69 6e     .Winter is comin
     47d:	67 2e 2e 2e 00                                      g....

00000482 <s_playlist_item_41>:
	...

00000484 <s_playlist_item_42>:
     484:	5d 43 6f 6d 65 20 6f 6e 2c 20 77 65 27 76 65 20     ]Come on, we've 
     494:	62 65 65 6e 20 66 72 69 65 6e 64 73 20 66 6f 72     been friends for
     4a4:	20 61 20 6c 6f 6e 67 20 74 69 6d 65 20 6e 6f 77      a long time now
     4b4:	2e 20 49 20 74 68 69 6e 6b 20 69 74 27 73 20 74     . I think it's t
     4c4:	69 6d 65 20 74 6f 20 74 61 6b 65 20 74 68 65 20     ime to take the 
     4d4:	6e 65 78 74 20 73 74 65 70 2e 2e 2e 2e 2e 00        next step......

000004e3 <s_playlist_item_43>:
	...

000004e5 <s_playlist_item_44>:
	...

000004e7 <s_playlist_item_45>:
	...

000004e9 <s_playlist_item_46>:
     4e9:	55 43 72 65 64 69 74 73 3a 20 62 65 62 72 61 77     UCredits: bebraw
     4f9:	2c 20 65 6e 79 6f 6e 65 2c 20 49 63 63 68 61 6e     , enyone, Icchan
     509:	5e 2c 20 69 6c 65 2d 2c 20 6d 61 72 61 6e 74 2c     ^, ile-, marant,
     519:	20 6e 61 6d 74 61 62 2c 20 5a 6f 75 70 70 65 6e      namtab, Zouppen
     529:	2c 20 6b 61 74 69 73 2c 20 4c 61 73 73 65 53 2c     , katis, LasseS,
     539:	20 54 75 67 67 65 00                                 Tugge.

00000540 <s_playlist_item_47>:
     540:	42 48 69 72 65 20 6d 65 20 69 66 20 79 6f 75 20     BHire me if you 
     550:	77 61 6e 74 20 79 6f 75 72 20 65 78 70 6f 20 62     want your expo b
     560:	6f 6f 74 68 20 74 6f 20 62 65 20 74 68 65 20 23     ooth to be the #
     570:	31 20 74 61 6c 6b 20 6f 66 20 74 68 65 20 73 68     1 talk of the sh
     580:	6f 77 21 00                                         ow!.

00000584 <s_playlist_item_48>:
     584:	2a 68 74 74 70 3a 2f 2f 65 6c 6f 76 61 6c 6f 2e     *http://elovalo.
     594:	6f 72 67 20 2e 20 57 65 20 68 61 76 65 20 63 6f     org . We have co
     5a4:	6d 65 20 74 6f 20 73 74 61 79 2e 00                 me to stay..

000005b0 <s_playlist_item_49>:
	...

000005b2 <s_playlist_item_50>:
	...

000005b4 <master_playlist>:
     5b4:	01 24 f4 8c 02 0e 24 f4 8e 02 06 24 f4 90 02 14     .$....$....$....
     5c4:	48 e8 92 02 1f 90 d0 94 02 01 68 89 a1 02 1f 90     H.........h.....
     5d4:	d0 a3 02 19 53 07 b0 02 01 35 0c b2 02 17 e8 03     ....S....5......
     5e4:	b4 02 16 f4 01 b6 02 04 88 13 b8 02 1f 35 0c ba     .............5..
     5f4:	02 14 e2 04 eb 02 00 e2 04 ed 02 07 8a 02 ef 02     ................
     604:	15 53 07 f1 02 1e 71 02 f3 02 01 35 0c f5 02 1f     .S....q....5....
     614:	59 06 f7 02 0b d0 07 0c 03 05 53 07 0e 03 08 e2     Y.........S.....
     624:	04 10 03 04 88 13 12 03 0a 71 02 14 03 0e 88 13     .........q......
     634:	16 03 1f f9 15 18 03 19 53 07 6f 03 1f e2 04 71     ........S.o....q
     644:	03 01 4c 1d 86 03 1f 17 11 88 03 1f 17 11 c9 03     ..L.............
     654:	04 98 3a 07 04 1f 35 0c 09 04 14 e2 04 3d 04 00     ..:...5......=..
     664:	4c 1d 3f 04 1f e2 04 41 04 07 8a 02 53 04 01 98     L.?....A....S...
     674:	3a 55 04 1f 59 06 57 04 1f 59 06 6d 04 0b 4c 1d     :U..Y.W..Y.m..L.
     684:	82 04 1f 88 13 84 04 04 98 3a e3 04 0a 71 02 e5     .........:...q..
     694:	04 0e 88 13 e7 04 1f f9 15 e9 04 1f 88 13 40 05     ..............@.
     6a4:	1f 17 11 84 05 01 20 a1 b0 05 0e 90 d0 b2 05        ...... ........

000006b3 <playlists>:
     6b3:	00 03 06 07 1b 31                                   .....1

000006b9 <font8x8_basic>:
	...
     7c1:	18 3c 3c 18 18 00 18 00 36 36 00 00 00 00 00 00     .<<.....66......
     7d1:	36 36 7f 36 7f 36 36 00 0c 3e 03 1e 30 1f 0c 00     66.6.66..>..0...
     7e1:	00 63 33 18 0c 66 63 00 1c 36 1c 6e 3b 33 6e 00     .c3..fc..6.n;3n.
     7f1:	06 06 03 00 00 00 00 00 18 0c 06 06 06 0c 18 00     ................
     801:	06 0c 18 18 18 0c 06 00 00 66 3c ff 3c 66 00 00     .........f<.<f..
     811:	00 0c 0c 3f 0c 0c 00 00 00 00 00 00 00 0c 0c 06     ...?............
     821:	00 00 00 3f 00 00 00 00 00 00 00 00 00 0c 0c 00     ...?............
     831:	60 30 18 0c 06 03 01 00 3e 63 73 7b 6f 67 3e 00     `0......>cs{og>.
     841:	0c 0e 0c 0c 0c 0c 3f 00 1e 33 30 1c 06 33 3f 00     ......?..30..3?.
     851:	1e 33 30 1c 30 33 1e 00 38 3c 36 33 7f 30 78 00     .30.03..8<63.0x.
     861:	3f 03 1f 30 30 33 1e 00 1c 06 03 1f 33 33 1e 00     ?..003......33..
     871:	3f 33 30 18 0c 0c 0c 00 1e 33 33 1e 33 33 1e 00     ?30......33.33..
     881:	1e 33 33 3e 30 18 0e 00 00 0c 0c 00 00 0c 0c 00     .33>0...........
     891:	00 0c 0c 00 00 0c 0c 06 18 0c 06 03 06 0c 18 00     ................
     8a1:	00 00 3f 00 00 3f 00 00 06 0c 18 30 18 0c 06 00     ..?..?.....0....
     8b1:	1e 33 30 18 0c 00 0c 00 3e 63 7b 7b 7b 03 1e 00     .30.....>c{{{...
     8c1:	0c 1e 33 33 3f 33 33 00 3f 66 66 3e 66 66 3f 00     ..33?33.?ff>ff?.
     8d1:	3c 66 03 03 03 66 3c 00 1f 36 66 66 66 36 1f 00     <f...f<..6fff6..
     8e1:	7f 46 16 1e 16 46 7f 00 7f 46 16 1e 16 06 0f 00     .F...F...F......
     8f1:	3c 66 03 03 73 66 7c 00 33 33 33 3f 33 33 33 00     <f..sf|.333?333.
     901:	1e 0c 0c 0c 0c 0c 1e 00 78 30 30 30 33 33 1e 00     ........x00033..
     911:	67 66 36 1e 36 66 67 00 0f 06 06 06 46 66 7f 00     gf6.6fg.....Ff..
     921:	63 77 7f 7f 6b 63 63 00 63 67 6f 7b 73 63 63 00     cw..kcc.cgo{scc.
     931:	1c 36 63 63 63 36 1c 00 3f 66 66 3e 06 06 0f 00     .6ccc6..?ff>....
     941:	1e 33 33 33 3b 1e 38 00 3f 66 66 3e 36 66 67 00     .333;.8.?ff>6fg.
     951:	1e 33 07 0e 38 33 1e 00 3f 2d 0c 0c 0c 0c 1e 00     .3..83..?-......
     961:	33 33 33 33 33 33 3f 00 33 33 33 33 33 1e 0c 00     333333?.33333...
     971:	63 63 63 6b 7f 77 63 00 63 63 36 1c 1c 36 63 00     ccck.wc.cc6..6c.
     981:	33 33 33 1e 0c 0c 1e 00 7f 63 31 18 4c 66 7f 00     333......c1.Lf..
     991:	1e 06 06 06 06 06 1e 00 03 06 0c 18 30 60 40 00     ............0`@.
     9a1:	1e 18 18 18 18 18 1e 00 08 1c 36 63 00 00 00 00     ..........6c....
     9b1:	00 00 00 00 00 00 00 ff 0c 0c 18 00 00 00 00 00     ................
     9c1:	00 00 1e 30 3e 33 6e 00 07 06 06 3e 66 66 3b 00     ...0>3n....>ff;.
     9d1:	00 00 1e 33 03 33 1e 00 38 30 30 3e 33 33 6e 00     ...3.3..800>33n.
     9e1:	00 00 1e 33 3f 03 1e 00 1c 36 06 0f 06 06 0f 00     ...3?....6......
     9f1:	00 00 6e 33 33 3e 30 1f 07 06 36 6e 66 66 67 00     ..n33>0...6nffg.
     a01:	0c 00 0e 0c 0c 0c 1e 00 30 00 30 30 30 33 33 1e     ........0.00033.
     a11:	07 06 66 36 1e 36 67 00 0e 0c 0c 0c 0c 0c 1e 00     ..f6.6g.........
     a21:	00 00 33 7f 7f 6b 63 00 00 00 1f 33 33 33 33 00     ..3..kc....3333.
     a31:	00 00 1e 33 33 33 1e 00 00 00 3b 66 66 3e 06 0f     ...333....;ff>..
     a41:	00 00 6e 33 33 3e 30 78 00 00 3b 6e 66 06 0f 00     ..n33>0x..;nf...
     a51:	00 00 3e 03 1e 30 1f 00 08 0c 3e 0c 0c 2c 18 00     ..>..0....>..,..
     a61:	00 00 33 33 33 33 6e 00 00 00 33 33 33 1e 0c 00     ..3333n...333...
     a71:	00 00 63 6b 7f 7f 36 00 00 00 63 36 1c 36 63 00     ..ck..6...c6.6c.
     a81:	00 00 33 33 33 3e 30 1f 00 00 3f 19 0c 26 3f 00     ..333>0...?..&?.
     a91:	38 0c 0c 07 0c 0c 38 00 18 18 18 00 18 18 18 00     8.....8.........
     aa1:	07 0c 0c 38 0c 0c 07 00 6e 3b 00 00 00 00 00 00     ...8....n;......
	...

00000ab9 <weber_fechner_table>:
	...
     ad1:	00 00 0b 00 0b 00 0b 00 0b 00 0b 00 0b 00 0b 00     ................
     ae1:	0b 00 0b 00 0b 00 0b 00 0b 00 0b 00 0b 00 0b 00     ................
     af1:	0b 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
     b01:	0c 00 0c 00 0c 00 0d 00 0d 00 0d 00 0d 00 0d 00     ................
     b11:	0d 00 0d 00 0d 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     b21:	0e 00 0f 00 0f 00 0f 00 0f 00 0f 00 10 00 10 00     ................
     b31:	10 00 10 00 11 00 11 00 11 00 11 00 12 00 12 00     ................
     b41:	12 00 12 00 13 00 13 00 13 00 14 00 14 00 15 00     ................
     b51:	15 00 15 00 16 00 16 00 17 00 17 00 17 00 18 00     ................
     b61:	18 00 19 00 1a 00 1a 00 1b 00 1b 00 1c 00 1c 00     ................
     b71:	1d 00 1e 00 1e 00 1f 00 20 00 21 00 21 00 22 00     ........ .!.!.".
     b81:	23 00 24 00 25 00 26 00 27 00 28 00 29 00 2a 00     #.$.%.&.'.(.).*.
     b91:	2b 00 2c 00 2d 00 2e 00 30 00 31 00 32 00 34 00     +.,.-...0.1.2.4.
     ba1:	35 00 36 00 38 00 39 00 3b 00 3d 00 3e 00 40 00     5.6.8.9.;.=.>.@.
     bb1:	42 00 44 00 46 00 48 00 4a 00 4c 00 4e 00 51 00     B.D.F.H.J.L.N.Q.
     bc1:	53 00 55 00 58 00 5b 00 5d 00 60 00 63 00 66 00     S.U.X.[.].`.c.f.
     bd1:	69 00 6c 00 70 00 73 00 76 00 7a 00 7e 00 82 00     i.l.p.s.v.z.~...
     be1:	86 00 8a 00 8e 00 93 00 97 00 9c 00 a1 00 a6 00     ................
     bf1:	ab 00 b0 00 b6 00 bc 00 c1 00 c8 00 ce 00 d4 00     ................
     c01:	db 00 e2 00 e9 00 f1 00 f8 00 00 01 09 01 11 01     ................
     c11:	1a 01 23 01 2c 01 36 01 40 01 4a 01 55 01 60 01     ..#.,.6.@.J.U.`.
     c21:	6b 01 77 01 83 01 90 01 9c 01 aa 01 b8 01 c6 01     k.w.............
     c31:	d5 01 e4 01 f4 01 04 02 15 02 26 02 38 02 4b 02     ..........&.8.K.
     c41:	5e 02 71 02 86 02 9b 02 b1 02 c7 02 df 02 f7 02     ^.q.............
     c51:	10 03 29 03 44 03 5f 03 7b 03 99 03 b7 03 d6 03     ..).D._.{.......
     c61:	f6 03 18 04 3a 04 5e 04 82 04 a8 04 d0 04 f8 04     ....:.^.........
     c71:	22 05 4d 05 7a 05 a8 05 d8 05 09 06 3c 06 71 06     ".M.z.......<.q.
     c81:	a7 06 df 06 19 07 55 07 93 07 d3 07 15 08 59 08     ......U.......Y.
     c91:	a0 08 e9 08 34 09 82 09 d2 09 25 0a 7b 0a d4 0a     ....4.....%.{...
     ca1:	2f 0b 8e 0b f0 0b 55 0c bd 0c 29 0d 98 0d 0b 0e     /.....U...).....
     cb1:	82 0e fd 0e 7c 0f ff 0f                             ....|...

00000cb9 <key_cube_shutdown>:
     cb9:	6f 66 66 00                                         off.

00000cbd <key_cube_start>:
     cbd:	6f 6e 00                                            on.

00000cc0 <key_serial_hello>:
     cc0:	68 65 6c 6c 6f 00                                   hello.

00000cc6 <key_dimming>:
     cc6:	69 6e 74 65 6e 73 69 74 79 00                       intensity.

00000cd0 <s_cube_shutdown>:
     cd0:	50 6f 77 65 72 2d 6f 66 66 20 74 68 65 20 63 75     Power-off the cu
     ce0:	62 65 20 70 61 72 74 00                             be part.

00000ce8 <s_cube_start>:
     ce8:	50 6f 77 65 72 2d 6f 6e 20 74 68 65 20 63 75 62     Power-on the cub
     cf8:	65 20 70 61 72 74 00                                e part.

00000cff <s_serial_hello>:
     cff:	53 61 79 20 22 68 65 6c 6c 6f 22 20 74 6f 20 73     Say "hello" to s
     d0f:	65 72 69 61 6c 20 63 6f 6e 73 6f 6c 65 00           erial console.

00000d1d <s_serial_hello_arg>:
     d1d:	4e 75 6d 62 65 72 20 74 6f 20 77 72 69 74 65 20     Number to write 
     d2d:	61 66 74 65 72 20 22 68 65 6c 6c 6f 22 00           after "hello".

00000d3b <s_dimming>:
     d3b:	53 65 74 20 63 75 62 65 20 69 6e 74 65 6e 73 69     Set cube intensi
     d4b:	74 79 00                                            ty.

00000d4e <s_dimming_arg>:
     d4e:	49 6e 74 65 6e 73 69 74 79 20 62 65 74 77 65 65     Intensity betwee
     d5e:	6e 20 30 20 61 6e 64 20 32 35 35 00                 n 0 and 255.

00000d6a <cron_actions>:
     d6a:	dc 29 b9 0c d0 0c 00 00 a1 29 bd 0c e8 0c 00 00     .).......)......
     d7a:	c0 22 c0 0c ff 0c 1d 0d 59 2d c6 0c 3b 0d 4e 0d     ."......Y-..;.N.

00000d8a <__ctors_end>:
     d8a:	11 24       	eor	r1, r1
     d8c:	1f be       	out	0x3f, r1	; 63
     d8e:	cf ef       	ldi	r28, 0xFF	; 255
     d90:	d8 e0       	ldi	r29, 0x08	; 8
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	cd bf       	out	0x3d, r28	; 61

00000d96 <__do_copy_data>:
     d96:	11 e0       	ldi	r17, 0x01	; 1
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b1 e0       	ldi	r27, 0x01	; 1
     d9c:	ec ec       	ldi	r30, 0xCC	; 204
     d9e:	f2 e6       	ldi	r31, 0x62	; 98
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <__do_copy_data+0x10>
     da2:	05 90       	lpm	r0, Z+
     da4:	0d 92       	st	X+, r0
     da6:	a6 31       	cpi	r26, 0x16	; 22
     da8:	b1 07       	cpc	r27, r17
     daa:	d9 f7       	brne	.-10     	; 0xda2 <__do_copy_data+0xc>

00000dac <__do_clear_bss>:
     dac:	17 e0       	ldi	r17, 0x07	; 7
     dae:	a6 e1       	ldi	r26, 0x16	; 22
     db0:	b1 e0       	ldi	r27, 0x01	; 1
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <.do_clear_bss_start>

00000db4 <.do_clear_bss_loop>:
     db4:	1d 92       	st	X+, r1

00000db6 <.do_clear_bss_start>:
     db6:	a0 3b       	cpi	r26, 0xB0	; 176
     db8:	b1 07       	cpc	r27, r17
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <.do_clear_bss_loop>
     dbc:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <main>
     dc0:	0c 94 64 31 	jmp	0x62c8	; 0x62c8 <_exit>

00000dc4 <__bad_interrupt>:
     dc4:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__vector_default>

00000dc8 <gs_buf_swap>:
uint8_t gs_buf_b[GS_BUF_BYTES]={0x00};

uint8_t *gs_buf_front = gs_buf_a;
uint8_t *gs_buf_back = gs_buf_b;

void gs_buf_swap(void) {
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <gs_buf_swap+0x6>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	uint8_t *tmp = gs_buf_front;
     dd2:	80 91 00 01 	lds	r24, 0x0100
     dd6:	90 91 01 01 	lds	r25, 0x0101
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
	gs_buf_front = gs_buf_back;
     dde:	80 91 02 01 	lds	r24, 0x0102
     de2:	90 91 03 01 	lds	r25, 0x0103
     de6:	90 93 01 01 	sts	0x0101, r25
     dea:	80 93 00 01 	sts	0x0100, r24
	gs_buf_back = tmp;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	90 93 03 01 	sts	0x0103, r25
     df6:	80 93 02 01 	sts	0x0102, r24
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <gs_restore_bufs>:

void gs_restore_bufs(void) {
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	if (gs_buf_front == gs_buf_a) {
     e0c:	80 91 00 01 	lds	r24, 0x0100
     e10:	90 91 01 01 	lds	r25, 0x0101
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	86 31       	cpi	r24, 0x16	; 22
     e18:	92 07       	cpc	r25, r18
     e1a:	39 f4       	brne	.+14     	; 0xe2a <gs_restore_bufs+0x26>
		gs_buf_back = gs_buf_b;
     e1c:	86 e1       	ldi	r24, 0x16	; 22
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	90 93 03 01 	sts	0x0103, r25
     e24:	80 93 02 01 	sts	0x0102, r24
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <gs_restore_bufs+0x32>
	} else {
		gs_buf_back = gs_buf_a;
     e2a:	86 e1       	ldi	r24, 0x16	; 22
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	90 93 03 01 	sts	0x0103, r25
     e32:	80 93 02 01 	sts	0x0102, r24
	}
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <effect_gradient.1470>:
	{ s_scroll_text, NULL, &effect_scroll_text, FLIP, 4 },
};

const uint8_t effects_len = sizeof(effects) / sizeof(effect_t);

void effect_gradient(void){
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	27 97       	sbiw	r28, 0x07	; 7
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
	float fac;
	int8_t cur = (ticks >> 5) % 8;
     e54:	80 91 3e 07 	lds	r24, 0x073E
     e58:	90 91 3f 07 	lds	r25, 0x073F
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	92 95       	swap	r25
     e62:	82 95       	swap	r24
     e64:	8f 70       	andi	r24, 0x0F	; 15
     e66:	89 27       	eor	r24, r25
     e68:	9f 70       	andi	r25, 0x0F	; 15
     e6a:	89 27       	eor	r24, r25
     e6c:	87 70       	andi	r24, 0x07	; 7
     e6e:	8b 83       	std	Y+3, r24	; 0x03
	clear_buffer();
     e70:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(int8_t i = 0; i < LEDS_X; i++) {
     e74:	19 82       	std	Y+1, r1	; 0x01
     e76:	5c c0       	rjmp	.+184    	; 0xf30 <effect_gradient.1470+0xf4>
		for(uint8_t j = 0; j < LEDS_Z; j++) {
     e78:	1a 82       	std	Y+2, r1	; 0x02
     e7a:	53 c0       	rjmp	.+166    	; 0xf22 <effect_gradient.1470+0xe6>
			fac = j <= cur? (cur - j) * 0.1: 0.0;
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	99 27       	eor	r25, r25
     e86:	87 fd       	sbrc	r24, 7
     e88:	90 95       	com	r25
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	0c f1       	brlt	.+66     	; 0xed2 <effect_gradient.1470+0x96>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	33 27       	eor	r19, r19
     e96:	27 fd       	sbrc	r18, 7
     e98:	30 95       	com	r19
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	48 1b       	sub	r20, r24
     ea4:	59 0b       	sbc	r21, r25
     ea6:	ca 01       	movw	r24, r20
     ea8:	aa 27       	eor	r26, r26
     eaa:	97 fd       	sbrc	r25, 7
     eac:	a0 95       	com	r26
     eae:	ba 2f       	mov	r27, r26
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <__floatsisf>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	2d ec       	ldi	r18, 0xCD	; 205
     ebe:	3c ec       	ldi	r19, 0xCC	; 204
     ec0:	4c ec       	ldi	r20, 0xCC	; 204
     ec2:	5d e3       	ldi	r21, 0x3D	; 61
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <effect_gradient.1470+0x9c>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	dc 01       	movw	r26, r24
     ed8:	8c 83       	std	Y+4, r24	; 0x04
     eda:	9d 83       	std	Y+5, r25	; 0x05
     edc:	ae 83       	std	Y+6, r26	; 0x06
     ede:	bf 83       	std	Y+7, r27	; 0x07
			set_row(i, LEDS_Z - 1 - j, 0, 7, MAX_INTENSITY * fac);
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 ef       	ldi	r19, 0xF0	; 240
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	55 e4       	ldi	r21, 0x45	; 69
     ee8:	6c 81       	ldd	r22, Y+4	; 0x04
     eea:	7d 81       	ldd	r23, Y+5	; 0x05
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	37 e0       	ldi	r19, 0x07	; 7
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	53 2f       	mov	r21, r19
     f0a:	52 1b       	sub	r21, r18
     f0c:	39 81       	ldd	r19, Y+1	; 0x01
     f0e:	8c 01       	movw	r16, r24
     f10:	27 e0       	ldi	r18, 0x07	; 7
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	65 2f       	mov	r22, r21
     f16:	83 2f       	mov	r24, r19
     f18:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
void effect_gradient(void){
	float fac;
	int8_t cur = (ticks >> 5) % 8;
	clear_buffer();
	for(int8_t i = 0; i < LEDS_X; i++) {
		for(uint8_t j = 0; j < LEDS_Z; j++) {
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	08 f4       	brcc	.+2      	; 0xf2a <effect_gradient.1470+0xee>
     f28:	a9 cf       	rjmp	.-174    	; 0xe7c <effect_gradient.1470+0x40>

void effect_gradient(void){
	float fac;
	int8_t cur = (ticks >> 5) % 8;
	clear_buffer();
	for(int8_t i = 0; i < LEDS_X; i++) {
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	0c f4       	brge	.+2      	; 0xf38 <effect_gradient.1470+0xfc>
     f36:	a0 cf       	rjmp	.-192    	; 0xe78 <effect_gradient.1470+0x3c>
		for(uint8_t j = 0; j < LEDS_Z; j++) {
			fac = j <= cur? (cur - j) * 0.1: 0.0;
			set_row(i, LEDS_Z - 1 - j, 0, 7, MAX_INTENSITY * fac);
		}
	}
}
     f38:	27 96       	adiw	r28, 0x07	; 7
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <effect_sine.1454>:

XY(effect_sine) {
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
     f5a:	84 eb       	ldi	r24, 0xB4	; 180
     f5c:	97 e0       	ldi	r25, 0x07	; 7
     f5e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <iterate_xy>
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <effect_sine_kernel.1456>:
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	28 97       	sbiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	8f 83       	std	Y+7, r24	; 0x07
     f8e:	68 87       	std	Y+8, r22	; 0x08
	float scaler = (float)MAX_2D_PLOT_INTENSITY / 4;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	9e ef       	ldi	r25, 0xFE	; 254
     f94:	af ed       	ldi	r26, 0xDF	; 223
     f96:	b5 e4       	ldi	r27, 0x45	; 69
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	ab 83       	std	Y+3, r26	; 0x03
     f9e:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t i = scaler * (2 + sin((float)x / 2 + (float)ticks / 25) + sin((float)y / 2 + (float)ticks / 50));
     fa0:	8f 81       	ldd	r24, Y+7	; 0x07
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e0       	ldi	r26, 0x00	; 0
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e4       	ldi	r21, 0x40	; 64
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	7c 01       	movw	r14, r24
     fcc:	8d 01       	movw	r16, r26
     fce:	80 91 3e 07 	lds	r24, 0x073E
     fd2:	90 91 3f 07 	lds	r25, 0x073F
     fd6:	cc 01       	movw	r24, r24
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	48 ec       	ldi	r20, 0xC8	; 200
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9c 01       	movw	r18, r24
     ffe:	ad 01       	movw	r20, r26
    1000:	c8 01       	movw	r24, r16
    1002:	b7 01       	movw	r22, r14
    1004:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sin>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e4       	ldi	r21, 0x40	; 64
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	7c 01       	movw	r14, r24
    102e:	8d 01       	movw	r16, r26
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e4       	ldi	r21, 0x40	; 64
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	5c 01       	movw	r10, r24
    105c:	6d 01       	movw	r12, r26
    105e:	80 91 3e 07 	lds	r24, 0x073E
    1062:	90 91 3f 07 	lds	r25, 0x073F
    1066:	cc 01       	movw	r24, r24
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	48 e4       	ldi	r20, 0x48	; 72
    107e:	52 e4       	ldi	r21, 0x42	; 66
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9c 01       	movw	r18, r24
    108e:	ad 01       	movw	r20, r26
    1090:	c6 01       	movw	r24, r12
    1092:	b5 01       	movw	r22, r10
    1094:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sin>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	9c 01       	movw	r18, r24
    10aa:	ad 01       	movw	r20, r26
    10ac:	c8 01       	movw	r24, r16
    10ae:	b7 01       	movw	r22, r14
    10b0:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	4b 81       	ldd	r20, Y+3	; 0x03
    10be:	5c 81       	ldd	r21, Y+4	; 0x04
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
	set_z(x, y, i);
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	ac 01       	movw	r20, r24
    10e2:	68 85       	ldd	r22, Y+8	; 0x08
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <set_z>
}
    10ea:	28 96       	adiw	r28, 0x08	; 8
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	08 95       	ret

0000110c <init_stairs_y.1400>:

static void init_stairs_y(void){
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	00 d0       	rcall	.+0      	; 0x1112 <init_stairs_y.1400+0x6>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	assert(LEDS_Y <= LEDS_Z);
	
	clear_buffer();
    1116:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(uint8_t x = 0; x<LEDS_X; x++) {
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	12 c0       	rjmp	.+36     	; 0x1142 <init_stairs_y.1400+0x36>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    111e:	1a 82       	std	Y+2, r1	; 0x02
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <init_stairs_y.1400+0x2a>
			set_led_8_8_12(x, y, y, MAX_INTENSITY);
    1122:	2f ef       	ldi	r18, 0xFF	; 255
    1124:	3f e0       	ldi	r19, 0x0F	; 15
    1126:	4a 81       	ldd	r20, Y+2	; 0x02
    1128:	6a 81       	ldd	r22, Y+2	; 0x02
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
static void init_stairs_y(void){
	assert(LEDS_Y <= LEDS_Z);
	
	clear_buffer();
	for(uint8_t x = 0; x<LEDS_X; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	98 f3       	brcs	.-26     	; 0x1122 <init_stairs_y.1400+0x16>

static void init_stairs_y(void){
	assert(LEDS_Y <= LEDS_Z);
	
	clear_buffer();
	for(uint8_t x = 0; x<LEDS_X; x++) {
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	8f 5f       	subi	r24, 0xFF	; 255
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	88 30       	cpi	r24, 0x08	; 8
    1146:	58 f3       	brcs	.-42     	; 0x111e <init_stairs_y.1400+0x12>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led_8_8_12(x, y, y, MAX_INTENSITY);
		}
	}
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <init_matrix.1410>:

static const uint8_t matrix_xyz_len = 10;
static void init_matrix(void){
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	1f 92       	push	r1
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
    1164:	19 82       	std	Y+1, r1	; 0x01
    1166:	30 c0       	rjmp	.+96     	; 0x11c8 <init_matrix.1410+0x76>
		vars.matrix.xyz[i] = (xyz_t){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	08 2f       	mov	r16, r24
    116c:	10 e0       	ldi	r17, 0x00	; 0
			.x = randint(0, LEDS_X),
    116e:	68 e0       	ldi	r22, 0x08	; 8
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    1176:	e8 2e       	mov	r14, r24
			.y = randint(0, LEDS_Y),
    1178:	68 e0       	ldi	r22, 0x08	; 8
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    1180:	f8 2e       	mov	r15, r24
			.z = randint(0, LEDS_Z)
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    118a:	28 2f       	mov	r18, r24
}

static const uint8_t matrix_xyz_len = 10;
static void init_matrix(void){
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
		vars.matrix.xyz[i] = (xyz_t){
    118c:	c8 01       	movw	r24, r16
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	80 0f       	add	r24, r16
    1194:	91 1f       	adc	r25, r17
    1196:	8a 5e       	subi	r24, 0xEA	; 234
    1198:	98 4f       	sbci	r25, 0xF8	; 248
    119a:	fc 01       	movw	r30, r24
    119c:	e0 82       	st	Z, r14
    119e:	c8 01       	movw	r24, r16
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	80 0f       	add	r24, r16
    11a6:	91 1f       	adc	r25, r17
    11a8:	89 5e       	subi	r24, 0xE9	; 233
    11aa:	98 4f       	sbci	r25, 0xF8	; 248
    11ac:	fc 01       	movw	r30, r24
    11ae:	f0 82       	st	Z, r15
    11b0:	c8 01       	movw	r24, r16
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	80 0f       	add	r24, r16
    11b8:	91 1f       	adc	r25, r17
    11ba:	88 5e       	subi	r24, 0xE8	; 232
    11bc:	98 4f       	sbci	r25, 0xF8	; 248
    11be:	fc 01       	movw	r30, r24
    11c0:	20 83       	st	Z, r18
	}
}

static const uint8_t matrix_xyz_len = 10;
static void init_matrix(void){
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	80 91 0f 01 	lds	r24, 0x010F
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	98 17       	cp	r25, r24
    11d0:	58 f2       	brcs	.-106    	; 0x1168 <init_matrix.1410+0x16>
			.x = randint(0, LEDS_X),
			.y = randint(0, LEDS_Y),
			.z = randint(0, LEDS_Z)
		};
	}
	clear_buffer();
    11d2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    11d6:	0f 90       	pop	r0
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	08 95       	ret

000011e6 <effect_matrix.1398>:
void effect_matrix(void){
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <effect_matrix.1398+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <effect_matrix.1398+0x8>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <effect_matrix.1398+0xa>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    11f4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	48 c0       	rjmp	.+144    	; 0x128c <effect_matrix.1398+0xa6>
		xyz_t xyz = vars.matrix.xyz[i];
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	c9 01       	movw	r24, r18
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	82 0f       	add	r24, r18
    120a:	93 1f       	adc	r25, r19
    120c:	8a 5e       	subi	r24, 0xEA	; 234
    120e:	98 4f       	sbci	r25, 0xF8	; 248
    1210:	fc 01       	movw	r30, r24
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	a2 81       	ldd	r26, Z+2	; 0x02
    1218:	8c 83       	std	Y+4, r24	; 0x04
    121a:	9d 83       	std	Y+5, r25	; 0x05
    121c:	ae 83       	std	Y+6, r26	; 0x06
		for(uint8_t j = 0; j < 3; j++) {
    121e:	1a 82       	std	Y+2, r1	; 0x02
    1220:	19 c0       	rjmp	.+50     	; 0x1254 <effect_matrix.1398+0x6e>
			if(xyz.z + j < LEDS_Z) {
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	91 05       	cpc	r25, r1
    1236:	5c f4       	brge	.+22     	; 0x124e <effect_matrix.1398+0x68>
				set_led(xyz.x, xyz.y, xyz.z + j, MAX_INTENSITY);
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	49 2f       	mov	r20, r25
    123e:	48 0f       	add	r20, r24
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	3f e0       	ldi	r19, 0x0F	; 15
    1248:	69 2f       	mov	r22, r25
    124a:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
void effect_matrix(void){
	clear_buffer();
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
		xyz_t xyz = vars.matrix.xyz[i];
		for(uint8_t j = 0; j < 3; j++) {
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	20 f3       	brcs	.-56     	; 0x1222 <effect_matrix.1398+0x3c>
			if(xyz.z + j < LEDS_Z) {
				set_led(xyz.x, xyz.y, xyz.z + j, MAX_INTENSITY);
			}
		}
		uint8_t z = xyz.z;
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	8b 83       	std	Y+3, r24	; 0x03
		z++;
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	8b 83       	std	Y+3, r24	; 0x03
		if(z >= LEDS_Z) z = 0;
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 30       	cpi	r24, 0x08	; 8
    1268:	08 f0       	brcs	.+2      	; 0x126c <effect_matrix.1398+0x86>
    126a:	1b 82       	std	Y+3, r1	; 0x03
		vars.matrix.xyz[i].z = z;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	c9 01       	movw	r24, r18
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	88 5e       	subi	r24, 0xE8	; 232
    127e:	98 4f       	sbci	r25, 0xF8	; 248
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
	}
	clear_buffer();
}
void effect_matrix(void){
	clear_buffer();
	for(uint8_t i = 0; i < matrix_xyz_len; i++) {
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	80 91 0f 01 	lds	r24, 0x010F
    1290:	99 81       	ldd	r25, Y+1	; 0x01
    1292:	98 17       	cp	r25, r24
    1294:	08 f4       	brcc	.+2      	; 0x1298 <effect_matrix.1398+0xb2>
    1296:	b2 cf       	rjmp	.-156    	; 0x11fc <effect_matrix.1398+0x16>
		uint8_t z = xyz.z;
		z++;
		if(z >= LEDS_Z) z = 0;
		vars.matrix.xyz[i].z = z;
	}
}
    1298:	26 96       	adiw	r28, 0x06	; 6
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <init_heart.1363>:

static void init_heart(void){
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	vars.heart.y = 255;
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	80 93 16 07 	sts	0x0716, r24
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <effect_heart.1437>:
void effect_heart(void){
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    12c6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	
	vars.heart.y -= (160-sensors.distance1+40)/10;
    12ca:	40 91 16 07 	lds	r20, 0x0716
    12ce:	80 91 06 01 	lds	r24, 0x0106
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	28 ec       	ldi	r18, 0xC8	; 200
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	b9 01       	movw	r22, r18
    12dc:	68 1b       	sub	r22, r24
    12de:	79 0b       	sbc	r23, r25
    12e0:	cb 01       	movw	r24, r22
    12e2:	2a e0       	ldi	r18, 0x0A	; 10
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	b9 01       	movw	r22, r18
    12e8:	0e 94 65 30 	call	0x60ca	; 0x60ca <__divmodhi4>
    12ec:	9b 01       	movw	r18, r22
    12ee:	c9 01       	movw	r24, r18
    12f0:	74 2f       	mov	r23, r20
    12f2:	78 1b       	sub	r23, r24
    12f4:	87 2f       	mov	r24, r23
    12f6:	80 93 16 07 	sts	0x0716, r24
	heart_shape(vars.heart.y);
    12fa:	80 91 16 07 	lds	r24, 0x0716
    12fe:	0e 94 39 16 	call	0x2c72	; 0x2c72 <heart_shape>
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <init_finite_worm.1478>:

static void init_finite_worm(void){
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	vars.finite_worm.pos[0] = 4;
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	90 93 17 07 	sts	0x0717, r25
    1318:	80 93 16 07 	sts	0x0716, r24
	vars.finite_worm.pos[1] = 4;
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	90 93 19 07 	sts	0x0719, r25
    1324:	80 93 18 07 	sts	0x0718, r24
	vars.finite_worm.pos[2] = 4;
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	90 93 1b 07 	sts	0x071B, r25
    1330:	80 93 1a 07 	sts	0x071A, r24
	vars.finite_worm.dir = 0;
    1334:	10 92 1d 07 	sts	0x071D, r1
    1338:	10 92 1c 07 	sts	0x071C, r1
	vars.finite_worm.speed = 1;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 1e 07 	sts	0x071E, r24
	memset(vars.finite_worm.prev_dirs, 10, WORM_LENGTH);
    1342:	4a e0       	ldi	r20, 0x0A	; 10
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	6a e0       	ldi	r22, 0x0A	; 10
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	8f e1       	ldi	r24, 0x1F	; 31
    134c:	97 e0       	ldi	r25, 0x07	; 7
    134e:	0e 94 07 31 	call	0x620e	; 0x620e <memset>
	vars.finite_worm.prev_dir_i = 0;
    1352:	10 92 3d 07 	sts	0x073D, r1
	clear_buffer();
    1356:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <effect_finite_worm.1408>:
void effect_finite_worm(void){
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	2a 97       	sbiw	r28, 0x0a	; 10
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    1374:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	set_led(vars.finite_worm.pos[0], vars.finite_worm.pos[1], vars.finite_worm.pos[2], MAX_INTENSITY);
    1378:	80 91 1a 07 	lds	r24, 0x071A
    137c:	90 91 1b 07 	lds	r25, 0x071B
    1380:	48 2f       	mov	r20, r24
    1382:	80 91 18 07 	lds	r24, 0x0718
    1386:	90 91 19 07 	lds	r25, 0x0719
    138a:	58 2f       	mov	r21, r24
    138c:	80 91 16 07 	lds	r24, 0x0716
    1390:	90 91 17 07 	lds	r25, 0x0717
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	3f e0       	ldi	r19, 0x0F	; 15
    1398:	65 2f       	mov	r22, r21
    139a:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	
	if(vars.finite_worm.prev_dirs[0] != 10) {
    139e:	80 91 1f 07 	lds	r24, 0x071F
    13a2:	90 91 20 07 	lds	r25, 0x0720
    13a6:	8a 30       	cpi	r24, 0x0A	; 10
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <effect_finite_worm.1408+0x4e>
    13ac:	70 c0       	rjmp	.+224    	; 0x148e <effect_finite_worm.1408+0x12e>
		int8_t i;
		uint8_t j;
		uint16_t tmp_pos[3] = {vars.finite_worm.pos[0], vars.finite_worm.pos[1], vars.finite_worm.pos[2]};
    13ae:	80 91 16 07 	lds	r24, 0x0716
    13b2:	90 91 17 07 	lds	r25, 0x0717
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	80 91 18 07 	lds	r24, 0x0718
    13be:	90 91 19 07 	lds	r25, 0x0719
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	8f 83       	std	Y+7, r24	; 0x07
    13c6:	80 91 1a 07 	lds	r24, 0x071A
    13ca:	90 91 1b 07 	lds	r25, 0x071B
    13ce:	9a 87       	std	Y+10, r25	; 0x0a
    13d0:	89 87       	std	Y+9, r24	; 0x09
		for(i = vars.finite_worm.prev_dir_i - 1, j = 0; j < WORM_LENGTH; i--, j++) {
    13d2:	80 91 3d 07 	lds	r24, 0x073D
    13d6:	81 50       	subi	r24, 0x01	; 1
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	1a 82       	std	Y+2, r1	; 0x02
    13dc:	54 c0       	rjmp	.+168    	; 0x1486 <effect_finite_worm.1408+0x126>
			if(i == -1) i = WORM_LENGTH-1;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	8f 3f       	cpi	r24, 0xFF	; 255
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <effect_finite_worm.1408+0x88>
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	89 83       	std	Y+1, r24	; 0x01
			tmp_pos[vars.finite_worm.prev_dirs[i]] -= vars.finite_worm.prev_speeds[i];
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	99 27       	eor	r25, r25
    13ec:	87 fd       	sbrc	r24, 7
    13ee:	90 95       	com	r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	81 5e       	subi	r24, 0xE1	; 225
    13f6:	98 4f       	sbci	r25, 0xF8	; 248
    13f8:	fc 01       	movw	r30, r24
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	29 81       	ldd	r18, Y+1	; 0x01
    1400:	33 27       	eor	r19, r19
    1402:	27 fd       	sbrc	r18, 7
    1404:	30 95       	com	r19
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	21 5e       	subi	r18, 0xE1	; 225
    140c:	38 4f       	sbci	r19, 0xF8	; 248
    140e:	f9 01       	movw	r30, r18
    1410:	20 81       	ld	r18, Z
    1412:	31 81       	ldd	r19, Z+1	; 0x01
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	ae 01       	movw	r20, r28
    141a:	4f 5f       	subi	r20, 0xFF	; 255
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	24 0f       	add	r18, r20
    1420:	35 1f       	adc	r19, r21
    1422:	2c 5f       	subi	r18, 0xFC	; 252
    1424:	3f 4f       	sbci	r19, 0xFF	; 255
    1426:	f9 01       	movw	r30, r18
    1428:	40 81       	ld	r20, Z
    142a:	51 81       	ldd	r21, Z+1	; 0x01
    142c:	29 81       	ldd	r18, Y+1	; 0x01
    142e:	33 27       	eor	r19, r19
    1430:	27 fd       	sbrc	r18, 7
    1432:	30 95       	com	r19
    1434:	2d 5c       	subi	r18, 0xCD	; 205
    1436:	38 4f       	sbci	r19, 0xF8	; 248
    1438:	f9 01       	movw	r30, r18
    143a:	20 81       	ld	r18, Z
    143c:	33 27       	eor	r19, r19
    143e:	27 fd       	sbrc	r18, 7
    1440:	30 95       	com	r19
    1442:	ba 01       	movw	r22, r20
    1444:	62 1b       	sub	r22, r18
    1446:	73 0b       	sbc	r23, r19
    1448:	9b 01       	movw	r18, r22
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	ae 01       	movw	r20, r28
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	84 0f       	add	r24, r20
    1456:	95 1f       	adc	r25, r21
    1458:	04 96       	adiw	r24, 0x04	; 4
    145a:	fc 01       	movw	r30, r24
    145c:	31 83       	std	Z+1, r19	; 0x01
    145e:	20 83       	st	Z, r18
			set_led(tmp_pos[0], tmp_pos[1], tmp_pos[2], MAX_INTENSITY);
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	48 2f       	mov	r20, r24
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	58 2f       	mov	r21, r24
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	2f ef       	ldi	r18, 0xFF	; 255
    1472:	3f e0       	ldi	r19, 0x0F	; 15
    1474:	65 2f       	mov	r22, r21
    1476:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	
	if(vars.finite_worm.prev_dirs[0] != 10) {
		int8_t i;
		uint8_t j;
		uint16_t tmp_pos[3] = {vars.finite_worm.pos[0], vars.finite_worm.pos[1], vars.finite_worm.pos[2]};
		for(i = vars.finite_worm.prev_dir_i - 1, j = 0; j < WORM_LENGTH; i--, j++) {
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	8a 30       	cpi	r24, 0x0A	; 10
    148a:	08 f4       	brcc	.+2      	; 0x148e <effect_finite_worm.1408+0x12e>
    148c:	a8 cf       	rjmp	.-176    	; 0x13de <effect_finite_worm.1408+0x7e>
			set_led(tmp_pos[0], tmp_pos[1], tmp_pos[2], MAX_INTENSITY);
		}
	}
	
	
	int new_pos = vars.finite_worm.pos[vars.finite_worm.dir] + vars.finite_worm.speed;
    148e:	80 91 1c 07 	lds	r24, 0x071C
    1492:	90 91 1d 07 	lds	r25, 0x071D
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	8a 5e       	subi	r24, 0xEA	; 234
    149c:	98 4f       	sbci	r25, 0xF8	; 248
    149e:	fc 01       	movw	r30, r24
    14a0:	20 81       	ld	r18, Z
    14a2:	31 81       	ldd	r19, Z+1	; 0x01
    14a4:	80 91 1e 07 	lds	r24, 0x071E
    14a8:	99 27       	eor	r25, r25
    14aa:	87 fd       	sbrc	r24, 7
    14ac:	90 95       	com	r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
	if(new_pos < 0 || new_pos >= LEDS_X || randint(0, 10) > 7) {
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	99 23       	and	r25, r25
    14bc:	5c f0       	brlt	.+22     	; 0x14d4 <effect_finite_worm.1408+0x174>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	91 05       	cpc	r25, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <effect_finite_worm.1408+0x174>
    14c8:	6a e0       	ldi	r22, 0x0A	; 10
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    14d0:	88 30       	cpi	r24, 0x08	; 8
    14d2:	c8 f0       	brcs	.+50     	; 0x1506 <effect_finite_worm.1408+0x1a6>
		vars.finite_worm.dir = vars.finite_worm.dir + 1 > 2? 0: vars.finite_worm.dir + 1;
    14d4:	80 91 1c 07 	lds	r24, 0x071C
    14d8:	90 91 1d 07 	lds	r25, 0x071D
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <effect_finite_worm.1408+0x190>
    14e4:	80 91 1c 07 	lds	r24, 0x071C
    14e8:	90 91 1d 07 	lds	r25, 0x071D
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <effect_finite_worm.1408+0x194>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	90 93 1d 07 	sts	0x071D, r25
    14f8:	80 93 1c 07 	sts	0x071C, r24
		vars.finite_worm.speed = -vars.finite_worm.speed;
    14fc:	80 91 1e 07 	lds	r24, 0x071E
    1500:	81 95       	neg	r24
    1502:	80 93 1e 07 	sts	0x071E, r24
	}
	vars.finite_worm.prev_dirs[vars.finite_worm.prev_dir_i] = vars.finite_worm.dir;
    1506:	80 91 3d 07 	lds	r24, 0x073D
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	20 91 1c 07 	lds	r18, 0x071C
    1512:	30 91 1d 07 	lds	r19, 0x071D
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	81 5e       	subi	r24, 0xE1	; 225
    151c:	98 4f       	sbci	r25, 0xF8	; 248
    151e:	fc 01       	movw	r30, r24
    1520:	31 83       	std	Z+1, r19	; 0x01
    1522:	20 83       	st	Z, r18
	vars.finite_worm.prev_speeds[vars.finite_worm.prev_dir_i] = vars.finite_worm.speed;
    1524:	80 91 3d 07 	lds	r24, 0x073D
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	20 91 1e 07 	lds	r18, 0x071E
    1530:	8d 5c       	subi	r24, 0xCD	; 205
    1532:	98 4f       	sbci	r25, 0xF8	; 248
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
	if(vars.finite_worm.prev_dir_i < WORM_LENGTH-1) {
    1538:	80 91 3d 07 	lds	r24, 0x073D
    153c:	89 30       	cpi	r24, 0x09	; 9
    153e:	30 f4       	brcc	.+12     	; 0x154c <effect_finite_worm.1408+0x1ec>
		vars.finite_worm.prev_dir_i++;
    1540:	80 91 3d 07 	lds	r24, 0x073D
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 3d 07 	sts	0x073D, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <effect_finite_worm.1408+0x1f0>
	}
	else {
		vars.finite_worm.prev_dir_i = 0;
    154c:	10 92 3d 07 	sts	0x073D, r1
	}
	vars.finite_worm.pos[vars.finite_worm.dir] += vars.finite_worm.speed;
    1550:	80 91 1c 07 	lds	r24, 0x071C
    1554:	90 91 1d 07 	lds	r25, 0x071D
    1558:	20 91 1c 07 	lds	r18, 0x071C
    155c:	30 91 1d 07 	lds	r19, 0x071D
    1560:	22 0f       	add	r18, r18
    1562:	33 1f       	adc	r19, r19
    1564:	2a 5e       	subi	r18, 0xEA	; 234
    1566:	38 4f       	sbci	r19, 0xF8	; 248
    1568:	f9 01       	movw	r30, r18
    156a:	40 81       	ld	r20, Z
    156c:	51 81       	ldd	r21, Z+1	; 0x01
    156e:	20 91 1e 07 	lds	r18, 0x071E
    1572:	33 27       	eor	r19, r19
    1574:	27 fd       	sbrc	r18, 7
    1576:	30 95       	com	r19
    1578:	24 0f       	add	r18, r20
    157a:	35 1f       	adc	r19, r21
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	8a 5e       	subi	r24, 0xEA	; 234
    1582:	98 4f       	sbci	r25, 0xF8	; 248
    1584:	fc 01       	movw	r30, r24
    1586:	31 83       	std	Z+1, r19	; 0x01
    1588:	20 83       	st	Z, r18
}
    158a:	2a 96       	adiw	r28, 0x0a	; 10
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <effect_all_on.1426>:

XYZ(effect_all_on) {
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
    15a8:	8b ed       	ldi	r24, 0xDB	; 219
    15aa:	9a e0       	ldi	r25, 0x0A	; 10
    15ac:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <iterate_xyz>
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <effect_all_on_kernel.1393>:
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <effect_all_on_kernel.1393+0x6>
    15bc:	1f 92       	push	r1
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
	set_led(x, y, z, MAX_INTENSITY);
    15c8:	2f ef       	ldi	r18, 0xFF	; 255
    15ca:	3f e0       	ldi	r19, 0x0F	; 15
    15cc:	4b 81       	ldd	r20, Y+3	; 0x03
    15ce:	6a 81       	ldd	r22, Y+2	; 0x02
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <effect_clock.1476>:

void effect_clock(void){
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	66 97       	sbiw	r28, 0x16	; 22
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
	char text[9];
	text[0] = 8;
    15f6:	88 e0       	ldi	r24, 0x08	; 8
    15f8:	8e 87       	std	Y+14, r24	; 0x0e
	text[3] = ':';
    15fa:	8a e3       	ldi	r24, 0x3A	; 58
    15fc:	89 8b       	std	Y+17, r24	; 0x11
	text[6] = ':';
    15fe:	8a e3       	ldi	r24, 0x3A	; 58
    1600:	8c 8b       	std	Y+20, r24	; 0x14
	time_t now = time(NULL);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <time>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	ab 83       	std	Y+3, r26	; 0x03
    1614:	bc 83       	std	Y+4, r27	; 0x04
	time_t since_midnight = (now+TIMEZONE_SECS) % SECS_IN_DAY;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	ab 81       	ldd	r26, Y+3	; 0x03
    161c:	bc 81       	ldd	r27, Y+4	; 0x04
    161e:	80 5d       	subi	r24, 0xD0	; 208
    1620:	95 4d       	sbci	r25, 0xD5	; 213
    1622:	af 4f       	sbci	r26, 0xFF	; 255
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	20 e8       	ldi	r18, 0x80	; 128
    1628:	31 e5       	ldi	r19, 0x51	; 81
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	af 83       	std	Y+7, r26	; 0x07
    1640:	b8 87       	std	Y+8, r27	; 0x08
	uint8_t secs = since_midnight%60;
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	af 81       	ldd	r26, Y+7	; 0x07
    1648:	b8 85       	ldd	r27, Y+8	; 0x08
    164a:	2c e3       	ldi	r18, 0x3C	; 60
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	89 87       	std	Y+9, r24	; 0x09
	uint8_t minutes = since_midnight/60%60;
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	af 81       	ldd	r26, Y+7	; 0x07
    1666:	b8 85       	ldd	r27, Y+8	; 0x08
    1668:	2c e3       	ldi	r18, 0x3C	; 60
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    1678:	da 01       	movw	r26, r20
    167a:	c9 01       	movw	r24, r18
    167c:	2c e3       	ldi	r18, 0x3C	; 60
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8a 87       	std	Y+10, r24	; 0x0a
	uint8_t hours = since_midnight/60/60;
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	af 81       	ldd	r26, Y+7	; 0x07
    1698:	b8 85       	ldd	r27, Y+8	; 0x08
    169a:	20 e1       	ldi	r18, 0x10	; 16
    169c:	3e e0       	ldi	r19, 0x0E	; 14
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    16aa:	da 01       	movw	r26, r20
    16ac:	c9 01       	movw	r24, r18
    16ae:	8b 87       	std	Y+11, r24	; 0x0b
	text[1] = '0'+(hours/10);
    16b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b2:	8d ec       	ldi	r24, 0xCD	; 205
    16b4:	98 9f       	mul	r25, r24
    16b6:	81 2d       	mov	r24, r1
    16b8:	11 24       	eor	r1, r1
    16ba:	86 95       	lsr	r24
    16bc:	86 95       	lsr	r24
    16be:	86 95       	lsr	r24
    16c0:	80 5d       	subi	r24, 0xD0	; 208
    16c2:	8f 87       	std	Y+15, r24	; 0x0f
	text[2] = '0'+(hours%10);
    16c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c6:	8d ec       	ldi	r24, 0xCD	; 205
    16c8:	98 9f       	mul	r25, r24
    16ca:	81 2d       	mov	r24, r1
    16cc:	11 24       	eor	r1, r1
    16ce:	86 95       	lsr	r24
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	88 0f       	add	r24, r24
    16d6:	28 2f       	mov	r18, r24
    16d8:	22 0f       	add	r18, r18
    16da:	22 0f       	add	r18, r18
    16dc:	82 0f       	add	r24, r18
    16de:	29 2f       	mov	r18, r25
    16e0:	28 1b       	sub	r18, r24
    16e2:	82 2f       	mov	r24, r18
    16e4:	80 5d       	subi	r24, 0xD0	; 208
    16e6:	88 8b       	std	Y+16, r24	; 0x10
	text[4] = '0'+(minutes/10);
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	8d ec       	ldi	r24, 0xCD	; 205
    16ec:	98 9f       	mul	r25, r24
    16ee:	81 2d       	mov	r24, r1
    16f0:	11 24       	eor	r1, r1
    16f2:	86 95       	lsr	r24
    16f4:	86 95       	lsr	r24
    16f6:	86 95       	lsr	r24
    16f8:	80 5d       	subi	r24, 0xD0	; 208
    16fa:	8a 8b       	std	Y+18, r24	; 0x12
	text[5] = '0'+(minutes%10);
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	8d ec       	ldi	r24, 0xCD	; 205
    1700:	98 9f       	mul	r25, r24
    1702:	81 2d       	mov	r24, r1
    1704:	11 24       	eor	r1, r1
    1706:	86 95       	lsr	r24
    1708:	86 95       	lsr	r24
    170a:	86 95       	lsr	r24
    170c:	88 0f       	add	r24, r24
    170e:	28 2f       	mov	r18, r24
    1710:	22 0f       	add	r18, r18
    1712:	22 0f       	add	r18, r18
    1714:	82 0f       	add	r24, r18
    1716:	29 2f       	mov	r18, r25
    1718:	28 1b       	sub	r18, r24
    171a:	82 2f       	mov	r24, r18
    171c:	80 5d       	subi	r24, 0xD0	; 208
    171e:	8b 8b       	std	Y+19, r24	; 0x13
	text[7] = '0'+(secs/10);
    1720:	99 85       	ldd	r25, Y+9	; 0x09
    1722:	8d ec       	ldi	r24, 0xCD	; 205
    1724:	98 9f       	mul	r25, r24
    1726:	81 2d       	mov	r24, r1
    1728:	11 24       	eor	r1, r1
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	86 95       	lsr	r24
    1730:	80 5d       	subi	r24, 0xD0	; 208
    1732:	8d 8b       	std	Y+21, r24	; 0x15
	text[8] = '0'+(secs%10);
    1734:	99 85       	ldd	r25, Y+9	; 0x09
    1736:	8d ec       	ldi	r24, 0xCD	; 205
    1738:	98 9f       	mul	r25, r24
    173a:	81 2d       	mov	r24, r1
    173c:	11 24       	eor	r1, r1
    173e:	86 95       	lsr	r24
    1740:	86 95       	lsr	r24
    1742:	86 95       	lsr	r24
    1744:	88 0f       	add	r24, r24
    1746:	28 2f       	mov	r18, r24
    1748:	22 0f       	add	r18, r18
    174a:	22 0f       	add	r18, r18
    174c:	82 0f       	add	r24, r18
    174e:	29 2f       	mov	r18, r25
    1750:	28 1b       	sub	r18, r24
    1752:	82 2f       	mov	r24, r18
    1754:	80 5d       	subi	r24, 0xD0	; 208
    1756:	8e 8b       	std	Y+22, r24	; 0x16
	clear_buffer();
    1758:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	int16_t pos = ticks >> 3;
    175c:	80 91 3e 07 	lds	r24, 0x073E
    1760:	90 91 3f 07 	lds	r25, 0x073F
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	96 95       	lsr	r25
    176a:	87 95       	ror	r24
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	9d 87       	std	Y+13, r25	; 0x0d
    1772:	8c 87       	std	Y+12, r24	; 0x0c
	scroll_text(text, false, pos, render_xy);
    1774:	4c 85       	ldd	r20, Y+12	; 0x0c
    1776:	5d 85       	ldd	r21, Y+13	; 0x0d
    1778:	ce 01       	movw	r24, r28
    177a:	0e 96       	adiw	r24, 0x0e	; 14
    177c:	2f ea       	ldi	r18, 0xAF	; 175
    177e:	3b e1       	ldi	r19, 0x1B	; 27
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
	scroll_text(text, false, pos-7, render_yz);
    1786:	8c 85       	ldd	r24, Y+12	; 0x0c
    1788:	9d 85       	ldd	r25, Y+13	; 0x0d
    178a:	ac 01       	movw	r20, r24
    178c:	47 50       	subi	r20, 0x07	; 7
    178e:	51 09       	sbc	r21, r1
    1790:	ce 01       	movw	r24, r28
    1792:	0e 96       	adiw	r24, 0x0e	; 14
    1794:	2c e9       	ldi	r18, 0x9C	; 156
    1796:	3b e1       	ldi	r19, 0x1B	; 27
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
}
    179e:	66 96       	adiw	r28, 0x16	; 22
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <effect_tornado.1464>:

void effect_tornado(void) {
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	1f 92       	push	r1
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	int8_t fac = (ticks >> 4) % 2;
    17ca:	80 91 3e 07 	lds	r24, 0x073E
    17ce:	90 91 3f 07 	lds	r25, 0x073F
    17d2:	92 95       	swap	r25
    17d4:	82 95       	swap	r24
    17d6:	8f 70       	andi	r24, 0x0F	; 15
    17d8:	89 27       	eor	r24, r25
    17da:	9f 70       	andi	r25, 0x0F	; 15
    17dc:	89 27       	eor	r24, r25
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
	clear_buffer();
    17e2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	circle_shape(fac, 0, 0, 9, 13, MAX_INTENSITY);
    17e6:	0f 2e       	mov	r0, r31
    17e8:	aa 24       	eor	r10, r10
    17ea:	aa 94       	dec	r10
    17ec:	ff e0       	ldi	r31, 0x0F	; 15
    17ee:	bf 2e       	mov	r11, r31
    17f0:	f0 2d       	mov	r31, r0
    17f2:	0f 2e       	mov	r0, r31
    17f4:	c1 2c       	mov	r12, r1
    17f6:	d1 2c       	mov	r13, r1
    17f8:	f0 e5       	ldi	r31, 0x50	; 80
    17fa:	ef 2e       	mov	r14, r31
    17fc:	f1 e4       	ldi	r31, 0x41	; 65
    17fe:	ff 2e       	mov	r15, r31
    1800:	f0 2d       	mov	r31, r0
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	10 e0       	ldi	r17, 0x00	; 0
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	31 e4       	ldi	r19, 0x41	; 65
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(-fac, 0, 1, 8, 12, MAX_INTENSITY);
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	81 95       	neg	r24
    1818:	0f 2e       	mov	r0, r31
    181a:	aa 24       	eor	r10, r10
    181c:	aa 94       	dec	r10
    181e:	ff e0       	ldi	r31, 0x0F	; 15
    1820:	bf 2e       	mov	r11, r31
    1822:	f0 2d       	mov	r31, r0
    1824:	0f 2e       	mov	r0, r31
    1826:	c1 2c       	mov	r12, r1
    1828:	d1 2c       	mov	r13, r1
    182a:	f0 e4       	ldi	r31, 0x40	; 64
    182c:	ef 2e       	mov	r14, r31
    182e:	f1 e4       	ldi	r31, 0x41	; 65
    1830:	ff 2e       	mov	r15, r31
    1832:	f0 2d       	mov	r31, r0
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	31 e4       	ldi	r19, 0x41	; 65
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(0, fac, 2, 7, 11, MAX_INTENSITY);
    1844:	0f 2e       	mov	r0, r31
    1846:	aa 24       	eor	r10, r10
    1848:	aa 94       	dec	r10
    184a:	ff e0       	ldi	r31, 0x0F	; 15
    184c:	bf 2e       	mov	r11, r31
    184e:	f0 2d       	mov	r31, r0
    1850:	0f 2e       	mov	r0, r31
    1852:	c1 2c       	mov	r12, r1
    1854:	d1 2c       	mov	r13, r1
    1856:	f0 e3       	ldi	r31, 0x30	; 48
    1858:	ef 2e       	mov	r14, r31
    185a:	f1 e4       	ldi	r31, 0x41	; 65
    185c:	ff 2e       	mov	r15, r31
    185e:	f0 2d       	mov	r31, r0
    1860:	00 e0       	ldi	r16, 0x00	; 0
    1862:	10 e0       	ldi	r17, 0x00	; 0
    1864:	20 ee       	ldi	r18, 0xE0	; 224
    1866:	30 e4       	ldi	r19, 0x40	; 64
    1868:	42 e0       	ldi	r20, 0x02	; 2
    186a:	69 81       	ldd	r22, Y+1	; 0x01
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(0, -fac, 3, 7, 10, MAX_INTENSITY);
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	81 95       	neg	r24
    1876:	0f 2e       	mov	r0, r31
    1878:	aa 24       	eor	r10, r10
    187a:	aa 94       	dec	r10
    187c:	ff e0       	ldi	r31, 0x0F	; 15
    187e:	bf 2e       	mov	r11, r31
    1880:	f0 2d       	mov	r31, r0
    1882:	0f 2e       	mov	r0, r31
    1884:	c1 2c       	mov	r12, r1
    1886:	d1 2c       	mov	r13, r1
    1888:	f0 e2       	ldi	r31, 0x20	; 32
    188a:	ef 2e       	mov	r14, r31
    188c:	f1 e4       	ldi	r31, 0x41	; 65
    188e:	ff 2e       	mov	r15, r31
    1890:	f0 2d       	mov	r31, r0
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	10 e0       	ldi	r17, 0x00	; 0
    1896:	20 ee       	ldi	r18, 0xE0	; 224
    1898:	30 e4       	ldi	r19, 0x40	; 64
    189a:	43 e0       	ldi	r20, 0x03	; 3
    189c:	68 2f       	mov	r22, r24
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(fac, 0, 4, 6, 9, MAX_INTENSITY);
    18a4:	0f 2e       	mov	r0, r31
    18a6:	aa 24       	eor	r10, r10
    18a8:	aa 94       	dec	r10
    18aa:	ff e0       	ldi	r31, 0x0F	; 15
    18ac:	bf 2e       	mov	r11, r31
    18ae:	f0 2d       	mov	r31, r0
    18b0:	0f 2e       	mov	r0, r31
    18b2:	c1 2c       	mov	r12, r1
    18b4:	d1 2c       	mov	r13, r1
    18b6:	f0 e1       	ldi	r31, 0x10	; 16
    18b8:	ef 2e       	mov	r14, r31
    18ba:	f1 e4       	ldi	r31, 0x41	; 65
    18bc:	ff 2e       	mov	r15, r31
    18be:	f0 2d       	mov	r31, r0
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	20 ec       	ldi	r18, 0xC0	; 192
    18c6:	30 e4       	ldi	r19, 0x40	; 64
    18c8:	44 e0       	ldi	r20, 0x04	; 4
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(-fac, 0, 5, 3, 5, MAX_INTENSITY);
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	81 95       	neg	r24
    18d6:	0f 2e       	mov	r0, r31
    18d8:	aa 24       	eor	r10, r10
    18da:	aa 94       	dec	r10
    18dc:	ff e0       	ldi	r31, 0x0F	; 15
    18de:	bf 2e       	mov	r11, r31
    18e0:	f0 2d       	mov	r31, r0
    18e2:	0f 2e       	mov	r0, r31
    18e4:	c1 2c       	mov	r12, r1
    18e6:	d1 2c       	mov	r13, r1
    18e8:	f0 ea       	ldi	r31, 0xA0	; 160
    18ea:	ef 2e       	mov	r14, r31
    18ec:	f0 e4       	ldi	r31, 0x40	; 64
    18ee:	ff 2e       	mov	r15, r31
    18f0:	f0 2d       	mov	r31, r0
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	20 e4       	ldi	r18, 0x40	; 64
    18f8:	30 e4       	ldi	r19, 0x40	; 64
    18fa:	45 e0       	ldi	r20, 0x05	; 5
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	circle_shape(0, fac, 6, 1, 3, MAX_INTENSITY);
    1902:	0f 2e       	mov	r0, r31
    1904:	aa 24       	eor	r10, r10
    1906:	aa 94       	dec	r10
    1908:	ff e0       	ldi	r31, 0x0F	; 15
    190a:	bf 2e       	mov	r11, r31
    190c:	f0 2d       	mov	r31, r0
    190e:	c1 2c       	mov	r12, r1
    1910:	d1 2c       	mov	r13, r1
    1912:	68 94       	set
    1914:	ee 24       	eor	r14, r14
    1916:	e6 f8       	bld	r14, 6
    1918:	fe 2c       	mov	r15, r14
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	20 e8       	ldi	r18, 0x80	; 128
    1920:	3f e3       	ldi	r19, 0x3F	; 63
    1922:	46 e0       	ldi	r20, 0x06	; 6
    1924:	69 81       	ldd	r22, Y+1	; 0x01
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
	set_led(fac, 4, 7, MAX_INTENSITY);
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	2f ef       	ldi	r18, 0xFF	; 255
    1930:	3f e0       	ldi	r19, 0x0F	; 15
    1932:	47 e0       	ldi	r20, 0x07	; 7
    1934:	64 e0       	ldi	r22, 0x04	; 4
    1936:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    193a:	0f 90       	pop	r0
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	08 95       	ret

00001952 <effect_lines.1420>:

void effect_lines(void) {
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	if(!(ticks % 10))
    1968:	40 91 3e 07 	lds	r20, 0x073E
    196c:	50 91 3f 07 	lds	r21, 0x073F
    1970:	9a 01       	movw	r18, r20
    1972:	ad ec       	ldi	r26, 0xCD	; 205
    1974:	bc ec       	ldi	r27, 0xCC	; 204
    1976:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    197a:	96 95       	lsr	r25
    197c:	87 95       	ror	r24
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	96 95       	lsr	r25
    1984:	87 95       	ror	r24
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	9c 01       	movw	r18, r24
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	82 0f       	add	r24, r18
    1996:	93 1f       	adc	r25, r19
    1998:	9a 01       	movw	r18, r20
    199a:	28 1b       	sub	r18, r24
    199c:	39 0b       	sbc	r19, r25
    199e:	c9 01       	movw	r24, r18
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	41 f5       	brne	.+80     	; 0x19f4 <effect_lines.1420+0xa2>
		line(randint(0, 7), randint(0, 7), randint(0, 7),
    19a4:	67 e0       	ldi	r22, 0x07	; 7
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19ac:	e8 2e       	mov	r14, r24
    19ae:	67 e0       	ldi	r22, 0x07	; 7
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19b6:	08 2f       	mov	r16, r24
    19b8:	67 e0       	ldi	r22, 0x07	; 7
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19c0:	b8 2e       	mov	r11, r24
    19c2:	67 e0       	ldi	r22, 0x07	; 7
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19ca:	f8 2e       	mov	r15, r24
    19cc:	67 e0       	ldi	r22, 0x07	; 7
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19d4:	18 2f       	mov	r17, r24
    19d6:	67 e0       	ldi	r22, 0x07	; 7
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    19de:	0f 2e       	mov	r0, r31
    19e0:	cc 24       	eor	r12, r12
    19e2:	ca 94       	dec	r12
    19e4:	ff e0       	ldi	r31, 0x0F	; 15
    19e6:	df 2e       	mov	r13, r31
    19e8:	f0 2d       	mov	r31, r0
    19ea:	2b 2d       	mov	r18, r11
    19ec:	4f 2d       	mov	r20, r15
    19ee:	61 2f       	mov	r22, r17
    19f0:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
			randint(0, 7), randint(0, 7), randint(0, 7),
			MAX_INTENSITY);
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	08 95       	ret

00001a08 <effect_tube.1462>:

void effect_tube(void) {
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    1a20:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	circle_shape(0, 0, (ticks >> 2) % LEDS_Z, 6, 10, MAX_INTENSITY);
    1a24:	80 91 3e 07 	lds	r24, 0x073E
    1a28:	90 91 3f 07 	lds	r25, 0x073F
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	96 95       	lsr	r25
    1a32:	87 95       	ror	r24
    1a34:	87 70       	andi	r24, 0x07	; 7
    1a36:	0f 2e       	mov	r0, r31
    1a38:	aa 24       	eor	r10, r10
    1a3a:	aa 94       	dec	r10
    1a3c:	ff e0       	ldi	r31, 0x0F	; 15
    1a3e:	bf 2e       	mov	r11, r31
    1a40:	f0 2d       	mov	r31, r0
    1a42:	0f 2e       	mov	r0, r31
    1a44:	c1 2c       	mov	r12, r1
    1a46:	d1 2c       	mov	r13, r1
    1a48:	f0 e2       	ldi	r31, 0x20	; 32
    1a4a:	ef 2e       	mov	r14, r31
    1a4c:	f1 e4       	ldi	r31, 0x41	; 65
    1a4e:	ff 2e       	mov	r15, r31
    1a50:	f0 2d       	mov	r31, r0
    1a52:	00 e0       	ldi	r16, 0x00	; 0
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	20 ec       	ldi	r18, 0xC0	; 192
    1a58:	30 e4       	ldi	r19, 0x40	; 64
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	08 95       	ret

00001a7a <init_rain.1472>:

static void init_rain(void){
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	vars.rain.seed = rand();
    1a82:	0e 94 f7 30 	call	0x61ee	; 0x61ee <rand>
    1a86:	90 93 17 07 	sts	0x0717, r25
    1a8a:	80 93 16 07 	sts	0x0716, r24
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <effect_rain.1474>:
void effect_rain(void){
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	29 97       	sbiw	r28, 0x09	; 9
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
	
	
	clear_buffer();
    1aaa:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for (uint8_t x=0; x<8; x++) {
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	37 c0       	rjmp	.+110    	; 0x1b20 <effect_rain.1474+0x8c>
		for (uint8_t y=0; y<8; y++) {
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	2f c0       	rjmp	.+94     	; 0x1b14 <effect_rain.1474+0x80>
			srand(3*(x*LEDS_Y+y));
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	22 0f       	add	r18, r18
    1ac4:	33 1f       	adc	r19, r19
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	28 0f       	add	r18, r24
    1ad2:	39 1f       	adc	r19, r25
    1ad4:	c9 01       	movw	r24, r18
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <srand>
			set_led(x,y,((ticks >> 3)+rand()) & 7, MAX_INTENSITY >> 3);
    1ae2:	80 91 3e 07 	lds	r24, 0x073E
    1ae6:	90 91 3f 07 	lds	r25, 0x073F
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	96 95       	lsr	r25
    1af0:	87 95       	ror	r24
    1af2:	96 95       	lsr	r25
    1af4:	87 95       	ror	r24
    1af6:	18 2f       	mov	r17, r24
    1af8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <rand>
    1afc:	81 0f       	add	r24, r17
    1afe:	87 70       	andi	r24, 0x07	; 7
    1b00:	2f ef       	ldi	r18, 0xFF	; 255
    1b02:	31 e0       	ldi	r19, 0x01	; 1
    1b04:	48 2f       	mov	r20, r24
    1b06:	6a 81       	ldd	r22, Y+2	; 0x02
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
void effect_rain(void){
	
	
	clear_buffer();
	for (uint8_t x=0; x<8; x++) {
		for (uint8_t y=0; y<8; y++) {
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	8a 83       	std	Y+2, r24	; 0x02
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	88 30       	cpi	r24, 0x08	; 8
    1b18:	70 f2       	brcs	.-100    	; 0x1ab6 <effect_rain.1474+0x22>
}
void effect_rain(void){
	
	
	clear_buffer();
	for (uint8_t x=0; x<8; x++) {
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	88 30       	cpi	r24, 0x08	; 8
    1b24:	30 f2       	brcs	.-116    	; 0x1ab2 <effect_rain.1474+0x1e>
		for (uint8_t y=0; y<8; y++) {
			srand(3*(x*LEDS_Y+y));
			set_led(x,y,((ticks >> 3)+rand()) & 7, MAX_INTENSITY >> 3);
		}
	}
	const uint8_t water = ((ticks >> 7) % 7) + 1;
    1b26:	80 91 3e 07 	lds	r24, 0x073E
    1b2a:	90 91 3f 07 	lds	r25, 0x073F
    1b2e:	ac 01       	movw	r20, r24
    1b30:	44 0f       	add	r20, r20
    1b32:	45 2f       	mov	r20, r21
    1b34:	44 1f       	adc	r20, r20
    1b36:	55 0b       	sbc	r21, r21
    1b38:	51 95       	neg	r21
    1b3a:	9a 01       	movw	r18, r20
    1b3c:	a3 e9       	ldi	r26, 0x93	; 147
    1b3e:	b4 e2       	ldi	r27, 0x24	; 36
    1b40:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    1b44:	9a 01       	movw	r18, r20
    1b46:	28 1b       	sub	r18, r24
    1b48:	39 0b       	sbc	r19, r25
    1b4a:	36 95       	lsr	r19
    1b4c:	27 95       	ror	r18
    1b4e:	82 0f       	add	r24, r18
    1b50:	93 1f       	adc	r25, r19
    1b52:	9c 01       	movw	r18, r24
    1b54:	36 95       	lsr	r19
    1b56:	27 95       	ror	r18
    1b58:	36 95       	lsr	r19
    1b5a:	27 95       	ror	r18
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	9a 01       	movw	r18, r20
    1b70:	28 1b       	sub	r18, r24
    1b72:	39 0b       	sbc	r19, r25
    1b74:	82 2f       	mov	r24, r18
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	88 87       	std	Y+8, r24	; 0x08
	const uint8_t surface = ticks & 127;
    1b7a:	80 91 3e 07 	lds	r24, 0x073E
    1b7e:	90 91 3f 07 	lds	r25, 0x073F
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	89 87       	std	Y+9, r24	; 0x09
	for (uint8_t z=0; z<water; z++) {
    1b86:	1b 82       	std	Y+3, r1	; 0x03
    1b88:	1f c0       	rjmp	.+62     	; 0x1bc8 <effect_rain.1474+0x134>
		for (uint8_t x=0; x<8; x++) {
    1b8a:	1c 82       	std	Y+4, r1	; 0x04
    1b8c:	17 c0       	rjmp	.+46     	; 0x1bbc <effect_rain.1474+0x128>
			for (uint8_t y=0; y<8; y++) {
    1b8e:	1d 82       	std	Y+5, r1	; 0x05
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <effect_rain.1474+0x11c>
				set_led(x,y,7-z, MAX_INTENSITY);
    1b92:	97 e0       	ldi	r25, 0x07	; 7
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	29 2f       	mov	r18, r25
    1b98:	28 1b       	sub	r18, r24
    1b9a:	82 2f       	mov	r24, r18
    1b9c:	2f ef       	ldi	r18, 0xFF	; 255
    1b9e:	3f e0       	ldi	r19, 0x0F	; 15
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	}
	const uint8_t water = ((ticks >> 7) % 7) + 1;
	const uint8_t surface = ticks & 127;
	for (uint8_t z=0; z<water; z++) {
		for (uint8_t x=0; x<8; x++) {
			for (uint8_t y=0; y<8; y++) {
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	70 f3       	brcs	.-36     	; 0x1b92 <effect_rain.1474+0xfe>
		}
	}
	const uint8_t water = ((ticks >> 7) % 7) + 1;
	const uint8_t surface = ticks & 127;
	for (uint8_t z=0; z<water; z++) {
		for (uint8_t x=0; x<8; x++) {
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	8c 83       	std	Y+4, r24	; 0x04
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	30 f3       	brcs	.-52     	; 0x1b8e <effect_rain.1474+0xfa>
			set_led(x,y,((ticks >> 3)+rand()) & 7, MAX_INTENSITY >> 3);
		}
	}
	const uint8_t water = ((ticks >> 7) % 7) + 1;
	const uint8_t surface = ticks & 127;
	for (uint8_t z=0; z<water; z++) {
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	88 85       	ldd	r24, Y+8	; 0x08
    1bcc:	98 17       	cp	r25, r24
    1bce:	e8 f2       	brcs	.-70     	; 0x1b8a <effect_rain.1474+0xf6>
			for (uint8_t y=0; y<8; y++) {
				set_led(x,y,7-z, MAX_INTENSITY);
			}
		}
	}
	for (uint8_t x=0; x<8; x++) {
    1bd0:	1e 82       	std	Y+6, r1	; 0x06
    1bd2:	18 c0       	rjmp	.+48     	; 0x1c04 <effect_rain.1474+0x170>
		for (uint8_t y=0; y<8; y++) {
    1bd4:	1f 82       	std	Y+7, r1	; 0x07
    1bd6:	10 c0       	rjmp	.+32     	; 0x1bf8 <effect_rain.1474+0x164>
			set_led(x,y,8-water, weber_fechner(surface << 1));
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	88 0f       	add	r24, r24
    1bdc:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <weber_fechner>
    1be0:	38 e0       	ldi	r19, 0x08	; 8
    1be2:	28 85       	ldd	r18, Y+8	; 0x08
    1be4:	43 2f       	mov	r20, r19
    1be6:	42 1b       	sub	r20, r18
    1be8:	9c 01       	movw	r18, r24
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	8e 81       	ldd	r24, Y+6	; 0x06
    1bee:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
				set_led(x,y,7-z, MAX_INTENSITY);
			}
		}
	}
	for (uint8_t x=0; x<8; x++) {
		for (uint8_t y=0; y<8; y++) {
    1bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
    1bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfa:	88 30       	cpi	r24, 0x08	; 8
    1bfc:	68 f3       	brcs	.-38     	; 0x1bd8 <effect_rain.1474+0x144>
			for (uint8_t y=0; y<8; y++) {
				set_led(x,y,7-z, MAX_INTENSITY);
			}
		}
	}
	for (uint8_t x=0; x<8; x++) {
    1bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	8e 83       	std	Y+6, r24	; 0x06
    1c04:	8e 81       	ldd	r24, Y+6	; 0x06
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	28 f3       	brcs	.-54     	; 0x1bd4 <effect_rain.1474+0x140>
		for (uint8_t y=0; y<8; y++) {
			set_led(x,y,8-water, weber_fechner(surface << 1));
		}
	}
}
    1c0a:	29 96       	adiw	r28, 0x09	; 9
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	08 95       	ret

00001c1e <init_stairs_x.1468>:

static void init_stairs_x(void){
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	1f 92       	push	r1
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    1c2c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(uint8_t i = 0; i < 8; i++) {
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <init_stairs_x.1468+0x2c>
		set_row(i, i, 0, 7, MAX_INTENSITY);
    1c34:	0f ef       	ldi	r16, 0xFF	; 255
    1c36:	1f e0       	ldi	r17, 0x0F	; 15
    1c38:	27 e0       	ldi	r18, 0x07	; 7
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	69 81       	ldd	r22, Y+1	; 0x01
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	}
}

static void init_stairs_x(void){
	clear_buffer();
	for(uint8_t i = 0; i < 8; i++) {
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	88 30       	cpi	r24, 0x08	; 8
    1c4e:	90 f3       	brcs	.-28     	; 0x1c34 <init_stairs_x.1468+0x16>
		set_row(i, i, 0, 7, MAX_INTENSITY);
	}
}
    1c50:	0f 90       	pop	r0
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <effect_character.1466>:

void effect_character(void){
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	render_character('c', 0, render_yz);
    1c64:	4c e9       	ldi	r20, 0x9C	; 156
    1c66:	5b e1       	ldi	r21, 0x1B	; 27
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	83 e6       	ldi	r24, 0x63	; 99
    1c6e:	0e 94 17 1b 	call	0x362e	; 0x362e <render_character>
}
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <effect_wave.1448>:

XY(effect_wave) {
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
    1c84:	89 e4       	ldi	r24, 0x49	; 73
    1c86:	9e e0       	ldi	r25, 0x0E	; 14
    1c88:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <iterate_xy>
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <effect_wave_kernel.1450>:
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	28 97       	sbiw	r28, 0x08	; 8
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	8f 83       	std	Y+7, r24	; 0x07
    1cb0:	68 87       	std	Y+8, r22	; 0x08
	vars.wave.avg = (0.9*vars.wave.avg)+(0.1*(float)sensors.distance1);
    1cb2:	80 91 16 07 	lds	r24, 0x0716
    1cb6:	90 91 17 07 	lds	r25, 0x0717
    1cba:	a0 91 18 07 	lds	r26, 0x0718
    1cbe:	b0 91 19 07 	lds	r27, 0x0719
    1cc2:	26 e6       	ldi	r18, 0x66	; 102
    1cc4:	36 e6       	ldi	r19, 0x66	; 102
    1cc6:	46 e6       	ldi	r20, 0x66	; 102
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	7c 01       	movw	r14, r24
    1cd8:	8d 01       	movw	r16, r26
    1cda:	80 91 06 01 	lds	r24, 0x0106
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	2d ec       	ldi	r18, 0xCD	; 205
    1cf4:	3c ec       	ldi	r19, 0xCC	; 204
    1cf6:	4c ec       	ldi	r20, 0xCC	; 204
    1cf8:	5d e3       	ldi	r21, 0x3D	; 61
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 01       	movw	r18, r24
    1d08:	ad 01       	movw	r20, r26
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	80 93 16 07 	sts	0x0716, r24
    1d1a:	90 93 17 07 	sts	0x0717, r25
    1d1e:	a0 93 18 07 	sts	0x0718, r26
    1d22:	b0 93 19 07 	sts	0x0719, r27
	float scaler = (float)MAX_2D_PLOT_INTENSITY / 4;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	9e ef       	ldi	r25, 0xFE	; 254
    1d2a:	af ed       	ldi	r26, 0xDF	; 223
    1d2c:	b5 e4       	ldi	r27, 0x45	; 69
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	ab 83       	std	Y+3, r26	; 0x03
    1d34:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t i = scaler * (2 + sin((float)x * 50 + (float)ticks / 15 + vars.wave.avg/10));
    1d36:	8f 81       	ldd	r24, Y+7	; 0x07
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	48 e4       	ldi	r20, 0x48	; 72
    1d52:	52 e4       	ldi	r21, 0x42	; 66
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	7c 01       	movw	r14, r24
    1d62:	8d 01       	movw	r16, r26
    1d64:	80 91 3e 07 	lds	r24, 0x073E
    1d68:	90 91 3f 07 	lds	r25, 0x073F
    1d6c:	cc 01       	movw	r24, r24
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e7       	ldi	r20, 0x70	; 112
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9c 01       	movw	r18, r24
    1d94:	ad 01       	movw	r20, r26
    1d96:	c8 01       	movw	r24, r16
    1d98:	b7 01       	movw	r22, r14
    1d9a:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	7c 01       	movw	r14, r24
    1da4:	8d 01       	movw	r16, r26
    1da6:	80 91 16 07 	lds	r24, 0x0716
    1daa:	90 91 17 07 	lds	r25, 0x0717
    1dae:	a0 91 18 07 	lds	r26, 0x0718
    1db2:	b0 91 19 07 	lds	r27, 0x0719
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9c 01       	movw	r18, r24
    1dcc:	ad 01       	movw	r20, r26
    1dce:	c8 01       	movw	r24, r16
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <sin>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e4       	ldi	r21, 0x40	; 64
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	29 81       	ldd	r18, Y+1	; 0x01
    1dfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfe:	4b 81       	ldd	r20, Y+3	; 0x03
    1e00:	5c 81       	ldd	r21, Y+4	; 0x04
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
	set_z(x, y, i);
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	ac 01       	movw	r20, r24
    1e24:	68 85       	ldd	r22, Y+8	; 0x08
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <set_z>
}
    1e2c:	28 96       	adiw	r28, 0x08	; 8
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	08 95       	ret

00001e46 <effect_circle.1460>:

void effect_circle(void) {
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	circle_shape(0, 0, 0, 6, 10, MAX_INTENSITY);
    1e5e:	0f 2e       	mov	r0, r31
    1e60:	aa 24       	eor	r10, r10
    1e62:	aa 94       	dec	r10
    1e64:	ff e0       	ldi	r31, 0x0F	; 15
    1e66:	bf 2e       	mov	r11, r31
    1e68:	f0 2d       	mov	r31, r0
    1e6a:	0f 2e       	mov	r0, r31
    1e6c:	c1 2c       	mov	r12, r1
    1e6e:	d1 2c       	mov	r13, r1
    1e70:	f0 e2       	ldi	r31, 0x20	; 32
    1e72:	ef 2e       	mov	r14, r31
    1e74:	f1 e4       	ldi	r31, 0x41	; 65
    1e76:	ff 2e       	mov	r15, r31
    1e78:	f0 2d       	mov	r31, r0
    1e7a:	00 e0       	ldi	r16, 0x00	; 0
    1e7c:	10 e0       	ldi	r17, 0x00	; 0
    1e7e:	20 ec       	ldi	r18, 0xC0	; 192
    1e80:	30 e4       	ldi	r19, 0x40	; 64
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	0e 94 02 15 	call	0x2a04	; 0x2a04 <circle_shape>
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	08 95       	ret

00001ea2 <init_template.1366>:

static void init_template(void){
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
}
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <effect_template.1368>:
void effect_template(void){
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	08 95       	ret

00001ebe <effect_layers.1391>:

void effect_layers(void){
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <effect_layers.1391+0x6>
    1ec4:	1f 92       	push	r1
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    1eca:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	uint8_t z = ((ticks >> 7) % LEDS_Z);
    1ece:	80 91 3e 07 	lds	r24, 0x073E
    1ed2:	90 91 3f 07 	lds	r25, 0x073F
    1ed6:	88 0f       	add	r24, r24
    1ed8:	89 2f       	mov	r24, r25
    1eda:	88 1f       	adc	r24, r24
    1edc:	99 0b       	sbc	r25, r25
    1ede:	91 95       	neg	r25
    1ee0:	87 70       	andi	r24, 0x07	; 7
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8_t x=0; x<LEDS_X; x++) {
    1ee4:	19 82       	std	Y+1, r1	; 0x01
    1ee6:	12 c0       	rjmp	.+36     	; 0x1f0c <effect_layers.1391+0x4e>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    1ee8:	1a 82       	std	Y+2, r1	; 0x02
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <effect_layers.1391+0x42>
			set_led(x, y, z, MAX_INTENSITY);
    1eec:	2f ef       	ldi	r18, 0xFF	; 255
    1eee:	3f e0       	ldi	r19, 0x0F	; 15
    1ef0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

void effect_layers(void){
	clear_buffer();
	uint8_t z = ((ticks >> 7) % LEDS_Z);
	for(uint8_t x=0; x<LEDS_X; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	8f 5f       	subi	r24, 0xFF	; 255
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	88 30       	cpi	r24, 0x08	; 8
    1f04:	98 f3       	brcs	.-26     	; 0x1eec <effect_layers.1391+0x2e>
}

void effect_layers(void){
	clear_buffer();
	uint8_t z = ((ticks >> 7) % LEDS_Z);
	for(uint8_t x=0; x<LEDS_X; x++) {
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 30       	cpi	r24, 0x08	; 8
    1f10:	58 f3       	brcs	.-42     	; 0x1ee8 <effect_layers.1391+0x2a>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	08 95       	ret

00001f1e <effect_constant.1446>:

XY(effect_constant) {
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
    1f2a:	8c e9       	ldi	r24, 0x9C	; 156
    1f2c:	9f e0       	ldi	r25, 0x0F	; 15
    1f2e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <iterate_xy>
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <effect_constant_kernel.1387>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <effect_constant_kernel.1387+0x6>
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	6a 83       	std	Y+2, r22	; 0x02
	set_led(x, y, 3, MAX_INTENSITY);
    1f46:	2f ef       	ldi	r18, 0xFF	; 255
    1f48:	3f e0       	ldi	r19, 0x0F	; 15
    1f4a:	43 e0       	ldi	r20, 0x03	; 3
    1f4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret

00001f5e <effect_sphere.1444>:

void effect_sphere(void){
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <effect_sphere.1444+0x16>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <effect_sphere.1444+0x18>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
	float fac = (float)((ticks >> 3) % 10) / 10;
    1f7a:	80 91 3e 07 	lds	r24, 0x073E
    1f7e:	90 91 3f 07 	lds	r25, 0x073F
    1f82:	ac 01       	movw	r20, r24
    1f84:	56 95       	lsr	r21
    1f86:	47 95       	ror	r20
    1f88:	56 95       	lsr	r21
    1f8a:	47 95       	ror	r20
    1f8c:	56 95       	lsr	r21
    1f8e:	47 95       	ror	r20
    1f90:	9a 01       	movw	r18, r20
    1f92:	ad ec       	ldi	r26, 0xCD	; 205
    1f94:	bc ec       	ldi	r27, 0xCC	; 204
    1f96:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    1f9a:	96 95       	lsr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	96 95       	lsr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	96 95       	lsr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	9c 01       	movw	r18, r24
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	82 0f       	add	r24, r18
    1fb6:	93 1f       	adc	r25, r19
    1fb8:	9a 01       	movw	r18, r20
    1fba:	28 1b       	sub	r18, r24
    1fbc:	39 0b       	sbc	r19, r25
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	cc 01       	movw	r24, r24
    1fc2:	a0 e0       	ldi	r26, 0x00	; 0
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__floatunsisf>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__divsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	ab 83       	std	Y+3, r26	; 0x03
    1fec:	bc 83       	std	Y+4, r27	; 0x04
	clear_buffer();
    1fee:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	sphere_shape(-3, -3, -3, 10, 14, fac);
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	8f 93       	push	r24
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	8f 93       	push	r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	8f 93       	push	r24
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8f 93       	push	r24
    2002:	81 e4       	ldi	r24, 0x41	; 65
    2004:	8f 93       	push	r24
    2006:	80 e6       	ldi	r24, 0x60	; 96
    2008:	8f 93       	push	r24
    200a:	1f 92       	push	r1
    200c:	1f 92       	push	r1
    200e:	0f 2e       	mov	r0, r31
    2010:	a1 2c       	mov	r10, r1
    2012:	b1 2c       	mov	r11, r1
    2014:	f0 e2       	ldi	r31, 0x20	; 32
    2016:	cf 2e       	mov	r12, r31
    2018:	f1 e4       	ldi	r31, 0x41	; 65
    201a:	df 2e       	mov	r13, r31
    201c:	f0 2d       	mov	r31, r0
    201e:	e1 2c       	mov	r14, r1
    2020:	f1 2c       	mov	r15, r1
    2022:	00 e4       	ldi	r16, 0x40	; 64
    2024:	10 ec       	ldi	r17, 0xC0	; 192
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e4       	ldi	r20, 0x40	; 64
    202c:	50 ec       	ldi	r21, 0xC0	; 192
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	80 e4       	ldi	r24, 0x40	; 64
    2034:	90 ec       	ldi	r25, 0xC0	; 192
    2036:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sphere_shape>
    203a:	8d b7       	in	r24, 0x3d	; 61
    203c:	9e b7       	in	r25, 0x3e	; 62
    203e:	08 96       	adiw	r24, 0x08	; 8
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	08 95       	ret

00002068 <set_leds.1430>:

void set_leds(uint8_t x, uint8_t y, uint8_t z)
{
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	00 d0       	rcall	.+0      	; 0x206e <set_leds.1430+0x6>
    206e:	00 d0       	rcall	.+0      	; 0x2070 <set_leds.1430+0x8>
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	6b 83       	std	Y+3, r22	; 0x03
    2078:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t neighbours = get_amount_of_neighbours((int8_t)x, (int8_t)y, (int8_t)z);
    207a:	4c 81       	ldd	r20, Y+4	; 0x04
    207c:	6b 81       	ldd	r22, Y+3	; 0x03
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	0e 94 68 10 	call	0x20d0	; 0x20d0 <get_amount_of_neighbours.1439>
    2084:	89 83       	std	Y+1, r24	; 0x01
	if((neighbours >= 6 && neighbours <= 15) || randint(0, 10) > 8) {
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	86 30       	cpi	r24, 0x06	; 6
    208a:	18 f0       	brcs	.+6      	; 0x2092 <set_leds.1430+0x2a>
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	80 31       	cpi	r24, 0x10	; 16
    2090:	30 f0       	brcs	.+12     	; 0x209e <set_leds.1430+0x36>
    2092:	6a e0       	ldi	r22, 0x0A	; 10
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    209a:	89 30       	cpi	r24, 0x09	; 9
    209c:	58 f0       	brcs	.+22     	; 0x20b4 <set_leds.1430+0x4c>
		set_led(x, y, z, MAX_INTENSITY);
    209e:	2f ef       	ldi	r18, 0xFF	; 255
    20a0:	3f e0       	ldi	r19, 0x0F	; 15
    20a2:	4c 81       	ldd	r20, Y+4	; 0x04
    20a4:	6b 81       	ldd	r22, Y+3	; 0x03
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
		vars.game_of_life.is_alive = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	80 93 16 07 	sts	0x0716, r24
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <set_leds.1430+0x5a>
	}
	else set_led(x, y, z, 0);
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4c 81       	ldd	r20, Y+4	; 0x04
    20ba:	6b 81       	ldd	r22, Y+3	; 0x03
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	08 95       	ret

000020d0 <get_amount_of_neighbours.1439>:
static uint8_t get_amount_of_neighbours(uint8_t x, uint8_t y, uint8_t z) {
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	27 97       	sbiw	r28, 0x07	; 7
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	6e 83       	std	Y+6, r22	; 0x06
    20e8:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t ret = 0;
    20ea:	19 82       	std	Y+1, r1	; 0x01
	for(int8_t cx = -1; cx <= 1; cx++)
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	2c c0       	rjmp	.+88     	; 0x214a <get_amount_of_neighbours.1439+0x7a>
		for(int8_t cy = -1; cy <= 1; cy++)
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	8b 83       	std	Y+3, r24	; 0x03
    20f6:	23 c0       	rjmp	.+70     	; 0x213e <get_amount_of_neighbours.1439+0x6e>
			for(int8_t cz = -1; cz <= 1; cz++)
    20f8:	8f ef       	ldi	r24, 0xFF	; 255
    20fa:	8c 83       	std	Y+4, r24	; 0x04
    20fc:	1a c0       	rjmp	.+52     	; 0x2132 <get_amount_of_neighbours.1439+0x62>
				ret += get_led_wrap(x + cx, y + cy, z + cz) > 0;
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	8f 81       	ldd	r24, Y+7	; 0x07
    2102:	89 0f       	add	r24, r25
    2104:	28 2f       	mov	r18, r24
    2106:	9b 81       	ldd	r25, Y+3	; 0x03
    2108:	8e 81       	ldd	r24, Y+6	; 0x06
    210a:	89 0f       	add	r24, r25
    210c:	98 2f       	mov	r25, r24
    210e:	3a 81       	ldd	r19, Y+2	; 0x02
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	83 0f       	add	r24, r19
    2114:	42 2f       	mov	r20, r18
    2116:	69 2f       	mov	r22, r25
    2118:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <get_led_wrap>
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	09 f4       	brne	.+2      	; 0x2124 <get_amount_of_neighbours.1439+0x54>
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	82 2f       	mov	r24, r18
    2126:	99 81       	ldd	r25, Y+1	; 0x01
    2128:	89 0f       	add	r24, r25
    212a:	89 83       	std	Y+1, r24	; 0x01
}
static uint8_t get_amount_of_neighbours(uint8_t x, uint8_t y, uint8_t z) {
	uint8_t ret = 0;
	for(int8_t cx = -1; cx <= 1; cx++)
		for(int8_t cy = -1; cy <= 1; cy++)
			for(int8_t cz = -1; cz <= 1; cz++)
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	8c 83       	std	Y+4, r24	; 0x04
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	1c f3       	brlt	.-58     	; 0x20fe <get_amount_of_neighbours.1439+0x2e>
	else set_led(x, y, z, 0);
}
static uint8_t get_amount_of_neighbours(uint8_t x, uint8_t y, uint8_t z) {
	uint8_t ret = 0;
	for(int8_t cx = -1; cx <= 1; cx++)
		for(int8_t cy = -1; cy <= 1; cy++)
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	8b 83       	std	Y+3, r24	; 0x03
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	82 30       	cpi	r24, 0x02	; 2
    2142:	d4 f2       	brlt	.-76     	; 0x20f8 <get_amount_of_neighbours.1439+0x28>
	}
	else set_led(x, y, z, 0);
}
static uint8_t get_amount_of_neighbours(uint8_t x, uint8_t y, uint8_t z) {
	uint8_t ret = 0;
	for(int8_t cx = -1; cx <= 1; cx++)
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	8a 83       	std	Y+2, r24	; 0x02
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	82 30       	cpi	r24, 0x02	; 2
    214e:	8c f2       	brlt	.-94     	; 0x20f2 <get_amount_of_neighbours.1439+0x22>
		for(int8_t cy = -1; cy <= 1; cy++)
			for(int8_t cz = -1; cz <= 1; cz++)
				ret += get_led_wrap(x + cx, y + cy, z + cz) > 0;
	return ret;
    2150:	89 81       	ldd	r24, Y+1	; 0x01
}
    2152:	27 96       	adiw	r28, 0x07	; 7
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <init_game_of_life.1435>:
static void init_game_of_life(void){
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	
	heart_shape(WEBER_FECHNER_MAX);
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <heart_shape>
}
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <effect_game_of_life.1428>:
void effect_game_of_life(void) {
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	vars.game_of_life.is_alive = 0;
    2180:	10 92 16 07 	sts	0x0716, r1
	iterate_xyz(set_leds);
    2184:	84 e3       	ldi	r24, 0x34	; 52
    2186:	90 e1       	ldi	r25, 0x10	; 16
    2188:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <iterate_xyz>
	if(!vars.game_of_life.is_alive) {
    218c:	80 91 16 07 	lds	r24, 0x0716
    2190:	88 23       	and	r24, r24
    2192:	19 f4       	brne	.+6      	; 0x219a <effect_game_of_life.1428+0x22>
		heart_shape(WEBER_FECHNER_MAX);
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	0e 94 39 16 	call	0x2c72	; 0x2c72 <heart_shape>
	}
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <init_worm.1374>:

static void init_worm(void){
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
	vars.worm.pos[0] = 4;
    21a8:	84 e0       	ldi	r24, 0x04	; 4
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	90 93 17 07 	sts	0x0717, r25
    21b0:	80 93 16 07 	sts	0x0716, r24
	vars.worm.pos[1] = 4;
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	90 93 19 07 	sts	0x0719, r25
    21bc:	80 93 18 07 	sts	0x0718, r24
	vars.worm.pos[2] = 4;
    21c0:	84 e0       	ldi	r24, 0x04	; 4
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	90 93 1b 07 	sts	0x071B, r25
    21c8:	80 93 1a 07 	sts	0x071A, r24
	vars.worm.dir = 0;
    21cc:	10 92 1d 07 	sts	0x071D, r1
    21d0:	10 92 1c 07 	sts	0x071C, r1
	vars.worm.speed = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	90 93 1f 07 	sts	0x071F, r25
    21dc:	80 93 1e 07 	sts	0x071E, r24
	clear_buffer();
    21e0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <effect_worm.1406>:
void effect_worm(void){
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <effect_worm.1406+0x6>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	set_led(vars.worm.pos[0], vars.worm.pos[1], vars.worm.pos[2], MAX_INTENSITY);
    21f4:	80 91 1a 07 	lds	r24, 0x071A
    21f8:	90 91 1b 07 	lds	r25, 0x071B
    21fc:	48 2f       	mov	r20, r24
    21fe:	80 91 18 07 	lds	r24, 0x0718
    2202:	90 91 19 07 	lds	r25, 0x0719
    2206:	58 2f       	mov	r21, r24
    2208:	80 91 16 07 	lds	r24, 0x0716
    220c:	90 91 17 07 	lds	r25, 0x0717
    2210:	2f ef       	ldi	r18, 0xFF	; 255
    2212:	3f e0       	ldi	r19, 0x0F	; 15
    2214:	65 2f       	mov	r22, r21
    2216:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	
	
	int new_pos = vars.worm.pos[vars.worm.dir] + vars.worm.speed;
    221a:	80 91 1c 07 	lds	r24, 0x071C
    221e:	90 91 1d 07 	lds	r25, 0x071D
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	8a 5e       	subi	r24, 0xEA	; 234
    2228:	98 4f       	sbci	r25, 0xF8	; 248
    222a:	fc 01       	movw	r30, r24
    222c:	20 81       	ld	r18, Z
    222e:	31 81       	ldd	r19, Z+1	; 0x01
    2230:	80 91 1e 07 	lds	r24, 0x071E
    2234:	90 91 1f 07 	lds	r25, 0x071F
    2238:	82 0f       	add	r24, r18
    223a:	93 1f       	adc	r25, r19
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	if(new_pos < 0 || new_pos >= LEDS_X || randint(0, 10) > 7) {
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	99 23       	and	r25, r25
    2246:	5c f0       	brlt	.+22     	; 0x225e <effect_worm.1406+0x74>
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	91 05       	cpc	r25, r1
    2250:	34 f4       	brge	.+12     	; 0x225e <effect_worm.1406+0x74>
    2252:	6a e0       	ldi	r22, 0x0A	; 10
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	f8 f0       	brcs	.+62     	; 0x229c <effect_worm.1406+0xb2>
		vars.worm.dir = vars.worm.dir + 1 > 2? 0: vars.worm.dir + 1;
    225e:	80 91 1c 07 	lds	r24, 0x071C
    2262:	90 91 1d 07 	lds	r25, 0x071D
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	30 f4       	brcc	.+12     	; 0x227a <effect_worm.1406+0x90>
    226e:	80 91 1c 07 	lds	r24, 0x071C
    2272:	90 91 1d 07 	lds	r25, 0x071D
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	02 c0       	rjmp	.+4      	; 0x227e <effect_worm.1406+0x94>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	90 93 1d 07 	sts	0x071D, r25
    2282:	80 93 1c 07 	sts	0x071C, r24
		vars.worm.speed = -vars.worm.speed;
    2286:	80 91 1e 07 	lds	r24, 0x071E
    228a:	90 91 1f 07 	lds	r25, 0x071F
    228e:	91 95       	neg	r25
    2290:	81 95       	neg	r24
    2292:	91 09       	sbc	r25, r1
    2294:	90 93 1f 07 	sts	0x071F, r25
    2298:	80 93 1e 07 	sts	0x071E, r24
	}
	vars.worm.pos[vars.worm.dir] += vars.worm.speed;
    229c:	80 91 1c 07 	lds	r24, 0x071C
    22a0:	90 91 1d 07 	lds	r25, 0x071D
    22a4:	20 91 1c 07 	lds	r18, 0x071C
    22a8:	30 91 1d 07 	lds	r19, 0x071D
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	2a 5e       	subi	r18, 0xEA	; 234
    22b2:	38 4f       	sbci	r19, 0xF8	; 248
    22b4:	f9 01       	movw	r30, r18
    22b6:	40 81       	ld	r20, Z
    22b8:	51 81       	ldd	r21, Z+1	; 0x01
    22ba:	20 91 1e 07 	lds	r18, 0x071E
    22be:	30 91 1f 07 	lds	r19, 0x071F
    22c2:	24 0f       	add	r18, r20
    22c4:	35 1f       	adc	r19, r21
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	8a 5e       	subi	r24, 0xEA	; 234
    22cc:	98 4f       	sbci	r25, 0xF8	; 248
    22ce:	fc 01       	movw	r30, r24
    22d0:	31 83       	std	Z+1, r19	; 0x01
    22d2:	20 83       	st	Z, r18
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <init_cube.1424>:

static void init_cube(void) {
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	0f 93       	push	r16
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    22ee:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	cube_shape(0, 0, 0, 7, 7, 7, MAX_INTENSITY);
    22f2:	0f 2e       	mov	r0, r31
    22f4:	cc 24       	eor	r12, r12
    22f6:	ca 94       	dec	r12
    22f8:	ff e0       	ldi	r31, 0x0F	; 15
    22fa:	df 2e       	mov	r13, r31
    22fc:	f0 2d       	mov	r31, r0
    22fe:	0f 2e       	mov	r0, r31
    2300:	f7 e0       	ldi	r31, 0x07	; 7
    2302:	ef 2e       	mov	r14, r31
    2304:	f0 2d       	mov	r31, r0
    2306:	07 e0       	ldi	r16, 0x07	; 7
    2308:	27 e0       	ldi	r18, 0x07	; 7
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	0e 94 9b 19 	call	0x3336	; 0x3336 <cube_shape>
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	0f 91       	pop	r16
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	08 95       	ret

00002322 <init_brownian.1372>:

static void init_brownian(void){
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	vars.brownian.xyz = (xyz_t){
    232a:	84 e0       	ldi	r24, 0x04	; 4
    232c:	80 93 16 07 	sts	0x0716, r24
    2330:	84 e0       	ldi	r24, 0x04	; 4
    2332:	80 93 17 07 	sts	0x0717, r24
    2336:	84 e0       	ldi	r24, 0x04	; 4
    2338:	80 93 18 07 	sts	0x0718, r24
		.x = LEDS_X / 2,
		.y = LEDS_Y / 2,
		.z = LEDS_Z / 2
	};
	clear_buffer();
    233c:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	08 95       	ret

00002346 <effect_brownian.1414>:
void effect_brownian(void){
    2346:	ff 92       	push	r15
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	set_led(vars.brownian.xyz.x, vars.brownian.xyz.y, vars.brownian.xyz.z, MAX_INTENSITY);
    2354:	40 91 18 07 	lds	r20, 0x0718
    2358:	90 91 17 07 	lds	r25, 0x0717
    235c:	80 91 16 07 	lds	r24, 0x0716
    2360:	2f ef       	ldi	r18, 0xFF	; 255
    2362:	3f e0       	ldi	r19, 0x0F	; 15
    2364:	69 2f       	mov	r22, r25
    2366:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	vars.brownian.xyz = (xyz_t){
		.x = clamp(vars.brownian.xyz.x + randint(-2, 2), 0, LEDS_X - 1),
    236a:	10 91 16 07 	lds	r17, 0x0716
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	8e ef       	ldi	r24, 0xFE	; 254
    2372:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    2376:	81 0f       	add	r24, r17
    2378:	47 e0       	ldi	r20, 0x07	; 7
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
    2380:	08 2f       	mov	r16, r24
		.y = clamp(vars.brownian.xyz.y + randint(-2, 2), 0, LEDS_Y - 1),
    2382:	10 91 17 07 	lds	r17, 0x0717
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	8e ef       	ldi	r24, 0xFE	; 254
    238a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    238e:	81 0f       	add	r24, r17
    2390:	47 e0       	ldi	r20, 0x07	; 7
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
    2398:	18 2f       	mov	r17, r24
		.z = clamp(vars.brownian.xyz.z + randint(-2, 2), 0, LEDS_Z - 1)
    239a:	f0 90 18 07 	lds	r15, 0x0718
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	8e ef       	ldi	r24, 0xFE	; 254
    23a2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    23a6:	8f 0d       	add	r24, r15
    23a8:	47 e0       	ldi	r20, 0x07	; 7
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
	};
	clear_buffer();
}
void effect_brownian(void){
	set_led(vars.brownian.xyz.x, vars.brownian.xyz.y, vars.brownian.xyz.z, MAX_INTENSITY);
	vars.brownian.xyz = (xyz_t){
    23b0:	00 93 16 07 	sts	0x0716, r16
    23b4:	10 93 17 07 	sts	0x0717, r17
    23b8:	80 93 18 07 	sts	0x0718, r24
		.x = clamp(vars.brownian.xyz.x + randint(-2, 2), 0, LEDS_X - 1),
		.y = clamp(vars.brownian.xyz.y + randint(-2, 2), 0, LEDS_Y - 1),
		.z = clamp(vars.brownian.xyz.z + randint(-2, 2), 0, LEDS_Z - 1)
	};
}
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	08 95       	ret

000023c8 <effect_wireframe.1422>:

void effect_wireframe(void) {
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	0f 93       	push	r16
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <effect_wireframe.1422+0xe>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t a = (ticks >> 5) & 7;
    23da:	80 91 3e 07 	lds	r24, 0x073E
    23de:	90 91 3f 07 	lds	r25, 0x073F
    23e2:	96 95       	lsr	r25
    23e4:	87 95       	ror	r24
    23e6:	92 95       	swap	r25
    23e8:	82 95       	swap	r24
    23ea:	8f 70       	andi	r24, 0x0F	; 15
    23ec:	89 27       	eor	r24, r25
    23ee:	9f 70       	andi	r25, 0x0F	; 15
    23f0:	89 27       	eor	r24, r25
    23f2:	87 70       	andi	r24, 0x07	; 7
    23f4:	89 83       	std	Y+1, r24	; 0x01
	uint8_t b = 7 - ((ticks >> 5) & 7);
    23f6:	80 91 3e 07 	lds	r24, 0x073E
    23fa:	90 91 3f 07 	lds	r25, 0x073F
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	92 95       	swap	r25
    2404:	82 95       	swap	r24
    2406:	8f 70       	andi	r24, 0x0F	; 15
    2408:	89 27       	eor	r24, r25
    240a:	9f 70       	andi	r25, 0x0F	; 15
    240c:	89 27       	eor	r24, r25
    240e:	80 95       	com	r24
    2410:	87 70       	andi	r24, 0x07	; 7
    2412:	8a 83       	std	Y+2, r24	; 0x02
	clear_buffer();
    2414:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	cube_shape(a, a, a, b, b, b, MAX_INTENSITY);
    2418:	0f 2e       	mov	r0, r31
    241a:	cc 24       	eor	r12, r12
    241c:	ca 94       	dec	r12
    241e:	ff e0       	ldi	r31, 0x0F	; 15
    2420:	df 2e       	mov	r13, r31
    2422:	f0 2d       	mov	r31, r0
    2424:	ea 80       	ldd	r14, Y+2	; 0x02
    2426:	0a 81       	ldd	r16, Y+2	; 0x02
    2428:	2a 81       	ldd	r18, Y+2	; 0x02
    242a:	49 81       	ldd	r20, Y+1	; 0x01
    242c:	69 81       	ldd	r22, Y+1	; 0x01
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	0e 94 9b 19 	call	0x3336	; 0x3336 <cube_shape>
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	0f 91       	pop	r16
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	08 95       	ret

00002446 <init_countdown.1370>:

static void init_countdown(void) {
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	vars.countdown.cur = 15;
    244e:	8f e0       	ldi	r24, 0x0F	; 15
    2450:	80 93 16 07 	sts	0x0716, r24
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <effect_countdown.1381>:
void effect_countdown(void){
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <effect_countdown.1381+0x6>
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	char text[3];
	text[0] = 2;
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	89 83       	std	Y+1, r24	; 0x01
	text[1] = '0' + (vars.countdown.cur / 10);
    246a:	90 91 16 07 	lds	r25, 0x0716
    246e:	8d ec       	ldi	r24, 0xCD	; 205
    2470:	98 9f       	mul	r25, r24
    2472:	81 2d       	mov	r24, r1
    2474:	11 24       	eor	r1, r1
    2476:	86 95       	lsr	r24
    2478:	86 95       	lsr	r24
    247a:	86 95       	lsr	r24
    247c:	80 5d       	subi	r24, 0xD0	; 208
    247e:	8a 83       	std	Y+2, r24	; 0x02
	text[2] = '0' + (vars.countdown.cur % 10);
    2480:	90 91 16 07 	lds	r25, 0x0716
    2484:	8d ec       	ldi	r24, 0xCD	; 205
    2486:	98 9f       	mul	r25, r24
    2488:	81 2d       	mov	r24, r1
    248a:	11 24       	eor	r1, r1
    248c:	86 95       	lsr	r24
    248e:	86 95       	lsr	r24
    2490:	86 95       	lsr	r24
    2492:	88 0f       	add	r24, r24
    2494:	28 2f       	mov	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	22 0f       	add	r18, r18
    249a:	82 0f       	add	r24, r18
    249c:	29 2f       	mov	r18, r25
    249e:	28 1b       	sub	r18, r24
    24a0:	82 2f       	mov	r24, r18
    24a2:	80 5d       	subi	r24, 0xD0	; 208
    24a4:	8b 83       	std	Y+3, r24	; 0x03
	clear_buffer();
    24a6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	scroll_text(text, false, 9, render_yz);
    24aa:	2c e9       	ldi	r18, 0x9C	; 156
    24ac:	3b e1       	ldi	r19, 0x1B	; 27
    24ae:	49 e0       	ldi	r20, 0x09	; 9
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	ce 01       	movw	r24, r28
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
	scroll_text(text, false, 16, render_xy);
    24bc:	2f ea       	ldi	r18, 0xAF	; 175
    24be:	3b e1       	ldi	r19, 0x1B	; 27
    24c0:	40 e1       	ldi	r20, 0x10	; 16
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	ce 01       	movw	r24, r28
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
	if(vars.countdown.cur > 0) vars.countdown.cur--;
    24ce:	80 91 16 07 	lds	r24, 0x0716
    24d2:	88 23       	and	r24, r24
    24d4:	29 f0       	breq	.+10     	; 0x24e0 <effect_countdown.1381+0x86>
    24d6:	80 91 16 07 	lds	r24, 0x0716
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	80 93 16 07 	sts	0x0716, r24
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	08 95       	ret

000024ec <init_line.1418>:

static void init_line(void) {
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	0f 93       	push	r16
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    24fc:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	line(1, 2, 0, 4, 7, 6, MAX_INTENSITY);
    2500:	0f 2e       	mov	r0, r31
    2502:	cc 24       	eor	r12, r12
    2504:	ca 94       	dec	r12
    2506:	ff e0       	ldi	r31, 0x0F	; 15
    2508:	df 2e       	mov	r13, r31
    250a:	f0 2d       	mov	r31, r0
    250c:	0f 2e       	mov	r0, r31
    250e:	f6 e0       	ldi	r31, 0x06	; 6
    2510:	ef 2e       	mov	r14, r31
    2512:	f0 2d       	mov	r31, r0
    2514:	07 e0       	ldi	r16, 0x07	; 7
    2516:	24 e0       	ldi	r18, 0x04	; 4
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
}
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	0f 91       	pop	r16
    2528:	ef 90       	pop	r14
    252a:	df 90       	pop	r13
    252c:	cf 90       	pop	r12
    252e:	08 95       	ret

00002530 <init_starfield.1404>:

static const uint8_t starfield_xyz_len = 10;
static void init_starfield(void){
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	1f 92       	push	r1
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < starfield_xyz_len; i++) {
    2542:	19 82       	std	Y+1, r1	; 0x01
    2544:	30 c0       	rjmp	.+96     	; 0x25a6 <init_starfield.1404+0x76>
		vars.starfield.xyz[i] = (xyz_t){
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	08 2f       	mov	r16, r24
    254a:	10 e0       	ldi	r17, 0x00	; 0
			.x = randint(0, LEDS_X),
    254c:	68 e0       	ldi	r22, 0x08	; 8
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    2554:	e8 2e       	mov	r14, r24
			.y = randint(0, LEDS_Y),
    2556:	68 e0       	ldi	r22, 0x08	; 8
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    255e:	f8 2e       	mov	r15, r24
			.z = randint(0, LEDS_Z)
    2560:	68 e0       	ldi	r22, 0x08	; 8
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    2568:	28 2f       	mov	r18, r24
}

static const uint8_t starfield_xyz_len = 10;
static void init_starfield(void){
	for(uint8_t i = 0; i < starfield_xyz_len; i++) {
		vars.starfield.xyz[i] = (xyz_t){
    256a:	c8 01       	movw	r24, r16
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	80 0f       	add	r24, r16
    2572:	91 1f       	adc	r25, r17
    2574:	8a 5e       	subi	r24, 0xEA	; 234
    2576:	98 4f       	sbci	r25, 0xF8	; 248
    2578:	fc 01       	movw	r30, r24
    257a:	e0 82       	st	Z, r14
    257c:	c8 01       	movw	r24, r16
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	80 0f       	add	r24, r16
    2584:	91 1f       	adc	r25, r17
    2586:	89 5e       	subi	r24, 0xE9	; 233
    2588:	98 4f       	sbci	r25, 0xF8	; 248
    258a:	fc 01       	movw	r30, r24
    258c:	f0 82       	st	Z, r15
    258e:	c8 01       	movw	r24, r16
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	80 0f       	add	r24, r16
    2596:	91 1f       	adc	r25, r17
    2598:	88 5e       	subi	r24, 0xE8	; 232
    259a:	98 4f       	sbci	r25, 0xF8	; 248
    259c:	fc 01       	movw	r30, r24
    259e:	20 83       	st	Z, r18
	line(1, 2, 0, 4, 7, 6, MAX_INTENSITY);
}

static const uint8_t starfield_xyz_len = 10;
static void init_starfield(void){
	for(uint8_t i = 0; i < starfield_xyz_len; i++) {
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	80 91 10 01 	lds	r24, 0x0110
    25aa:	99 81       	ldd	r25, Y+1	; 0x01
    25ac:	98 17       	cp	r25, r24
    25ae:	58 f2       	brcs	.-106    	; 0x2546 <init_starfield.1404+0x16>
			.x = randint(0, LEDS_X),
			.y = randint(0, LEDS_Y),
			.z = randint(0, LEDS_Z)
		};
	}
	clear_buffer();
    25b0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    25b4:	0f 90       	pop	r0
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	ff 90       	pop	r15
    25c0:	ef 90       	pop	r14
    25c2:	08 95       	ret

000025c4 <effect_starfield.1385>:
void effect_starfield(void){
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <effect_starfield.1385+0x6>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <effect_starfield.1385+0x8>
    25cc:	1f 92       	push	r1
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
	clear_buffer();
    25d2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(uint8_t i = 0; i < starfield_xyz_len; i++) {
    25d6:	19 82       	std	Y+1, r1	; 0x01
    25d8:	32 c0       	rjmp	.+100    	; 0x263e <effect_starfield.1385+0x7a>
		xyz_t xyz = vars.starfield.xyz[i];
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	c9 01       	movw	r24, r18
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	8a 5e       	subi	r24, 0xEA	; 234
    25ec:	98 4f       	sbci	r25, 0xF8	; 248
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	a2 81       	ldd	r26, Z+2	; 0x02
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	ad 83       	std	Y+5, r26	; 0x05
		set_led(xyz.x, xyz.y, xyz.z, MAX_INTENSITY);
    25fc:	4d 81       	ldd	r20, Y+5	; 0x05
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	2f ef       	ldi	r18, 0xFF	; 255
    2604:	3f e0       	ldi	r19, 0x0F	; 15
    2606:	69 2f       	mov	r22, r25
    2608:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
		uint8_t y = xyz.y;
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	8a 83       	std	Y+2, r24	; 0x02
		y++;
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	8a 83       	std	Y+2, r24	; 0x02
		if(y >= LEDS_Y) y = 0;
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	88 30       	cpi	r24, 0x08	; 8
    261a:	08 f0       	brcs	.+2      	; 0x261e <effect_starfield.1385+0x5a>
    261c:	1a 82       	std	Y+2, r1	; 0x02
		vars.starfield.xyz[i].y = y;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	c9 01       	movw	r24, r18
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	82 0f       	add	r24, r18
    262c:	93 1f       	adc	r25, r19
    262e:	89 5e       	subi	r24, 0xE9	; 233
    2630:	98 4f       	sbci	r25, 0xF8	; 248
    2632:	2a 81       	ldd	r18, Y+2	; 0x02
    2634:	fc 01       	movw	r30, r24
    2636:	20 83       	st	Z, r18
	}
	clear_buffer();
}
void effect_starfield(void){
	clear_buffer();
	for(uint8_t i = 0; i < starfield_xyz_len; i++) {
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	80 91 10 01 	lds	r24, 0x0110
    2642:	99 81       	ldd	r25, Y+1	; 0x01
    2644:	98 17       	cp	r25, r24
    2646:	48 f2       	brcs	.-110    	; 0x25da <effect_starfield.1385+0x16>
		uint8_t y = xyz.y;
		y++;
		if(y >= LEDS_Y) y = 0;
		vars.starfield.xyz[i].y = y;
	}
}
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <effect_fish.1416>:

void effect_fish(void) {
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
	fish_shape(2, 1, 1, MAX_INTENSITY);
    2660:	2f ef       	ldi	r18, 0xFF	; 255
    2662:	3f e0       	ldi	r19, 0x0F	; 15
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <fish_shape>
}
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <effect_test_sensor1.1383>:

void effect_test_sensor1(void){
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	29 97       	sbiw	r28, 0x09	; 9
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
	clear_buffer();
    2688:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	uint8_t z = sensors.distance1 / 20;
    268c:	90 91 06 01 	lds	r25, 0x0106
    2690:	8d ec       	ldi	r24, 0xCD	; 205
    2692:	98 9f       	mul	r25, r24
    2694:	81 2d       	mov	r24, r1
    2696:	11 24       	eor	r1, r1
    2698:	82 95       	swap	r24
    269a:	8f 70       	andi	r24, 0x0F	; 15
    269c:	89 83       	std	Y+1, r24	; 0x01
	if (z >= LEDS_Z)
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	88 30       	cpi	r24, 0x08	; 8
    26a2:	10 f0       	brcs	.+4      	; 0x26a8 <effect_test_sensor1.1383+0x34>
		z = LEDS_Z - 1;
    26a4:	87 e0       	ldi	r24, 0x07	; 7
    26a6:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t x=0; x<2; x++) {
    26a8:	1a 82       	std	Y+2, r1	; 0x02
    26aa:	12 c0       	rjmp	.+36     	; 0x26d0 <effect_test_sensor1.1383+0x5c>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    26ac:	1b 82       	std	Y+3, r1	; 0x03
    26ae:	0a c0       	rjmp	.+20     	; 0x26c4 <effect_test_sensor1.1383+0x50>
			set_led(x, y, z, MAX_INTENSITY);
    26b0:	2f ef       	ldi	r18, 0xFF	; 255
    26b2:	3f e0       	ldi	r19, 0x0F	; 15
    26b4:	49 81       	ldd	r20, Y+1	; 0x01
    26b6:	6b 81       	ldd	r22, Y+3	; 0x03
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	clear_buffer();
	uint8_t z = sensors.distance1 / 20;
	if (z >= LEDS_Z)
		z = LEDS_Z - 1;
	for(uint8_t x=0; x<2; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	88 30       	cpi	r24, 0x08	; 8
    26c8:	98 f3       	brcs	.-26     	; 0x26b0 <effect_test_sensor1.1383+0x3c>
void effect_test_sensor1(void){
	clear_buffer();
	uint8_t z = sensors.distance1 / 20;
	if (z >= LEDS_Z)
		z = LEDS_Z - 1;
	for(uint8_t x=0; x<2; x++) {
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	8a 83       	std	Y+2, r24	; 0x02
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	58 f3       	brcs	.-42     	; 0x26ac <effect_test_sensor1.1383+0x38>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	z = sensors.distance2 / 20;
    26d6:	90 91 07 01 	lds	r25, 0x0107
    26da:	8d ec       	ldi	r24, 0xCD	; 205
    26dc:	98 9f       	mul	r25, r24
    26de:	81 2d       	mov	r24, r1
    26e0:	11 24       	eor	r1, r1
    26e2:	82 95       	swap	r24
    26e4:	8f 70       	andi	r24, 0x0F	; 15
    26e6:	89 83       	std	Y+1, r24	; 0x01
	if (z >= LEDS_Z)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 30       	cpi	r24, 0x08	; 8
    26ec:	10 f0       	brcs	.+4      	; 0x26f2 <effect_test_sensor1.1383+0x7e>
		z = LEDS_Z - 1;
    26ee:	87 e0       	ldi	r24, 0x07	; 7
    26f0:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t x=2; x<4; x++) {
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	8c 83       	std	Y+4, r24	; 0x04
    26f6:	12 c0       	rjmp	.+36     	; 0x271c <effect_test_sensor1.1383+0xa8>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    26f8:	1d 82       	std	Y+5, r1	; 0x05
    26fa:	0a c0       	rjmp	.+20     	; 0x2710 <effect_test_sensor1.1383+0x9c>
			set_led(x, y, z, MAX_INTENSITY);
    26fc:	2f ef       	ldi	r18, 0xFF	; 255
    26fe:	3f e0       	ldi	r19, 0x0F	; 15
    2700:	49 81       	ldd	r20, Y+1	; 0x01
    2702:	6d 81       	ldd	r22, Y+5	; 0x05
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	}
	z = sensors.distance2 / 20;
	if (z >= LEDS_Z)
		z = LEDS_Z - 1;
	for(uint8_t x=2; x<4; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	88 30       	cpi	r24, 0x08	; 8
    2714:	98 f3       	brcs	.-26     	; 0x26fc <effect_test_sensor1.1383+0x88>
		}
	}
	z = sensors.distance2 / 20;
	if (z >= LEDS_Z)
		z = LEDS_Z - 1;
	for(uint8_t x=2; x<4; x++) {
    2716:	8c 81       	ldd	r24, Y+4	; 0x04
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	8c 83       	std	Y+4, r24	; 0x04
    271c:	8c 81       	ldd	r24, Y+4	; 0x04
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	58 f3       	brcs	.-42     	; 0x26f8 <effect_test_sensor1.1383+0x84>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	z = sensors.ambient_light / 32;
    2722:	80 91 08 01 	lds	r24, 0x0108
    2726:	82 95       	swap	r24
    2728:	86 95       	lsr	r24
    272a:	87 70       	andi	r24, 0x07	; 7
    272c:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t x=4; x<6; x++) {
    272e:	84 e0       	ldi	r24, 0x04	; 4
    2730:	8e 83       	std	Y+6, r24	; 0x06
    2732:	12 c0       	rjmp	.+36     	; 0x2758 <effect_test_sensor1.1383+0xe4>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    2734:	1f 82       	std	Y+7, r1	; 0x07
    2736:	0a c0       	rjmp	.+20     	; 0x274c <effect_test_sensor1.1383+0xd8>
			set_led(x, y, z, MAX_INTENSITY);
    2738:	2f ef       	ldi	r18, 0xFF	; 255
    273a:	3f e0       	ldi	r19, 0x0F	; 15
    273c:	49 81       	ldd	r20, Y+1	; 0x01
    273e:	6f 81       	ldd	r22, Y+7	; 0x07
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	z = sensors.ambient_light / 32;
	for(uint8_t x=4; x<6; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    2746:	8f 81       	ldd	r24, Y+7	; 0x07
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	8f 83       	std	Y+7, r24	; 0x07
    274c:	8f 81       	ldd	r24, Y+7	; 0x07
    274e:	88 30       	cpi	r24, 0x08	; 8
    2750:	98 f3       	brcs	.-26     	; 0x2738 <effect_test_sensor1.1383+0xc4>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	z = sensors.ambient_light / 32;
	for(uint8_t x=4; x<6; x++) {
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	8e 83       	std	Y+6, r24	; 0x06
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	86 30       	cpi	r24, 0x06	; 6
    275c:	58 f3       	brcs	.-42     	; 0x2734 <effect_test_sensor1.1383+0xc0>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	
	z = sensors.sound_pressure_level / 32;
    275e:	80 91 09 01 	lds	r24, 0x0109
    2762:	82 95       	swap	r24
    2764:	86 95       	lsr	r24
    2766:	87 70       	andi	r24, 0x07	; 7
    2768:	89 83       	std	Y+1, r24	; 0x01
	for(uint8_t x=6; x<LEDS_X; x++) {
    276a:	86 e0       	ldi	r24, 0x06	; 6
    276c:	88 87       	std	Y+8, r24	; 0x08
    276e:	12 c0       	rjmp	.+36     	; 0x2794 <effect_test_sensor1.1383+0x120>
		for(uint8_t y=0; y<LEDS_Y; y++) {
    2770:	19 86       	std	Y+9, r1	; 0x09
    2772:	0a c0       	rjmp	.+20     	; 0x2788 <effect_test_sensor1.1383+0x114>
			set_led(x, y, z, MAX_INTENSITY);
    2774:	2f ef       	ldi	r18, 0xFF	; 255
    2776:	3f e0       	ldi	r19, 0x0F	; 15
    2778:	49 81       	ldd	r20, Y+1	; 0x01
    277a:	69 85       	ldd	r22, Y+9	; 0x09
    277c:	88 85       	ldd	r24, Y+8	; 0x08
    277e:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
		}
	}
	
	z = sensors.sound_pressure_level / 32;
	for(uint8_t x=6; x<LEDS_X; x++) {
		for(uint8_t y=0; y<LEDS_Y; y++) {
    2782:	89 85       	ldd	r24, Y+9	; 0x09
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 87       	std	Y+9, r24	; 0x09
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	88 30       	cpi	r24, 0x08	; 8
    278c:	98 f3       	brcs	.-26     	; 0x2774 <effect_test_sensor1.1383+0x100>
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
	
	z = sensors.sound_pressure_level / 32;
	for(uint8_t x=6; x<LEDS_X; x++) {
    278e:	88 85       	ldd	r24, Y+8	; 0x08
    2790:	8f 5f       	subi	r24, 0xFF	; 255
    2792:	88 87       	std	Y+8, r24	; 0x08
    2794:	88 85       	ldd	r24, Y+8	; 0x08
    2796:	88 30       	cpi	r24, 0x08	; 8
    2798:	58 f3       	brcs	.-42     	; 0x2770 <effect_test_sensor1.1383+0xfc>
		for(uint8_t y=0; y<LEDS_Y; y++) {
			set_led(x, y, z, MAX_INTENSITY);
		}
	}
}
    279a:	29 96       	adiw	r28, 0x09	; 9
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <init_particles.1402>:

static const uint8_t xyz_len = 5;
static void init_particles(void){
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <init_particles.1402+0x6>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <init_particles.1402+0x8>
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < xyz_len; i++) {
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	24 c0       	rjmp	.+72     	; 0x2804 <init_particles.1402+0x58>
		xyz_t p = {
			.x=randint(0, LEDS_X),
    27bc:	68 e0       	ldi	r22, 0x08	; 8
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
}

static const uint8_t xyz_len = 5;
static void init_particles(void){
	for(uint8_t i = 0; i < xyz_len; i++) {
		xyz_t p = {
    27c4:	8a 83       	std	Y+2, r24	; 0x02
			.x=randint(0, LEDS_X),
			.y=randint(0, LEDS_Y),
    27c6:	68 e0       	ldi	r22, 0x08	; 8
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
}

static const uint8_t xyz_len = 5;
static void init_particles(void){
	for(uint8_t i = 0; i < xyz_len; i++) {
		xyz_t p = {
    27ce:	8b 83       	std	Y+3, r24	; 0x03
			.x=randint(0, LEDS_X),
			.y=randint(0, LEDS_Y),
			.z=randint(0, LEDS_Z)
    27d0:	68 e0       	ldi	r22, 0x08	; 8
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
}

static const uint8_t xyz_len = 5;
static void init_particles(void){
	for(uint8_t i = 0; i < xyz_len; i++) {
		xyz_t p = {
    27d8:	8c 83       	std	Y+4, r24	; 0x04
			.x=randint(0, LEDS_X),
			.y=randint(0, LEDS_Y),
			.z=randint(0, LEDS_Z)
		};
		vars.particles.xyz[i] = p;
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	c9 01       	movw	r24, r18
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	82 0f       	add	r24, r18
    27e8:	93 1f       	adc	r25, r19
    27ea:	9c 01       	movw	r18, r24
    27ec:	2a 5e       	subi	r18, 0xEA	; 234
    27ee:	38 4f       	sbci	r19, 0xF8	; 248
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	ac 81       	ldd	r26, Y+4	; 0x04
    27f6:	f9 01       	movw	r30, r18
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
	}
}

static const uint8_t xyz_len = 5;
static void init_particles(void){
	for(uint8_t i = 0; i < xyz_len; i++) {
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	80 91 11 01 	lds	r24, 0x0111
    2808:	99 81       	ldd	r25, Y+1	; 0x01
    280a:	98 17       	cp	r25, r24
    280c:	b8 f2       	brcs	.-82     	; 0x27bc <init_particles.1402+0x10>
			.y=randint(0, LEDS_Y),
			.z=randint(0, LEDS_Z)
		};
		vars.particles.xyz[i] = p;
	}
	clear_buffer();
    280e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <effect_particles.1412>:
void effect_particles(void){
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	00 d0       	rcall	.+0      	; 0x2828 <effect_particles.1412+0x8>
    2828:	00 d0       	rcall	.+0      	; 0x282a <effect_particles.1412+0xa>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
	if(ticks % 50) return;
    282e:	40 91 3e 07 	lds	r20, 0x073E
    2832:	50 91 3f 07 	lds	r21, 0x073F
    2836:	ca 01       	movw	r24, r20
    2838:	96 95       	lsr	r25
    283a:	87 95       	ror	r24
    283c:	9c 01       	movw	r18, r24
    283e:	ab e7       	ldi	r26, 0x7B	; 123
    2840:	b4 e1       	ldi	r27, 0x14	; 20
    2842:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    2846:	96 95       	lsr	r25
    2848:	87 95       	ror	r24
    284a:	62 e3       	ldi	r22, 0x32	; 50
    284c:	68 9f       	mul	r22, r24
    284e:	90 01       	movw	r18, r0
    2850:	69 9f       	mul	r22, r25
    2852:	30 0d       	add	r19, r0
    2854:	11 24       	eor	r1, r1
    2856:	ca 01       	movw	r24, r20
    2858:	82 1b       	sub	r24, r18
    285a:	93 0b       	sbc	r25, r19
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	09 f0       	breq	.+2      	; 0x2862 <effect_particles.1412+0x42>
    2860:	59 c0       	rjmp	.+178    	; 0x2914 <effect_particles.1412+0xf4>
	clear_buffer();
    2862:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	for(uint8_t i = 0; i < xyz_len; i++) {
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	4f c0       	rjmp	.+158    	; 0x2908 <effect_particles.1412+0xe8>
		xyz_t p = vars.particles.xyz[i];
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	c9 01       	movw	r24, r18
    2872:	88 0f       	add	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	82 0f       	add	r24, r18
    2878:	93 1f       	adc	r25, r19
    287a:	8a 5e       	subi	r24, 0xEA	; 234
    287c:	98 4f       	sbci	r25, 0xF8	; 248
    287e:	fc 01       	movw	r30, r24
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	a2 81       	ldd	r26, Z+2	; 0x02
    2886:	8a 83       	std	Y+2, r24	; 0x02
    2888:	9b 83       	std	Y+3, r25	; 0x03
    288a:	ac 83       	std	Y+4, r26	; 0x04
		set_led(p.x, p.y, p.z, MAX_INTENSITY);
    288c:	4c 81       	ldd	r20, Y+4	; 0x04
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	2f ef       	ldi	r18, 0xFF	; 255
    2894:	3f e0       	ldi	r19, 0x0F	; 15
    2896:	69 2f       	mov	r22, r25
    2898:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
		p.x = clamp(p.x + randint(-1, 1), 0, LEDS_X - 1);
    289c:	1a 81       	ldd	r17, Y+2	; 0x02
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    28a6:	81 0f       	add	r24, r17
    28a8:	47 e0       	ldi	r20, 0x07	; 7
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
    28b0:	8a 83       	std	Y+2, r24	; 0x02
		p.y = clamp(p.y + randint(-1, 1), 0, LEDS_Y - 1);
    28b2:	1b 81       	ldd	r17, Y+3	; 0x03
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    28bc:	81 0f       	add	r24, r17
    28be:	47 e0       	ldi	r20, 0x07	; 7
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
    28c6:	8b 83       	std	Y+3, r24	; 0x03
		p.z = clamp(p.z + randint(-1, 1), 0, LEDS_Z - 1);
    28c8:	1c 81       	ldd	r17, Y+4	; 0x04
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <randint>
    28d2:	81 0f       	add	r24, r17
    28d4:	47 e0       	ldi	r20, 0x07	; 7
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <clamp>
    28dc:	8c 83       	std	Y+4, r24	; 0x04
		vars.particles.xyz[i] = p;
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	c9 01       	movw	r24, r18
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	82 0f       	add	r24, r18
    28ec:	93 1f       	adc	r25, r19
    28ee:	9c 01       	movw	r18, r24
    28f0:	2a 5e       	subi	r18, 0xEA	; 234
    28f2:	38 4f       	sbci	r19, 0xF8	; 248
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	ac 81       	ldd	r26, Y+4	; 0x04
    28fa:	f9 01       	movw	r30, r18
    28fc:	80 83       	st	Z, r24
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	a2 83       	std	Z+2, r26	; 0x02
	clear_buffer();
}
void effect_particles(void){
	if(ticks % 50) return;
	clear_buffer();
	for(uint8_t i = 0; i < xyz_len; i++) {
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	80 91 11 01 	lds	r24, 0x0111
    290c:	99 81       	ldd	r25, Y+1	; 0x01
    290e:	98 17       	cp	r25, r24
    2910:	08 f4       	brcc	.+2      	; 0x2914 <effect_particles.1412+0xf4>
    2912:	ab cf       	rjmp	.-170    	; 0x286a <effect_particles.1412+0x4a>
		p.x = clamp(p.x + randint(-1, 1), 0, LEDS_X - 1);
		p.y = clamp(p.y + randint(-1, 1), 0, LEDS_Y - 1);
		p.z = clamp(p.z + randint(-1, 1), 0, LEDS_Z - 1);
		vars.particles.xyz[i] = p;
	}
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	08 95       	ret

00002924 <effect_scroll_text.1376>:

PROGMEM static const char default_text[] = "\x05""ERROR";
void effect_scroll_text(void){
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	00 d0       	rcall	.+0      	; 0x292a <effect_scroll_text.1376+0x6>
    292a:	00 d0       	rcall	.+0      	; 0x292c <effect_scroll_text.1376+0x8>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	
	const char *text = custom_data == NULL? default_text: (const char*)custom_data;
    2930:	80 91 40 07 	lds	r24, 0x0740
    2934:	90 91 41 07 	lds	r25, 0x0741
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	29 f0       	breq	.+10     	; 0x2946 <effect_scroll_text.1376+0x22>
    293c:	80 91 40 07 	lds	r24, 0x0740
    2940:	90 91 41 07 	lds	r25, 0x0741
    2944:	02 c0       	rjmp	.+4      	; 0x294a <effect_scroll_text.1376+0x26>
    2946:	85 e8       	ldi	r24, 0x85	; 133
    2948:	92 e0       	ldi	r25, 0x02	; 2
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
	clear_buffer();
    294e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <clear_buffer>
	int16_t pos = ticks >> 3;
    2952:	80 91 3e 07 	lds	r24, 0x073E
    2956:	90 91 3f 07 	lds	r25, 0x073F
    295a:	96 95       	lsr	r25
    295c:	87 95       	ror	r24
    295e:	96 95       	lsr	r25
    2960:	87 95       	ror	r24
    2962:	96 95       	lsr	r25
    2964:	87 95       	ror	r24
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
	scroll_text(text, true, pos, render_xy);
    296a:	4b 81       	ldd	r20, Y+3	; 0x03
    296c:	5c 81       	ldd	r21, Y+4	; 0x04
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	2f ea       	ldi	r18, 0xAF	; 175
    2974:	3b e1       	ldi	r19, 0x1B	; 27
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
	scroll_text(text, true, pos-7, render_yz);
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	ac 01       	movw	r20, r24
    2982:	47 50       	subi	r20, 0x07	; 7
    2984:	51 09       	sbc	r21, r1
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	2c e9       	ldi	r18, 0x9C	; 156
    298c:	3b e1       	ldi	r19, 0x1B	; 27
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 42 1a 	call	0x3484	; 0x3484 <scroll_text>
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <clamp>:
 */
#include <stdlib.h>
#include <stdint.h>

int8_t clamp(uint8_t x, uint8_t a, uint8_t b)
{
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <clamp+0x6>
    29a8:	1f 92       	push	r1
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	6a 83       	std	Y+2, r22	; 0x02
    29b2:	4b 83       	std	Y+3, r20	; 0x03
	return x < a? a: (x > b? b: x);
    29b4:	99 81       	ldd	r25, Y+1	; 0x01
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	98 17       	cp	r25, r24
    29ba:	10 f4       	brcc	.+4      	; 0x29c0 <clamp+0x1e>
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <clamp+0x28>
    29c0:	9b 81       	ldd	r25, Y+3	; 0x03
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	98 17       	cp	r25, r24
    29c6:	08 f4       	brcc	.+2      	; 0x29ca <clamp+0x28>
    29c8:	89 2f       	mov	r24, r25
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <randint>:
{
	return x < a? a: (x > b? b: x);
}

uint8_t randint(uint8_t min, uint8_t max)
{
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	00 d0       	rcall	.+0      	; 0x29dc <randint+0x6>
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	6a 83       	std	Y+2, r22	; 0x02
	// could use some optimization
	return (rand() % max) + min;
    29e4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <rand>
    29e8:	2a 81       	ldd	r18, Y+2	; 0x02
    29ea:	22 2f       	mov	r18, r18
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	b9 01       	movw	r22, r18
    29f0:	0e 94 65 30 	call	0x60ca	; 0x60ca <__divmodhi4>
    29f4:	98 2f       	mov	r25, r24
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	89 0f       	add	r24, r25
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <circle_shape>:
#include "math.h"
#include "utils.h"
#include "weber_fechner.h"

void circle_shape(int8_t xi, int8_t yi, int8_t zi, float rsq_min, float rsq_max, uint16_t intensity)
{
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	cf 92       	push	r12
    2a0a:	df 92       	push	r13
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	63 97       	sbiw	r28, 0x13	; 19
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	68 87       	std	Y+8, r22	; 0x08
    2a2c:	49 87       	std	Y+9, r20	; 0x09
    2a2e:	0a 87       	std	Y+10, r16	; 0x0a
    2a30:	1b 87       	std	Y+11, r17	; 0x0b
    2a32:	2c 87       	std	Y+12, r18	; 0x0c
    2a34:	3d 87       	std	Y+13, r19	; 0x0d
    2a36:	ce 86       	std	Y+14, r12	; 0x0e
    2a38:	df 86       	std	Y+15, r13	; 0x0f
    2a3a:	e8 8a       	std	Y+16, r14	; 0x10
    2a3c:	f9 8a       	std	Y+17, r15	; 0x11
    2a3e:	bb 8a       	std	Y+19, r11	; 0x13
    2a40:	aa 8a       	std	Y+18, r10	; 0x12
	xi -= LEDS_X / 2;
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	84 50       	subi	r24, 0x04	; 4
    2a46:	8f 83       	std	Y+7, r24	; 0x07
	yi -= LEDS_Y / 2;
    2a48:	88 85       	ldd	r24, Y+8	; 0x08
    2a4a:	84 50       	subi	r24, 0x04	; 4
    2a4c:	88 87       	std	Y+8, r24	; 0x08

	for(int8_t x = xi; x < LEDS_X + xi; x++) {
    2a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	6e c0       	rjmp	.+220    	; 0x2b30 <circle_shape+0x12c>
		for(int8_t y = yi; y < LEDS_Y + yi; y++) {
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	8a 83       	std	Y+2, r24	; 0x02
    2a58:	5a c0       	rjmp	.+180    	; 0x2b0e <circle_shape+0x10a>
			float sq = x * x + y * y;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	55 27       	eor	r21, r21
    2a60:	47 fd       	sbrc	r20, 7
    2a62:	50 95       	com	r21
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	99 27       	eor	r25, r25
    2a68:	87 fd       	sbrc	r24, 7
    2a6a:	90 95       	com	r25
    2a6c:	48 9f       	mul	r20, r24
    2a6e:	90 01       	movw	r18, r0
    2a70:	49 9f       	mul	r20, r25
    2a72:	30 0d       	add	r19, r0
    2a74:	58 9f       	mul	r21, r24
    2a76:	30 0d       	add	r19, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	68 2f       	mov	r22, r24
    2a7e:	77 27       	eor	r23, r23
    2a80:	67 fd       	sbrc	r22, 7
    2a82:	70 95       	com	r23
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	48 2f       	mov	r20, r24
    2a88:	55 27       	eor	r21, r21
    2a8a:	47 fd       	sbrc	r20, 7
    2a8c:	50 95       	com	r21
    2a8e:	64 9f       	mul	r22, r20
    2a90:	c0 01       	movw	r24, r0
    2a92:	65 9f       	mul	r22, r21
    2a94:	90 0d       	add	r25, r0
    2a96:	74 9f       	mul	r23, r20
    2a98:	90 0d       	add	r25, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	82 0f       	add	r24, r18
    2a9e:	93 1f       	adc	r25, r19
    2aa0:	aa 27       	eor	r26, r26
    2aa2:	97 fd       	sbrc	r25, 7
    2aa4:	a0 95       	com	r26
    2aa6:	ba 2f       	mov	r27, r26
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <__floatsisf>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
    2ab6:	9c 83       	std	Y+4, r25	; 0x04
    2ab8:	ad 83       	std	Y+5, r26	; 0x05
    2aba:	be 83       	std	Y+6, r27	; 0x06

			if(rsq_min < sq && sq < rsq_max) {
    2abc:	2b 81       	ldd	r18, Y+3	; 0x03
    2abe:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac0:	4d 81       	ldd	r20, Y+5	; 0x05
    2ac2:	5e 81       	ldd	r21, Y+6	; 0x06
    2ac4:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ac6:	7b 85       	ldd	r23, Y+11	; 0x0b
    2ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2acc:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__cmpsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	d4 f4       	brge	.+52     	; 0x2b08 <circle_shape+0x104>
    2ad4:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ad6:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ad8:	48 89       	ldd	r20, Y+16	; 0x10
    2ada:	59 89       	ldd	r21, Y+17	; 0x11
    2adc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ade:	7c 81       	ldd	r23, Y+4	; 0x04
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__cmpsf2>
    2ae8:	88 23       	and	r24, r24
    2aea:	74 f4       	brge	.+28     	; 0x2b08 <circle_shape+0x104>
				set_led(x - xi, y - yi, zi, MAX_INTENSITY);
    2aec:	49 85       	ldd	r20, Y+9	; 0x09
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	88 85       	ldd	r24, Y+8	; 0x08
    2af2:	98 1b       	sub	r25, r24
    2af4:	29 81       	ldd	r18, Y+1	; 0x01
    2af6:	8f 81       	ldd	r24, Y+7	; 0x07
    2af8:	32 2f       	mov	r19, r18
    2afa:	38 1b       	sub	r19, r24
    2afc:	83 2f       	mov	r24, r19
    2afe:	2f ef       	ldi	r18, 0xFF	; 255
    2b00:	3f e0       	ldi	r19, 0x0F	; 15
    2b02:	69 2f       	mov	r22, r25
    2b04:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
{
	xi -= LEDS_X / 2;
	yi -= LEDS_Y / 2;

	for(int8_t x = xi; x < LEDS_X + xi; x++) {
		for(int8_t y = yi; y < LEDS_Y + yi; y++) {
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	8f 5f       	subi	r24, 0xFF	; 255
    2b0c:	8a 83       	std	Y+2, r24	; 0x02
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	28 2f       	mov	r18, r24
    2b12:	33 27       	eor	r19, r19
    2b14:	27 fd       	sbrc	r18, 7
    2b16:	30 95       	com	r19
    2b18:	88 85       	ldd	r24, Y+8	; 0x08
    2b1a:	99 27       	eor	r25, r25
    2b1c:	87 fd       	sbrc	r24, 7
    2b1e:	90 95       	com	r25
    2b20:	08 96       	adiw	r24, 0x08	; 8
    2b22:	28 17       	cp	r18, r24
    2b24:	39 07       	cpc	r19, r25
    2b26:	0c f4       	brge	.+2      	; 0x2b2a <circle_shape+0x126>
    2b28:	98 cf       	rjmp	.-208    	; 0x2a5a <circle_shape+0x56>
void circle_shape(int8_t xi, int8_t yi, int8_t zi, float rsq_min, float rsq_max, uint16_t intensity)
{
	xi -= LEDS_X / 2;
	yi -= LEDS_Y / 2;

	for(int8_t x = xi; x < LEDS_X + xi; x++) {
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	28 2f       	mov	r18, r24
    2b34:	33 27       	eor	r19, r19
    2b36:	27 fd       	sbrc	r18, 7
    2b38:	30 95       	com	r19
    2b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b3c:	99 27       	eor	r25, r25
    2b3e:	87 fd       	sbrc	r24, 7
    2b40:	90 95       	com	r25
    2b42:	08 96       	adiw	r24, 0x08	; 8
    2b44:	28 17       	cp	r18, r24
    2b46:	39 07       	cpc	r19, r25
    2b48:	0c f4       	brge	.+2      	; 0x2b4c <circle_shape+0x148>
    2b4a:	84 cf       	rjmp	.-248    	; 0x2a54 <circle_shape+0x50>
			if(rsq_min < sq && sq < rsq_max) {
				set_led(x - xi, y - yi, zi, MAX_INTENSITY);
			}
		}
	}
}
    2b4c:	63 96       	adiw	r28, 0x13	; 19
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	df 90       	pop	r13
    2b66:	cf 90       	pop	r12
    2b68:	bf 90       	pop	r11
    2b6a:	af 90       	pop	r10
    2b6c:	08 95       	ret

00002b6e <fish_shape>:

void fish_shape(uint8_t xi, uint8_t yi, uint8_t zi, uint16_t intensity)
{
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <fish_shape+0xa>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <fish_shape+0xc>
    2b7a:	1f 92       	push	r1
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	6a 83       	std	Y+2, r22	; 0x02
    2b84:	4b 83       	std	Y+3, r20	; 0x03
    2b86:	3d 83       	std	Y+5, r19	; 0x05
    2b88:	2c 83       	std	Y+4, r18	; 0x04
	if(xi > 0) set_row(xi - 1, zi + 1, yi + 1, yi + 4, intensity);
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	88 23       	and	r24, r24
    2b8e:	99 f0       	breq	.+38     	; 0x2bb6 <fish_shape+0x48>
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	28 2f       	mov	r18, r24
    2b94:	2c 5f       	subi	r18, 0xFC	; 252
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	48 2f       	mov	r20, r24
    2b9a:	4f 5f       	subi	r20, 0xFF	; 255
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	58 2f       	mov	r21, r24
    2ba0:	5f 5f       	subi	r21, 0xFF	; 255
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	38 2f       	mov	r19, r24
    2ba6:	31 50       	subi	r19, 0x01	; 1
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	8c 01       	movw	r16, r24
    2bae:	65 2f       	mov	r22, r21
    2bb0:	83 2f       	mov	r24, r19
    2bb2:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>

	set_led(xi, yi, zi, intensity);
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bba:	9c 01       	movw	r18, r24
    2bbc:	4b 81       	ldd	r20, Y+3	; 0x03
    2bbe:	6a 81       	ldd	r22, Y+2	; 0x02
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	set_row(xi, zi, yi + 2, yi + 4, intensity);
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	28 2f       	mov	r18, r24
    2bca:	2c 5f       	subi	r18, 0xFC	; 252
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	38 2f       	mov	r19, r24
    2bd0:	3e 5f       	subi	r19, 0xFE	; 254
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	8c 01       	movw	r16, r24
    2bd8:	43 2f       	mov	r20, r19
    2bda:	6b 81       	ldd	r22, Y+3	; 0x03
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(xi, zi + 1, yi, yi + 5, intensity);
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	28 2f       	mov	r18, r24
    2be6:	2b 5f       	subi	r18, 0xFB	; 251
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	38 2f       	mov	r19, r24
    2bec:	3f 5f       	subi	r19, 0xFF	; 255
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf2:	8c 01       	movw	r16, r24
    2bf4:	4a 81       	ldd	r20, Y+2	; 0x02
    2bf6:	63 2f       	mov	r22, r19
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(xi, zi + 2, yi + 2, yi + 3, intensity);
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	28 2f       	mov	r18, r24
    2c02:	2d 5f       	subi	r18, 0xFD	; 253
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	48 2f       	mov	r20, r24
    2c08:	4e 5f       	subi	r20, 0xFE	; 254
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	38 2f       	mov	r19, r24
    2c0e:	3e 5f       	subi	r19, 0xFE	; 254
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	8c 01       	movw	r16, r24
    2c16:	63 2f       	mov	r22, r19
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_led(xi, yi, zi + 2, intensity);
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	48 2f       	mov	r20, r24
    2c22:	4e 5f       	subi	r20, 0xFE	; 254
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	9c 01       	movw	r18, r24
    2c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

	if(xi < LEDS_X - 1) set_row(xi + 1, zi + 1, yi + 1, yi + 4, intensity);
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	87 30       	cpi	r24, 0x07	; 7
    2c36:	98 f4       	brcc	.+38     	; 0x2c5e <fish_shape+0xf0>
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	2c 5f       	subi	r18, 0xFC	; 252
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	48 2f       	mov	r20, r24
    2c42:	4f 5f       	subi	r20, 0xFF	; 255
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	58 2f       	mov	r21, r24
    2c48:	5f 5f       	subi	r21, 0xFF	; 255
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	38 2f       	mov	r19, r24
    2c4e:	3f 5f       	subi	r19, 0xFF	; 255
    2c50:	8c 81       	ldd	r24, Y+4	; 0x04
    2c52:	9d 81       	ldd	r25, Y+5	; 0x05
    2c54:	8c 01       	movw	r16, r24
    2c56:	65 2f       	mov	r22, r21
    2c58:	83 2f       	mov	r24, r19
    2c5a:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
}
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	08 95       	ret

00002c72 <heart_shape>:

static void heart_layer(uint8_t x, uint8_t raw);

void heart_shape(uint8_t i)
{
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	1f 92       	push	r1
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	89 83       	std	Y+1, r24	; 0x01
	heart_layer(1, i >> 2);
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	86 95       	lsr	r24
    2c82:	86 95       	lsr	r24
    2c84:	68 2f       	mov	r22, r24
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
	heart_layer(2, i >> 1);
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	86 95       	lsr	r24
    2c90:	68 2f       	mov	r22, r24
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
	heart_layer(3, i);
    2c98:	69 81       	ldd	r22, Y+1	; 0x01
    2c9a:	83 e0       	ldi	r24, 0x03	; 3
    2c9c:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
	heart_layer(4, i);
    2ca0:	69 81       	ldd	r22, Y+1	; 0x01
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
	heart_layer(5, i >> 1);
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	86 95       	lsr	r24
    2cac:	68 2f       	mov	r22, r24
    2cae:	85 e0       	ldi	r24, 0x05	; 5
    2cb0:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
	heart_layer(6, i >> 2);
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	86 95       	lsr	r24
    2cb8:	86 95       	lsr	r24
    2cba:	68 2f       	mov	r22, r24
    2cbc:	86 e0       	ldi	r24, 0x06	; 6
    2cbe:	0e 94 65 16 	call	0x2cca	; 0x2cca <heart_layer.1705>
}
    2cc2:	0f 90       	pop	r0
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <heart_layer.1705>:

static void heart_layer(uint8_t x, uint8_t raw_i) {
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <heart_layer.1705+0xa>
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <heart_layer.1705+0xc>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	6c 83       	std	Y+4, r22	; 0x04
	uint16_t intensity = weber_fechner(raw_i);
    2cde:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce0:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <weber_fechner>
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
	set_row(x, 0, 1, 2, intensity);
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	8c 01       	movw	r16, r24
    2cee:	22 e0       	ldi	r18, 0x02	; 2
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 0, 5, 6, intensity);
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	8c 01       	movw	r16, r24
    2d00:	26 e0       	ldi	r18, 0x06	; 6
    2d02:	45 e0       	ldi	r20, 0x05	; 5
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 1, 0, 7, intensity);
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	8c 01       	movw	r16, r24
    2d12:	27 e0       	ldi	r18, 0x07	; 7
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	61 e0       	ldi	r22, 0x01	; 1
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 2, 0, 7, intensity);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	8c 01       	movw	r16, r24
    2d24:	27 e0       	ldi	r18, 0x07	; 7
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	62 e0       	ldi	r22, 0x02	; 2
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 3, 0, 7, intensity);
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	8c 01       	movw	r16, r24
    2d36:	27 e0       	ldi	r18, 0x07	; 7
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	63 e0       	ldi	r22, 0x03	; 3
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 4, 1, 6, intensity);
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	8c 01       	movw	r16, r24
    2d48:	26 e0       	ldi	r18, 0x06	; 6
    2d4a:	41 e0       	ldi	r20, 0x01	; 1
    2d4c:	64 e0       	ldi	r22, 0x04	; 4
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 5, 2, 5, intensity);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	8c 01       	movw	r16, r24
    2d5a:	25 e0       	ldi	r18, 0x05	; 5
    2d5c:	42 e0       	ldi	r20, 0x02	; 2
    2d5e:	65 e0       	ldi	r22, 0x05	; 5
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
	set_row(x, 6, 3, 4, intensity);
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	8c 01       	movw	r16, r24
    2d6c:	24 e0       	ldi	r18, 0x04	; 4
    2d6e:	43 e0       	ldi	r20, 0x03	; 3
    2d70:	66 e0       	ldi	r22, 0x06	; 6
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	0e 94 c6 1b 	call	0x378c	; 0x378c <set_row>
}
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	08 95       	ret

00002d8a <sphere_shape>:

void sphere_shape(float xi, float yi, float zi, float rsq_min, float rsq_max, float fac)
{
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	a0 97       	sbiw	r28, 0x20	; 32
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	69 8b       	std	Y+17, r22	; 0x11
    2db0:	7a 8b       	std	Y+18, r23	; 0x12
    2db2:	8b 8b       	std	Y+19, r24	; 0x13
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	2d 8b       	std	Y+21, r18	; 0x15
    2db8:	3e 8b       	std	Y+22, r19	; 0x16
    2dba:	4f 8b       	std	Y+23, r20	; 0x17
    2dbc:	58 8f       	std	Y+24, r21	; 0x18
    2dbe:	e9 8e       	std	Y+25, r14	; 0x19
    2dc0:	fa 8e       	std	Y+26, r15	; 0x1a
    2dc2:	0b 8f       	std	Y+27, r16	; 0x1b
    2dc4:	1c 8f       	std	Y+28, r17	; 0x1c
    2dc6:	ad 8e       	std	Y+29, r10	; 0x1d
    2dc8:	be 8e       	std	Y+30, r11	; 0x1e
    2dca:	cf 8e       	std	Y+31, r12	; 0x1f
    2dcc:	d8 a2       	std	Y+32, r13	; 0x20
	for(float x = xi; x < LEDS_X + xi; x++) {
    2dce:	89 89       	ldd	r24, Y+17	; 0x11
    2dd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd2:	ab 89       	ldd	r26, Y+19	; 0x13
    2dd4:	bc 89       	ldd	r27, Y+20	; 0x14
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	ab 83       	std	Y+3, r26	; 0x03
    2ddc:	bc 83       	std	Y+4, r27	; 0x04
    2dde:	17 c1       	rjmp	.+558    	; 0x300e <sphere_shape+0x284>
		for(float y = yi; y < LEDS_Y + yi; y++) {
    2de0:	8d 89       	ldd	r24, Y+21	; 0x15
    2de2:	9e 89       	ldd	r25, Y+22	; 0x16
    2de4:	af 89       	ldd	r26, Y+23	; 0x17
    2de6:	b8 8d       	ldd	r27, Y+24	; 0x18
    2de8:	8d 83       	std	Y+5, r24	; 0x05
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	af 83       	std	Y+7, r26	; 0x07
    2dee:	b8 87       	std	Y+8, r27	; 0x08
    2df0:	e7 c0       	rjmp	.+462    	; 0x2fc0 <sphere_shape+0x236>
			for(float z = zi; z < LEDS_Z + zi; z++) {
    2df2:	89 8d       	ldd	r24, Y+25	; 0x19
    2df4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2df6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2df8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2dfa:	89 87       	std	Y+9, r24	; 0x09
    2dfc:	9a 87       	std	Y+10, r25	; 0x0a
    2dfe:	ab 87       	std	Y+11, r26	; 0x0b
    2e00:	bc 87       	std	Y+12, r27	; 0x0c
    2e02:	b7 c0       	rjmp	.+366    	; 0x2f72 <sphere_shape+0x1e8>
				float sq = x * x + y * y + z * z;
    2e04:	29 81       	ldd	r18, Y+1	; 0x01
    2e06:	3a 81       	ldd	r19, Y+2	; 0x02
    2e08:	4b 81       	ldd	r20, Y+3	; 0x03
    2e0a:	5c 81       	ldd	r21, Y+4	; 0x04
    2e0c:	69 81       	ldd	r22, Y+1	; 0x01
    2e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	7c 01       	movw	r14, r24
    2e1e:	8d 01       	movw	r16, r26
    2e20:	2d 81       	ldd	r18, Y+5	; 0x05
    2e22:	3e 81       	ldd	r19, Y+6	; 0x06
    2e24:	4f 81       	ldd	r20, Y+7	; 0x07
    2e26:	58 85       	ldd	r21, Y+8	; 0x08
    2e28:	6d 81       	ldd	r22, Y+5	; 0x05
    2e2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e2e:	98 85       	ldd	r25, Y+8	; 0x08
    2e30:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9c 01       	movw	r18, r24
    2e3a:	ad 01       	movw	r20, r26
    2e3c:	c8 01       	movw	r24, r16
    2e3e:	b7 01       	movw	r22, r14
    2e40:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	7c 01       	movw	r14, r24
    2e4a:	8d 01       	movw	r16, r26
    2e4c:	29 85       	ldd	r18, Y+9	; 0x09
    2e4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e50:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e52:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e54:	69 85       	ldd	r22, Y+9	; 0x09
    2e56:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e5c:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9c 01       	movw	r18, r24
    2e66:	ad 01       	movw	r20, r26
    2e68:	c8 01       	movw	r24, r16
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8d 87       	std	Y+13, r24	; 0x0d
    2e76:	9e 87       	std	Y+14, r25	; 0x0e
    2e78:	af 87       	std	Y+15, r26	; 0x0f
    2e7a:	b8 8b       	std	Y+16, r27	; 0x10

				if(rsq_min * fac < sq && sq < rsq_max * fac) {
    2e7c:	29 a9       	ldd	r18, Y+49	; 0x31
    2e7e:	3a a9       	ldd	r19, Y+50	; 0x32
    2e80:	4b a9       	ldd	r20, Y+51	; 0x33
    2e82:	5c a9       	ldd	r21, Y+52	; 0x34
    2e84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e86:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e8c:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e96:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e98:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e9a:	58 89       	ldd	r21, Y+16	; 0x10
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__cmpsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	0c f0       	brlt	.+2      	; 0x2eaa <sphere_shape+0x120>
    2ea8:	54 c0       	rjmp	.+168    	; 0x2f52 <sphere_shape+0x1c8>
    2eaa:	29 a9       	ldd	r18, Y+49	; 0x31
    2eac:	3a a9       	ldd	r19, Y+50	; 0x32
    2eae:	4b a9       	ldd	r20, Y+51	; 0x33
    2eb0:	5c a9       	ldd	r21, Y+52	; 0x34
    2eb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2eb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eba:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ec4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ec6:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ec8:	58 89       	ldd	r21, Y+16	; 0x10
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__gesf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	f4 f5       	brge	.+124    	; 0x2f52 <sphere_shape+0x1c8>
					set_led(x - xi, y - yi, z - zi, MAX_INTENSITY);
    2ed6:	29 8d       	ldd	r18, Y+25	; 0x19
    2ed8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2eda:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2edc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ede:	69 85       	ldd	r22, Y+9	; 0x09
    2ee0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee6:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__subsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	08 2f       	mov	r16, r24
    2efc:	2d 89       	ldd	r18, Y+21	; 0x15
    2efe:	3e 89       	ldd	r19, Y+22	; 0x16
    2f00:	4f 89       	ldd	r20, Y+23	; 0x17
    2f02:	58 8d       	ldd	r21, Y+24	; 0x18
    2f04:	6d 81       	ldd	r22, Y+5	; 0x05
    2f06:	7e 81       	ldd	r23, Y+6	; 0x06
    2f08:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0a:	98 85       	ldd	r25, Y+8	; 0x08
    2f0c:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__subsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	18 2f       	mov	r17, r24
    2f22:	29 89       	ldd	r18, Y+17	; 0x11
    2f24:	3a 89       	ldd	r19, Y+18	; 0x12
    2f26:	4b 89       	ldd	r20, Y+19	; 0x13
    2f28:	5c 89       	ldd	r21, Y+20	; 0x14
    2f2a:	69 81       	ldd	r22, Y+1	; 0x01
    2f2c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__subsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	2f ef       	ldi	r18, 0xFF	; 255
    2f48:	3f e0       	ldi	r19, 0x0F	; 15
    2f4a:	40 2f       	mov	r20, r16
    2f4c:	61 2f       	mov	r22, r17
    2f4e:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

void sphere_shape(float xi, float yi, float zi, float rsq_min, float rsq_max, float fac)
{
	for(float x = xi; x < LEDS_X + xi; x++) {
		for(float y = yi; y < LEDS_Y + yi; y++) {
			for(float z = zi; z < LEDS_Z + zi; z++) {
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	69 85       	ldd	r22, Y+9	; 0x09
    2f5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f60:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f62:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	89 87       	std	Y+9, r24	; 0x09
    2f6c:	9a 87       	std	Y+10, r25	; 0x0a
    2f6e:	ab 87       	std	Y+11, r26	; 0x0b
    2f70:	bc 87       	std	Y+12, r27	; 0x0c
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f82:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	29 85       	ldd	r18, Y+9	; 0x09
    2f8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f90:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__gesf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	0c f4       	brge	.+2      	; 0x2fa0 <sphere_shape+0x216>
    2f9e:	32 cf       	rjmp	.-412    	; 0x2e04 <sphere_shape+0x7a>
}

void sphere_shape(float xi, float yi, float zi, float rsq_min, float rsq_max, float fac)
{
	for(float x = xi; x < LEDS_X + xi; x++) {
		for(float y = yi; y < LEDS_Y + yi; y++) {
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    2faa:	7e 81       	ldd	r23, Y+6	; 0x06
    2fac:	8f 81       	ldd	r24, Y+7	; 0x07
    2fae:	98 85       	ldd	r25, Y+8	; 0x08
    2fb0:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	af 83       	std	Y+7, r26	; 0x07
    2fbe:	b8 87       	std	Y+8, r27	; 0x08
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fca:	7e 89       	ldd	r23, Y+22	; 0x16
    2fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fce:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd0:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fda:	3e 81       	ldd	r19, Y+6	; 0x06
    2fdc:	4f 81       	ldd	r20, Y+7	; 0x07
    2fde:	58 85       	ldd	r21, Y+8	; 0x08
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__gesf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	0c f4       	brge	.+2      	; 0x2fee <sphere_shape+0x264>
    2fec:	02 cf       	rjmp	.-508    	; 0x2df2 <sphere_shape+0x68>
	set_row(x, 6, 3, 4, intensity);
}

void sphere_shape(float xi, float yi, float zi, float rsq_min, float rsq_max, float fac)
{
	for(float x = xi; x < LEDS_X + xi; x++) {
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e8       	ldi	r20, 0x80	; 128
    2ff4:	5f e3       	ldi	r21, 0x3F	; 63
    2ff6:	69 81       	ldd	r22, Y+1	; 0x01
    2ff8:	7a 81       	ldd	r23, Y+2	; 0x02
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	9a 83       	std	Y+2, r25	; 0x02
    300a:	ab 83       	std	Y+3, r26	; 0x03
    300c:	bc 83       	std	Y+4, r27	; 0x04
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	69 89       	ldd	r22, Y+17	; 0x11
    3018:	7a 89       	ldd	r23, Y+18	; 0x12
    301a:	8b 89       	ldd	r24, Y+19	; 0x13
    301c:	9c 89       	ldd	r25, Y+20	; 0x14
    301e:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <__addsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	29 81       	ldd	r18, Y+1	; 0x01
    3028:	3a 81       	ldd	r19, Y+2	; 0x02
    302a:	4b 81       	ldd	r20, Y+3	; 0x03
    302c:	5c 81       	ldd	r21, Y+4	; 0x04
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__gesf2>
    3036:	18 16       	cp	r1, r24
    3038:	0c f4       	brge	.+2      	; 0x303c <sphere_shape+0x2b2>
    303a:	d2 ce       	rjmp	.-604    	; 0x2de0 <sphere_shape+0x56>
					set_led(x - xi, y - yi, z - zi, MAX_INTENSITY);
				}
			}
		}
	}
}
    303c:	a0 96       	adiw	r28, 0x20	; 32
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	bf 90       	pop	r11
    305a:	af 90       	pop	r10
    305c:	08 95       	ret

0000305e <line>:
 *
 * Reference: ftp://ftp.isc.org/pub/usenet/comp.sources.unix/volume26/line3d
 */
void line(uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2,
	uint16_t intensity)
{
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	0f 93       	push	r16
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	67 97       	sbiw	r28, 0x17	; 23
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	88 8b       	std	Y+16, r24	; 0x10
    307c:	69 8b       	std	Y+17, r22	; 0x11
    307e:	4a 8b       	std	Y+18, r20	; 0x12
    3080:	2b 8b       	std	Y+19, r18	; 0x13
    3082:	0c 8b       	std	Y+20, r16	; 0x14
    3084:	ed 8a       	std	Y+21, r14	; 0x15
    3086:	df 8a       	std	Y+23, r13	; 0x17
    3088:	ce 8a       	std	Y+22, r12	; 0x16
	uint8_t x, y, z, ax, ay, az;
	int8_t xd, yd, zd, dx, dy, dz, sx, sy, sz;

	dx = x2 - x1;
    308a:	9b 89       	ldd	r25, Y+19	; 0x13
    308c:	88 89       	ldd	r24, Y+16	; 0x10
    308e:	29 2f       	mov	r18, r25
    3090:	28 1b       	sub	r18, r24
    3092:	82 2f       	mov	r24, r18
    3094:	8f 83       	std	Y+7, r24	; 0x07
	dy = y2 - y1;
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	29 2f       	mov	r18, r25
    309c:	28 1b       	sub	r18, r24
    309e:	82 2f       	mov	r24, r18
    30a0:	88 87       	std	Y+8, r24	; 0x08
	dz = z2 - z1;
    30a2:	9d 89       	ldd	r25, Y+21	; 0x15
    30a4:	8a 89       	ldd	r24, Y+18	; 0x12
    30a6:	29 2f       	mov	r18, r25
    30a8:	28 1b       	sub	r18, r24
    30aa:	82 2f       	mov	r24, r18
    30ac:	89 87       	std	Y+9, r24	; 0x09

	ax = ABS(dx) << 1;
    30ae:	8f 81       	ldd	r24, Y+7	; 0x07
    30b0:	99 27       	eor	r25, r25
    30b2:	87 fd       	sbrc	r24, 7
    30b4:	90 95       	com	r25
    30b6:	99 23       	and	r25, r25
    30b8:	1c f4       	brge	.+6      	; 0x30c0 <line+0x62>
    30ba:	91 95       	neg	r25
    30bc:	81 95       	neg	r24
    30be:	91 09       	sbc	r25, r1
    30c0:	88 0f       	add	r24, r24
    30c2:	8a 87       	std	Y+10, r24	; 0x0a
	ay = ABS(dy) << 1;
    30c4:	88 85       	ldd	r24, Y+8	; 0x08
    30c6:	99 27       	eor	r25, r25
    30c8:	87 fd       	sbrc	r24, 7
    30ca:	90 95       	com	r25
    30cc:	99 23       	and	r25, r25
    30ce:	1c f4       	brge	.+6      	; 0x30d6 <line+0x78>
    30d0:	91 95       	neg	r25
    30d2:	81 95       	neg	r24
    30d4:	91 09       	sbc	r25, r1
    30d6:	88 0f       	add	r24, r24
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
	az = ABS(dz) << 1;
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	99 27       	eor	r25, r25
    30de:	87 fd       	sbrc	r24, 7
    30e0:	90 95       	com	r25
    30e2:	99 23       	and	r25, r25
    30e4:	1c f4       	brge	.+6      	; 0x30ec <line+0x8e>
    30e6:	91 95       	neg	r25
    30e8:	81 95       	neg	r24
    30ea:	91 09       	sbc	r25, r1
    30ec:	88 0f       	add	r24, r24
    30ee:	8c 87       	std	Y+12, r24	; 0x0c

	sx = ZSGN(dx);
    30f0:	8f 81       	ldd	r24, Y+7	; 0x07
    30f2:	88 23       	and	r24, r24
    30f4:	34 f0       	brlt	.+12     	; 0x3102 <line+0xa4>
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	9f 81       	ldd	r25, Y+7	; 0x07
    30fa:	19 16       	cp	r1, r25
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <line+0xa2>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <line+0xa6>
    3102:	8f ef       	ldi	r24, 0xFF	; 255
    3104:	8d 87       	std	Y+13, r24	; 0x0d
	sy = ZSGN(dy);
    3106:	88 85       	ldd	r24, Y+8	; 0x08
    3108:	88 23       	and	r24, r24
    310a:	34 f0       	brlt	.+12     	; 0x3118 <line+0xba>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	98 85       	ldd	r25, Y+8	; 0x08
    3110:	19 16       	cp	r1, r25
    3112:	0c f0       	brlt	.+2      	; 0x3116 <line+0xb8>
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	01 c0       	rjmp	.+2      	; 0x311a <line+0xbc>
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	8e 87       	std	Y+14, r24	; 0x0e
	sz = ZSGN(dz);
    311c:	89 85       	ldd	r24, Y+9	; 0x09
    311e:	88 23       	and	r24, r24
    3120:	34 f0       	brlt	.+12     	; 0x312e <line+0xd0>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	99 85       	ldd	r25, Y+9	; 0x09
    3126:	19 16       	cp	r1, r25
    3128:	0c f0       	brlt	.+2      	; 0x312c <line+0xce>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	01 c0       	rjmp	.+2      	; 0x3130 <line+0xd2>
    312e:	8f ef       	ldi	r24, 0xFF	; 255
    3130:	8f 87       	std	Y+15, r24	; 0x0f

	x = x1;
    3132:	88 89       	ldd	r24, Y+16	; 0x10
    3134:	89 83       	std	Y+1, r24	; 0x01
	y = y1;
    3136:	89 89       	ldd	r24, Y+17	; 0x11
    3138:	8a 83       	std	Y+2, r24	; 0x02
	z = z1;
    313a:	8a 89       	ldd	r24, Y+18	; 0x12
    313c:	8b 83       	std	Y+3, r24	; 0x03

	if(ax >= MAX(ay, az)) { /* x dominant */
    313e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	9b 85       	ldd	r25, Y+11	; 0x0b
    3146:	8c 85       	ldd	r24, Y+12	; 0x0c
    3148:	89 17       	cp	r24, r25
    314a:	08 f4       	brcc	.+2      	; 0x314e <line+0xf0>
    314c:	89 2f       	mov	r24, r25
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	28 17       	cp	r18, r24
    3154:	39 07       	cpc	r19, r25
    3156:	0c f4       	brge	.+2      	; 0x315a <line+0xfc>
    3158:	42 c0       	rjmp	.+132    	; 0x31de <line+0x180>
		yd = ay - (ax >> 1);
    315a:	8a 85       	ldd	r24, Y+10	; 0x0a
    315c:	86 95       	lsr	r24
    315e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3160:	29 2f       	mov	r18, r25
    3162:	28 1b       	sub	r18, r24
    3164:	82 2f       	mov	r24, r18
    3166:	8d 83       	std	Y+5, r24	; 0x05
		zd = az - (ax >> 1);
    3168:	8a 85       	ldd	r24, Y+10	; 0x0a
    316a:	86 95       	lsr	r24
    316c:	9c 85       	ldd	r25, Y+12	; 0x0c
    316e:	29 2f       	mov	r18, r25
    3170:	28 1b       	sub	r18, r24
    3172:	82 2f       	mov	r24, r18
    3174:	8e 83       	std	Y+6, r24	; 0x06

		for(;;) {
			set_led(x, y, z, intensity);
    3176:	8e 89       	ldd	r24, Y+22	; 0x16
    3178:	9f 89       	ldd	r25, Y+23	; 0x17
    317a:	9c 01       	movw	r18, r24
    317c:	4b 81       	ldd	r20, Y+3	; 0x03
    317e:	6a 81       	ldd	r22, Y+2	; 0x02
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

			if(x == x2) return;
    3186:	99 81       	ldd	r25, Y+1	; 0x01
    3188:	8b 89       	ldd	r24, Y+19	; 0x13
    318a:	98 17       	cp	r25, r24
    318c:	09 f4       	brne	.+2      	; 0x3190 <line+0x132>
    318e:	c6 c0       	rjmp	.+396    	; 0x331c <line+0x2be>

			if(yd >= 0) {
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	88 23       	and	r24, r24
    3194:	54 f0       	brlt	.+20     	; 0x31aa <line+0x14c>
				y += sy;
    3196:	8e 85       	ldd	r24, Y+14	; 0x0e
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	89 0f       	add	r24, r25
    319c:	8a 83       	std	Y+2, r24	; 0x02
				yd -= ax;
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a2:	29 2f       	mov	r18, r25
    31a4:	28 1b       	sub	r18, r24
    31a6:	82 2f       	mov	r24, r18
    31a8:	8d 83       	std	Y+5, r24	; 0x05
			}

			if(zd >= 0) {
    31aa:	8e 81       	ldd	r24, Y+6	; 0x06
    31ac:	88 23       	and	r24, r24
    31ae:	54 f0       	brlt	.+20     	; 0x31c4 <line+0x166>
				z += sz;
    31b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	89 0f       	add	r24, r25
    31b6:	8b 83       	std	Y+3, r24	; 0x03
				zd -= ax;
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    31bc:	29 2f       	mov	r18, r25
    31be:	28 1b       	sub	r18, r24
    31c0:	82 2f       	mov	r24, r18
    31c2:	8e 83       	std	Y+6, r24	; 0x06
			}

			x += sx;
    31c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c6:	99 81       	ldd	r25, Y+1	; 0x01
    31c8:	89 0f       	add	r24, r25
    31ca:	89 83       	std	Y+1, r24	; 0x01
			yd += ay;
    31cc:	9d 81       	ldd	r25, Y+5	; 0x05
    31ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    31d0:	89 0f       	add	r24, r25
    31d2:	8d 83       	std	Y+5, r24	; 0x05
			zd += az;
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    31d8:	89 0f       	add	r24, r25
    31da:	8e 83       	std	Y+6, r24	; 0x06
    31dc:	cc cf       	rjmp	.-104    	; 0x3176 <line+0x118>
		}
	}
	else if(ay >= MAX(ax, az)) { /* y dominant */
    31de:	8b 85       	ldd	r24, Y+11	; 0x0b
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e8:	89 17       	cp	r24, r25
    31ea:	08 f4       	brcc	.+2      	; 0x31ee <line+0x190>
    31ec:	89 2f       	mov	r24, r25
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	28 17       	cp	r18, r24
    31f4:	39 07       	cpc	r19, r25
    31f6:	0c f4       	brge	.+2      	; 0x31fa <line+0x19c>
    31f8:	42 c0       	rjmp	.+132    	; 0x327e <line+0x220>
		xd = ax - (ay >> 1);
    31fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    31fc:	86 95       	lsr	r24
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	29 2f       	mov	r18, r25
    3202:	28 1b       	sub	r18, r24
    3204:	82 2f       	mov	r24, r18
    3206:	8c 83       	std	Y+4, r24	; 0x04
		zd = az - (ay >> 1);
    3208:	8b 85       	ldd	r24, Y+11	; 0x0b
    320a:	86 95       	lsr	r24
    320c:	9c 85       	ldd	r25, Y+12	; 0x0c
    320e:	29 2f       	mov	r18, r25
    3210:	28 1b       	sub	r18, r24
    3212:	82 2f       	mov	r24, r18
    3214:	8e 83       	std	Y+6, r24	; 0x06

		for(;;) {
			set_led(x, y, z, intensity);
    3216:	8e 89       	ldd	r24, Y+22	; 0x16
    3218:	9f 89       	ldd	r25, Y+23	; 0x17
    321a:	9c 01       	movw	r18, r24
    321c:	4b 81       	ldd	r20, Y+3	; 0x03
    321e:	6a 81       	ldd	r22, Y+2	; 0x02
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

			if(y == y2) return;
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	8c 89       	ldd	r24, Y+20	; 0x14
    322a:	98 17       	cp	r25, r24
    322c:	09 f4       	brne	.+2      	; 0x3230 <line+0x1d2>
    322e:	76 c0       	rjmp	.+236    	; 0x331c <line+0x2be>

			if(xd >= 0) {
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	88 23       	and	r24, r24
    3234:	54 f0       	brlt	.+20     	; 0x324a <line+0x1ec>
				x += sx;
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	99 81       	ldd	r25, Y+1	; 0x01
    323a:	89 0f       	add	r24, r25
    323c:	89 83       	std	Y+1, r24	; 0x01
				xd -= ay;
    323e:	9c 81       	ldd	r25, Y+4	; 0x04
    3240:	8b 85       	ldd	r24, Y+11	; 0x0b
    3242:	29 2f       	mov	r18, r25
    3244:	28 1b       	sub	r18, r24
    3246:	82 2f       	mov	r24, r18
    3248:	8c 83       	std	Y+4, r24	; 0x04
			}

			if(zd >= 0) {
    324a:	8e 81       	ldd	r24, Y+6	; 0x06
    324c:	88 23       	and	r24, r24
    324e:	54 f0       	brlt	.+20     	; 0x3264 <line+0x206>
				z += sz;
    3250:	8f 85       	ldd	r24, Y+15	; 0x0f
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	89 0f       	add	r24, r25
    3256:	8b 83       	std	Y+3, r24	; 0x03
				zd -= ay;
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	8b 85       	ldd	r24, Y+11	; 0x0b
    325c:	29 2f       	mov	r18, r25
    325e:	28 1b       	sub	r18, r24
    3260:	82 2f       	mov	r24, r18
    3262:	8e 83       	std	Y+6, r24	; 0x06
			}

			y += sy;
    3264:	8e 85       	ldd	r24, Y+14	; 0x0e
    3266:	9a 81       	ldd	r25, Y+2	; 0x02
    3268:	89 0f       	add	r24, r25
    326a:	8a 83       	std	Y+2, r24	; 0x02
			xd += ax;
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
    326e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3270:	89 0f       	add	r24, r25
    3272:	8c 83       	std	Y+4, r24	; 0x04
			zd += az;
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	8c 85       	ldd	r24, Y+12	; 0x0c
    3278:	89 0f       	add	r24, r25
    327a:	8e 83       	std	Y+6, r24	; 0x06
    327c:	cc cf       	rjmp	.-104    	; 0x3216 <line+0x1b8>
		}
	}
	else if(az >= MAX(ax, ay)) { /* z dominant */
    327e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3280:	28 2f       	mov	r18, r24
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	9a 85       	ldd	r25, Y+10	; 0x0a
    3286:	8b 85       	ldd	r24, Y+11	; 0x0b
    3288:	89 17       	cp	r24, r25
    328a:	08 f4       	brcc	.+2      	; 0x328e <line+0x230>
    328c:	89 2f       	mov	r24, r25
    328e:	88 2f       	mov	r24, r24
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	28 17       	cp	r18, r24
    3294:	39 07       	cpc	r19, r25
    3296:	0c f4       	brge	.+2      	; 0x329a <line+0x23c>
    3298:	41 c0       	rjmp	.+130    	; 0x331c <line+0x2be>
		xd = ax - (az >> 1);
    329a:	8c 85       	ldd	r24, Y+12	; 0x0c
    329c:	86 95       	lsr	r24
    329e:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a0:	29 2f       	mov	r18, r25
    32a2:	28 1b       	sub	r18, r24
    32a4:	82 2f       	mov	r24, r18
    32a6:	8c 83       	std	Y+4, r24	; 0x04
		yd = ay - (az >> 1);
    32a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32aa:	86 95       	lsr	r24
    32ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ae:	29 2f       	mov	r18, r25
    32b0:	28 1b       	sub	r18, r24
    32b2:	82 2f       	mov	r24, r18
    32b4:	8d 83       	std	Y+5, r24	; 0x05

		for(;;) {
			set_led(x, y, z, intensity);
    32b6:	8e 89       	ldd	r24, Y+22	; 0x16
    32b8:	9f 89       	ldd	r25, Y+23	; 0x17
    32ba:	9c 01       	movw	r18, r24
    32bc:	4b 81       	ldd	r20, Y+3	; 0x03
    32be:	6a 81       	ldd	r22, Y+2	; 0x02
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>

			if(z == z2) return;
    32c6:	9b 81       	ldd	r25, Y+3	; 0x03
    32c8:	8d 89       	ldd	r24, Y+21	; 0x15
    32ca:	98 17       	cp	r25, r24
    32cc:	39 f1       	breq	.+78     	; 0x331c <line+0x2be>

			if(xd >= 0) {
    32ce:	8c 81       	ldd	r24, Y+4	; 0x04
    32d0:	88 23       	and	r24, r24
    32d2:	54 f0       	brlt	.+20     	; 0x32e8 <line+0x28a>
				x += sx;
    32d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d6:	99 81       	ldd	r25, Y+1	; 0x01
    32d8:	89 0f       	add	r24, r25
    32da:	89 83       	std	Y+1, r24	; 0x01
				xd -= az;
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	8c 85       	ldd	r24, Y+12	; 0x0c
    32e0:	29 2f       	mov	r18, r25
    32e2:	28 1b       	sub	r18, r24
    32e4:	82 2f       	mov	r24, r18
    32e6:	8c 83       	std	Y+4, r24	; 0x04
			}

			if(yd >= 0) {
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	88 23       	and	r24, r24
    32ec:	54 f0       	brlt	.+20     	; 0x3302 <line+0x2a4>
				y += sy;
    32ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	89 0f       	add	r24, r25
    32f4:	8a 83       	std	Y+2, r24	; 0x02
				yd -= az;
    32f6:	9d 81       	ldd	r25, Y+5	; 0x05
    32f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32fa:	29 2f       	mov	r18, r25
    32fc:	28 1b       	sub	r18, r24
    32fe:	82 2f       	mov	r24, r18
    3300:	8d 83       	std	Y+5, r24	; 0x05
			}

			z += sz;
    3302:	8f 85       	ldd	r24, Y+15	; 0x0f
    3304:	9b 81       	ldd	r25, Y+3	; 0x03
    3306:	89 0f       	add	r24, r25
    3308:	8b 83       	std	Y+3, r24	; 0x03
			xd += ax;
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	8a 85       	ldd	r24, Y+10	; 0x0a
    330e:	89 0f       	add	r24, r25
    3310:	8c 83       	std	Y+4, r24	; 0x04
			yd += ay;
    3312:	9d 81       	ldd	r25, Y+5	; 0x05
    3314:	8b 85       	ldd	r24, Y+11	; 0x0b
    3316:	89 0f       	add	r24, r25
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	cd cf       	rjmp	.-102    	; 0x32b6 <line+0x258>
		}
	}
}
    331c:	67 96       	adiw	r28, 0x17	; 23
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	0f 91       	pop	r16
    332e:	ef 90       	pop	r14
    3330:	df 90       	pop	r13
    3332:	cf 90       	pop	r12
    3334:	08 95       	ret

00003336 <cube_shape>:

void cube_shape(uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2,
	uint16_t intensity)
{
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	0f 93       	push	r16
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	28 97       	sbiw	r28, 0x08	; 8
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	6a 83       	std	Y+2, r22	; 0x02
    3356:	4b 83       	std	Y+3, r20	; 0x03
    3358:	2c 83       	std	Y+4, r18	; 0x04
    335a:	0d 83       	std	Y+5, r16	; 0x05
    335c:	ee 82       	std	Y+6, r14	; 0x06
    335e:	d8 86       	std	Y+8, r13	; 0x08
    3360:	cf 82       	std	Y+7, r12	; 0x07
	line(x1, y1, z1, x1, y1, z2, intensity);
    3362:	8f 81       	ldd	r24, Y+7	; 0x07
    3364:	98 85       	ldd	r25, Y+8	; 0x08
    3366:	6c 01       	movw	r12, r24
    3368:	ee 80       	ldd	r14, Y+6	; 0x06
    336a:	0a 81       	ldd	r16, Y+2	; 0x02
    336c:	29 81       	ldd	r18, Y+1	; 0x01
    336e:	4b 81       	ldd	r20, Y+3	; 0x03
    3370:	6a 81       	ldd	r22, Y+2	; 0x02
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x1, y1, z1, x2, y1, z1, intensity);
    3378:	8f 81       	ldd	r24, Y+7	; 0x07
    337a:	98 85       	ldd	r25, Y+8	; 0x08
    337c:	6c 01       	movw	r12, r24
    337e:	eb 80       	ldd	r14, Y+3	; 0x03
    3380:	0a 81       	ldd	r16, Y+2	; 0x02
    3382:	2c 81       	ldd	r18, Y+4	; 0x04
    3384:	4b 81       	ldd	r20, Y+3	; 0x03
    3386:	6a 81       	ldd	r22, Y+2	; 0x02
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x1, y1, z1, x1, y2, z1, intensity);
    338e:	8f 81       	ldd	r24, Y+7	; 0x07
    3390:	98 85       	ldd	r25, Y+8	; 0x08
    3392:	6c 01       	movw	r12, r24
    3394:	eb 80       	ldd	r14, Y+3	; 0x03
    3396:	0d 81       	ldd	r16, Y+5	; 0x05
    3398:	29 81       	ldd	r18, Y+1	; 0x01
    339a:	4b 81       	ldd	r20, Y+3	; 0x03
    339c:	6a 81       	ldd	r22, Y+2	; 0x02
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	0e 94 2f 18 	call	0x305e	; 0x305e <line>

	line(x2, y2, z2, x2, y2, z1, intensity);
    33a4:	8f 81       	ldd	r24, Y+7	; 0x07
    33a6:	98 85       	ldd	r25, Y+8	; 0x08
    33a8:	6c 01       	movw	r12, r24
    33aa:	eb 80       	ldd	r14, Y+3	; 0x03
    33ac:	0d 81       	ldd	r16, Y+5	; 0x05
    33ae:	2c 81       	ldd	r18, Y+4	; 0x04
    33b0:	4e 81       	ldd	r20, Y+6	; 0x06
    33b2:	6d 81       	ldd	r22, Y+5	; 0x05
    33b4:	8c 81       	ldd	r24, Y+4	; 0x04
    33b6:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x2, y2, z2, x2, y1, z2, intensity);
    33ba:	8f 81       	ldd	r24, Y+7	; 0x07
    33bc:	98 85       	ldd	r25, Y+8	; 0x08
    33be:	6c 01       	movw	r12, r24
    33c0:	ee 80       	ldd	r14, Y+6	; 0x06
    33c2:	0a 81       	ldd	r16, Y+2	; 0x02
    33c4:	2c 81       	ldd	r18, Y+4	; 0x04
    33c6:	4e 81       	ldd	r20, Y+6	; 0x06
    33c8:	6d 81       	ldd	r22, Y+5	; 0x05
    33ca:	8c 81       	ldd	r24, Y+4	; 0x04
    33cc:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x2, y2, z2, x1, y2, z2, intensity);
    33d0:	8f 81       	ldd	r24, Y+7	; 0x07
    33d2:	98 85       	ldd	r25, Y+8	; 0x08
    33d4:	6c 01       	movw	r12, r24
    33d6:	ee 80       	ldd	r14, Y+6	; 0x06
    33d8:	0d 81       	ldd	r16, Y+5	; 0x05
    33da:	29 81       	ldd	r18, Y+1	; 0x01
    33dc:	4e 81       	ldd	r20, Y+6	; 0x06
    33de:	6d 81       	ldd	r22, Y+5	; 0x05
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	0e 94 2f 18 	call	0x305e	; 0x305e <line>

	line(x1, y2, z1, x2, y2, z1, intensity);
    33e6:	8f 81       	ldd	r24, Y+7	; 0x07
    33e8:	98 85       	ldd	r25, Y+8	; 0x08
    33ea:	6c 01       	movw	r12, r24
    33ec:	eb 80       	ldd	r14, Y+3	; 0x03
    33ee:	0d 81       	ldd	r16, Y+5	; 0x05
    33f0:	2c 81       	ldd	r18, Y+4	; 0x04
    33f2:	4b 81       	ldd	r20, Y+3	; 0x03
    33f4:	6d 81       	ldd	r22, Y+5	; 0x05
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x1, y2, z1, x1, y2, z2, intensity);
    33fc:	8f 81       	ldd	r24, Y+7	; 0x07
    33fe:	98 85       	ldd	r25, Y+8	; 0x08
    3400:	6c 01       	movw	r12, r24
    3402:	ee 80       	ldd	r14, Y+6	; 0x06
    3404:	0d 81       	ldd	r16, Y+5	; 0x05
    3406:	29 81       	ldd	r18, Y+1	; 0x01
    3408:	4b 81       	ldd	r20, Y+3	; 0x03
    340a:	6d 81       	ldd	r22, Y+5	; 0x05
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x2, y1, z1, x2, y1, z2, intensity);
    3412:	8f 81       	ldd	r24, Y+7	; 0x07
    3414:	98 85       	ldd	r25, Y+8	; 0x08
    3416:	6c 01       	movw	r12, r24
    3418:	ee 80       	ldd	r14, Y+6	; 0x06
    341a:	0a 81       	ldd	r16, Y+2	; 0x02
    341c:	2c 81       	ldd	r18, Y+4	; 0x04
    341e:	4b 81       	ldd	r20, Y+3	; 0x03
    3420:	6a 81       	ldd	r22, Y+2	; 0x02
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x2, y1, z1, x2, y2, z1, intensity);
    3428:	8f 81       	ldd	r24, Y+7	; 0x07
    342a:	98 85       	ldd	r25, Y+8	; 0x08
    342c:	6c 01       	movw	r12, r24
    342e:	eb 80       	ldd	r14, Y+3	; 0x03
    3430:	0d 81       	ldd	r16, Y+5	; 0x05
    3432:	2c 81       	ldd	r18, Y+4	; 0x04
    3434:	4b 81       	ldd	r20, Y+3	; 0x03
    3436:	6a 81       	ldd	r22, Y+2	; 0x02
    3438:	8c 81       	ldd	r24, Y+4	; 0x04
    343a:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x1, y1, z2, x1, y2, z2, intensity);
    343e:	8f 81       	ldd	r24, Y+7	; 0x07
    3440:	98 85       	ldd	r25, Y+8	; 0x08
    3442:	6c 01       	movw	r12, r24
    3444:	ee 80       	ldd	r14, Y+6	; 0x06
    3446:	0d 81       	ldd	r16, Y+5	; 0x05
    3448:	29 81       	ldd	r18, Y+1	; 0x01
    344a:	4e 81       	ldd	r20, Y+6	; 0x06
    344c:	6a 81       	ldd	r22, Y+2	; 0x02
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
	line(x1, y1, z2, x2, x1, z2, intensity);
    3454:	8f 81       	ldd	r24, Y+7	; 0x07
    3456:	98 85       	ldd	r25, Y+8	; 0x08
    3458:	6c 01       	movw	r12, r24
    345a:	ee 80       	ldd	r14, Y+6	; 0x06
    345c:	09 81       	ldd	r16, Y+1	; 0x01
    345e:	2c 81       	ldd	r18, Y+4	; 0x04
    3460:	4e 81       	ldd	r20, Y+6	; 0x06
    3462:	6a 81       	ldd	r22, Y+2	; 0x02
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	0e 94 2f 18 	call	0x305e	; 0x305e <line>
}
    346a:	28 96       	adiw	r28, 0x08	; 8
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	0f 91       	pop	r16
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	08 95       	ret

00003484 <scroll_text>:
#define mb_pgm_get(a,b,progmem) progmem? pgm_get(a,b): a

static const uint8_t spacing = 8; // Seems like a good pick for this charset

void scroll_text(const char text[], bool progmem, int16_t offset, render_t f)
{
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	69 97       	sbiw	r28, 0x19	; 25
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	9c 8b       	std	Y+20, r25	; 0x14
    349c:	8b 8b       	std	Y+19, r24	; 0x13
    349e:	6d 8b       	std	Y+21, r22	; 0x15
    34a0:	5f 8b       	std	Y+23, r21	; 0x17
    34a2:	4e 8b       	std	Y+22, r20	; 0x16
    34a4:	39 8f       	std	Y+25, r19	; 0x19
    34a6:	28 8f       	std	Y+24, r18	; 0x18
	// text format is ZCL octet string, where the length is at byte 0
	uint8_t text_len = mb_pgm_get(*text++, byte, progmem);
    34a8:	8d 89       	ldd	r24, Y+21	; 0x15
    34aa:	88 23       	and	r24, r24
    34ac:	89 f0       	breq	.+34     	; 0x34d0 <scroll_text+0x4c>
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	9c 89       	ldd	r25, Y+20	; 0x14
    34b2:	9a 83       	std	Y+2, r25	; 0x02
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	8b 89       	ldd	r24, Y+19	; 0x13
    34b8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	9c 8b       	std	Y+20, r25	; 0x14
    34be:	8b 8b       	std	Y+19, r24	; 0x13
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	fc 01       	movw	r30, r24
    34c6:	14 91       	lpm	r17, Z+
    34c8:	1b 83       	std	Y+3, r17	; 0x03
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	28 2f       	mov	r18, r24
    34ce:	0a c0       	rjmp	.+20     	; 0x34e4 <scroll_text+0x60>
    34d0:	8b 89       	ldd	r24, Y+19	; 0x13
    34d2:	9c 89       	ldd	r25, Y+20	; 0x14
    34d4:	fc 01       	movw	r30, r24
    34d6:	80 81       	ld	r24, Z
    34d8:	28 2f       	mov	r18, r24
    34da:	8b 89       	ldd	r24, Y+19	; 0x13
    34dc:	9c 89       	ldd	r25, Y+20	; 0x14
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	9c 8b       	std	Y+20, r25	; 0x14
    34e2:	8b 8b       	std	Y+19, r24	; 0x13
    34e4:	2c 83       	std	Y+4, r18	; 0x04
	int16_t base_pos = (LEDS_X+1)-offset;
    34e6:	29 e0       	ldi	r18, 0x09	; 9
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	8e 89       	ldd	r24, Y+22	; 0x16
    34ec:	9f 89       	ldd	r25, Y+23	; 0x17
    34ee:	a9 01       	movw	r20, r18
    34f0:	48 1b       	sub	r20, r24
    34f2:	59 0b       	sbc	r21, r25
    34f4:	ca 01       	movw	r24, r20
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8d 83       	std	Y+5, r24	; 0x05
	int16_t i = -base_pos / spacing;
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	9e 81       	ldd	r25, Y+6	; 0x06
    34fe:	91 95       	neg	r25
    3500:	81 95       	neg	r24
    3502:	91 09       	sbc	r25, r1
    3504:	20 91 14 01 	lds	r18, 0x0114
    3508:	22 2f       	mov	r18, r18
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	b9 01       	movw	r22, r18
    350e:	0e 94 65 30 	call	0x60ca	; 0x60ca <__divmodhi4>
    3512:	9b 01       	movw	r18, r22
    3514:	38 87       	std	Y+8, r19	; 0x08
    3516:	2f 83       	std	Y+7, r18	; 0x07
	uint16_t pos = i*spacing + base_pos;
    3518:	80 91 14 01 	lds	r24, 0x0114
    351c:	48 2f       	mov	r20, r24
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	8f 81       	ldd	r24, Y+7	; 0x07
    3522:	98 85       	ldd	r25, Y+8	; 0x08
    3524:	48 9f       	mul	r20, r24
    3526:	90 01       	movw	r18, r0
    3528:	49 9f       	mul	r20, r25
    352a:	30 0d       	add	r19, r0
    352c:	58 9f       	mul	r21, r24
    352e:	30 0d       	add	r19, r0
    3530:	11 24       	eor	r1, r1
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	82 0f       	add	r24, r18
    3538:	93 1f       	adc	r25, r19
    353a:	9a 87       	std	Y+10, r25	; 0x0a
    353c:	89 87       	std	Y+9, r24	; 0x09

	// Render only two characters which fit to screen

	if (i >= 0 && i < text_len) {
    353e:	8f 81       	ldd	r24, Y+7	; 0x07
    3540:	98 85       	ldd	r25, Y+8	; 0x08
    3542:	99 23       	and	r25, r25
    3544:	6c f1       	brlt	.+90     	; 0x35a0 <scroll_text+0x11c>
    3546:	8c 81       	ldd	r24, Y+4	; 0x04
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	8f 81       	ldd	r24, Y+7	; 0x07
    354e:	98 85       	ldd	r25, Y+8	; 0x08
    3550:	82 17       	cp	r24, r18
    3552:	93 07       	cpc	r25, r19
    3554:	2c f5       	brge	.+74     	; 0x35a0 <scroll_text+0x11c>
		const char c = mb_pgm_get(text[i], byte, progmem);
    3556:	8d 89       	ldd	r24, Y+21	; 0x15
    3558:	88 23       	and	r24, r24
    355a:	79 f0       	breq	.+30     	; 0x357a <scroll_text+0xf6>
    355c:	8f 81       	ldd	r24, Y+7	; 0x07
    355e:	98 85       	ldd	r25, Y+8	; 0x08
    3560:	2b 89       	ldd	r18, Y+19	; 0x13
    3562:	3c 89       	ldd	r19, Y+20	; 0x14
    3564:	82 0f       	add	r24, r18
    3566:	93 1f       	adc	r25, r19
    3568:	9c 87       	std	Y+12, r25	; 0x0c
    356a:	8b 87       	std	Y+11, r24	; 0x0b
    356c:	8b 85       	ldd	r24, Y+11	; 0x0b
    356e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3570:	fc 01       	movw	r30, r24
    3572:	14 91       	lpm	r17, Z+
    3574:	1d 87       	std	Y+13, r17	; 0x0d
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	08 c0       	rjmp	.+16     	; 0x358a <scroll_text+0x106>
    357a:	8f 81       	ldd	r24, Y+7	; 0x07
    357c:	98 85       	ldd	r25, Y+8	; 0x08
    357e:	2b 89       	ldd	r18, Y+19	; 0x13
    3580:	3c 89       	ldd	r19, Y+20	; 0x14
    3582:	82 0f       	add	r24, r18
    3584:	93 1f       	adc	r25, r19
    3586:	fc 01       	movw	r30, r24
    3588:	80 81       	ld	r24, Z
    358a:	8e 87       	std	Y+14, r24	; 0x0e
		render_character(c, pos, f);
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	ee 85       	ldd	r30, Y+14	; 0x0e
    3592:	28 8d       	ldd	r18, Y+24	; 0x18
    3594:	39 8d       	ldd	r19, Y+25	; 0x19
    3596:	a9 01       	movw	r20, r18
    3598:	bc 01       	movw	r22, r24
    359a:	8e 2f       	mov	r24, r30
    359c:	0e 94 17 1b 	call	0x362e	; 0x362e <render_character>
	}

	if (i+1 >= 0 && i+1<text_len) {
    35a0:	8f 81       	ldd	r24, Y+7	; 0x07
    35a2:	98 85       	ldd	r25, Y+8	; 0x08
    35a4:	01 96       	adiw	r24, 0x01	; 1
    35a6:	99 23       	and	r25, r25
    35a8:	c4 f1       	brlt	.+112    	; 0x361a <scroll_text+0x196>
    35aa:	8f 81       	ldd	r24, Y+7	; 0x07
    35ac:	98 85       	ldd	r25, Y+8	; 0x08
    35ae:	9c 01       	movw	r18, r24
    35b0:	2f 5f       	subi	r18, 0xFF	; 255
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	8c 81       	ldd	r24, Y+4	; 0x04
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	28 17       	cp	r18, r24
    35bc:	39 07       	cpc	r19, r25
    35be:	6c f5       	brge	.+90     	; 0x361a <scroll_text+0x196>
		const char c = mb_pgm_get(text[i+1], byte, progmem);
    35c0:	8d 89       	ldd	r24, Y+21	; 0x15
    35c2:	88 23       	and	r24, r24
    35c4:	81 f0       	breq	.+32     	; 0x35e6 <scroll_text+0x162>
    35c6:	8f 81       	ldd	r24, Y+7	; 0x07
    35c8:	98 85       	ldd	r25, Y+8	; 0x08
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	2b 89       	ldd	r18, Y+19	; 0x13
    35ce:	3c 89       	ldd	r19, Y+20	; 0x14
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	98 8b       	std	Y+16, r25	; 0x10
    35d6:	8f 87       	std	Y+15, r24	; 0x0f
    35d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35da:	98 89       	ldd	r25, Y+16	; 0x10
    35dc:	fc 01       	movw	r30, r24
    35de:	14 91       	lpm	r17, Z+
    35e0:	19 8b       	std	Y+17, r17	; 0x11
    35e2:	89 89       	ldd	r24, Y+17	; 0x11
    35e4:	09 c0       	rjmp	.+18     	; 0x35f8 <scroll_text+0x174>
    35e6:	8f 81       	ldd	r24, Y+7	; 0x07
    35e8:	98 85       	ldd	r25, Y+8	; 0x08
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	2b 89       	ldd	r18, Y+19	; 0x13
    35ee:	3c 89       	ldd	r19, Y+20	; 0x14
    35f0:	82 0f       	add	r24, r18
    35f2:	93 1f       	adc	r25, r19
    35f4:	fc 01       	movw	r30, r24
    35f6:	80 81       	ld	r24, Z
    35f8:	8a 8b       	std	Y+18, r24	; 0x12
		render_character(c, pos+spacing, f);
    35fa:	80 91 14 01 	lds	r24, 0x0114
    35fe:	28 2f       	mov	r18, r24
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	89 85       	ldd	r24, Y+9	; 0x09
    3604:	9a 85       	ldd	r25, Y+10	; 0x0a
    3606:	82 0f       	add	r24, r18
    3608:	93 1f       	adc	r25, r19
    360a:	ea 89       	ldd	r30, Y+18	; 0x12
    360c:	28 8d       	ldd	r18, Y+24	; 0x18
    360e:	39 8d       	ldd	r19, Y+25	; 0x19
    3610:	a9 01       	movw	r20, r18
    3612:	bc 01       	movw	r22, r24
    3614:	8e 2f       	mov	r24, r30
    3616:	0e 94 17 1b 	call	0x362e	; 0x362e <render_character>
	}
}
    361a:	69 96       	adiw	r28, 0x19	; 25
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	08 95       	ret

0000362e <render_character>:

void render_character(uint8_t index, int16_t offset, render_t f)
{
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	65 97       	sbiw	r28, 0x15	; 21
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	89 8b       	std	Y+17, r24	; 0x11
    3646:	7b 8b       	std	Y+19, r23	; 0x13
    3648:	6a 8b       	std	Y+18, r22	; 0x12
    364a:	5d 8b       	std	Y+21, r21	; 0x15
    364c:	4c 8b       	std	Y+20, r20	; 0x14
	uint8_t bitmap[8];

	// Read character from the font in PROGMEM
	for (uint8_t i=0; i<8; i++) {
    364e:	19 82       	std	Y+1, r1	; 0x01
    3650:	25 c0       	rjmp	.+74     	; 0x369c <render_character+0x6e>
		bitmap[i] = pgm_get(font8x8_basic[index][i],byte);
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	88 2f       	mov	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	29 89       	ldd	r18, Y+17	; 0x11
    365a:	42 2f       	mov	r20, r18
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	29 81       	ldd	r18, Y+1	; 0x01
    3660:	22 2f       	mov	r18, r18
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	44 0f       	add	r20, r20
    3666:	55 1f       	adc	r21, r21
    3668:	44 0f       	add	r20, r20
    366a:	55 1f       	adc	r21, r21
    366c:	44 0f       	add	r20, r20
    366e:	55 1f       	adc	r21, r21
    3670:	24 0f       	add	r18, r20
    3672:	35 1f       	adc	r19, r21
    3674:	27 54       	subi	r18, 0x47	; 71
    3676:	39 4f       	sbci	r19, 0xF9	; 249
    3678:	3d 83       	std	Y+5, r19	; 0x05
    367a:	2c 83       	std	Y+4, r18	; 0x04
    367c:	2c 81       	ldd	r18, Y+4	; 0x04
    367e:	3d 81       	ldd	r19, Y+5	; 0x05
    3680:	f9 01       	movw	r30, r18
    3682:	14 91       	lpm	r17, Z+
    3684:	1e 83       	std	Y+6, r17	; 0x06
    3686:	4e 81       	ldd	r20, Y+6	; 0x06
    3688:	9e 01       	movw	r18, r28
    368a:	27 5f       	subi	r18, 0xF7	; 247
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	82 0f       	add	r24, r18
    3690:	93 1f       	adc	r25, r19
    3692:	fc 01       	movw	r30, r24
    3694:	40 83       	st	Z, r20
void render_character(uint8_t index, int16_t offset, render_t f)
{
	uint8_t bitmap[8];

	// Read character from the font in PROGMEM
	for (uint8_t i=0; i<8; i++) {
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	8f 5f       	subi	r24, 0xFF	; 255
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	88 30       	cpi	r24, 0x08	; 8
    36a0:	c0 f2       	brcs	.-80     	; 0x3652 <render_character+0x24>
		bitmap[i] = pgm_get(font8x8_basic[index][i],byte);
	}

	for(uint8_t x = 0; x < 8; x++) {
    36a2:	1a 82       	std	Y+2, r1	; 0x02
    36a4:	3c c0       	rjmp	.+120    	; 0x371e <render_character+0xf0>
		for(uint8_t y = 0; y < 8; y++) {
    36a6:	1b 82       	std	Y+3, r1	; 0x03
    36a8:	34 c0       	rjmp	.+104    	; 0x3712 <render_character+0xe4>
			int8_t loc = x - offset;
    36aa:	8a 89       	ldd	r24, Y+18	; 0x12
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	f9 2f       	mov	r31, r25
    36b0:	f8 1b       	sub	r31, r24
    36b2:	8f 2f       	mov	r24, r31
    36b4:	8f 83       	std	Y+7, r24	; 0x07

			if(loc < 0 || loc >= 8) continue;
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	88 23       	and	r24, r24
    36ba:	3c f1       	brlt	.+78     	; 0x370a <render_character+0xdc>
    36bc:	8f 81       	ldd	r24, Y+7	; 0x07
    36be:	88 30       	cpi	r24, 0x08	; 8
    36c0:	24 f5       	brge	.+72     	; 0x370a <render_character+0xdc>

			int8_t set = bitmap[y] & 1 << loc;
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	88 2f       	mov	r24, r24
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	9e 01       	movw	r18, r28
    36ca:	27 5f       	subi	r18, 0xF7	; 247
    36cc:	3f 4f       	sbci	r19, 0xFF	; 255
    36ce:	82 0f       	add	r24, r18
    36d0:	93 1f       	adc	r25, r19
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	48 2f       	mov	r20, r24
    36d8:	8f 81       	ldd	r24, Y+7	; 0x07
    36da:	28 2f       	mov	r18, r24
    36dc:	33 27       	eor	r19, r19
    36de:	27 fd       	sbrc	r18, 7
    36e0:	30 95       	com	r19
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	02 2e       	mov	r0, r18
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <render_character+0xc0>
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	0a 94       	dec	r0
    36f0:	e2 f7       	brpl	.-8      	; 0x36ea <render_character+0xbc>
    36f2:	84 23       	and	r24, r20
    36f4:	88 87       	std	Y+8, r24	; 0x08

			if(set) f(x, y);
    36f6:	88 85       	ldd	r24, Y+8	; 0x08
    36f8:	88 23       	and	r24, r24
    36fa:	41 f0       	breq	.+16     	; 0x370c <render_character+0xde>
    36fc:	2c 89       	ldd	r18, Y+20	; 0x14
    36fe:	3d 89       	ldd	r19, Y+21	; 0x15
    3700:	6b 81       	ldd	r22, Y+3	; 0x03
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	f9 01       	movw	r30, r18
    3706:	09 95       	icall
    3708:	01 c0       	rjmp	.+2      	; 0x370c <render_character+0xde>

	for(uint8_t x = 0; x < 8; x++) {
		for(uint8_t y = 0; y < 8; y++) {
			int8_t loc = x - offset;

			if(loc < 0 || loc >= 8) continue;
    370a:	00 00       	nop
	for (uint8_t i=0; i<8; i++) {
		bitmap[i] = pgm_get(font8x8_basic[index][i],byte);
	}

	for(uint8_t x = 0; x < 8; x++) {
		for(uint8_t y = 0; y < 8; y++) {
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	8b 83       	std	Y+3, r24	; 0x03
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	88 30       	cpi	r24, 0x08	; 8
    3716:	48 f2       	brcs	.-110    	; 0x36aa <render_character+0x7c>
	// Read character from the font in PROGMEM
	for (uint8_t i=0; i<8; i++) {
		bitmap[i] = pgm_get(font8x8_basic[index][i],byte);
	}

	for(uint8_t x = 0; x < 8; x++) {
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	8a 83       	std	Y+2, r24	; 0x02
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	88 30       	cpi	r24, 0x08	; 8
    3722:	08 f2       	brcs	.-126    	; 0x36a6 <render_character+0x78>
			int8_t set = bitmap[y] & 1 << loc;

			if(set) f(x, y);
		}
	}
}
    3724:	65 96       	adiw	r28, 0x15	; 21
    3726:	0f b6       	in	r0, 0x3f	; 63
    3728:	f8 94       	cli
    372a:	de bf       	out	0x3e, r29	; 62
    372c:	0f be       	out	0x3f, r0	; 63
    372e:	cd bf       	out	0x3d, r28	; 61
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	08 95       	ret

00003738 <render_yz>:

void render_yz(uint8_t x, uint8_t y) {
    3738:	cf 93       	push	r28
    373a:	df 93       	push	r29
    373c:	00 d0       	rcall	.+0      	; 0x373e <render_yz+0x6>
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	89 83       	std	Y+1, r24	; 0x01
    3744:	6a 83       	std	Y+2, r22	; 0x02
	set_led(7, x, y, MAX_INTENSITY);
    3746:	2f ef       	ldi	r18, 0xFF	; 255
    3748:	3f e0       	ldi	r19, 0x0F	; 15
    374a:	4a 81       	ldd	r20, Y+2	; 0x02
    374c:	69 81       	ldd	r22, Y+1	; 0x01
    374e:	87 e0       	ldi	r24, 0x07	; 7
    3750:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	08 95       	ret

0000375e <render_xy>:

void render_xy(uint8_t x, uint8_t y) {
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	00 d0       	rcall	.+0      	; 0x3764 <render_xy+0x6>
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	6a 83       	std	Y+2, r22	; 0x02
	set_led(LEDS_X - x - 1, 7, y, MAX_INTENSITY);
    376c:	97 e0       	ldi	r25, 0x07	; 7
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	29 2f       	mov	r18, r25
    3772:	28 1b       	sub	r18, r24
    3774:	82 2f       	mov	r24, r18
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	3f e0       	ldi	r19, 0x0F	; 15
    377a:	4a 81       	ldd	r20, Y+2	; 0x02
    377c:	67 e0       	ldi	r22, 0x07	; 7
    377e:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <set_row>:

/* Sensor values are stored in this struct */ 
sensors_t sensors = {MAX_INTENSITY};

void set_row(uint8_t x, uint8_t z, uint8_t y1, uint8_t y2, uint16_t intensity)
{
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	27 97       	sbiw	r28, 0x07	; 7
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	8a 83       	std	Y+2, r24	; 0x02
    37a6:	6b 83       	std	Y+3, r22	; 0x03
    37a8:	4c 83       	std	Y+4, r20	; 0x04
    37aa:	2d 83       	std	Y+5, r18	; 0x05
    37ac:	1f 83       	std	Y+7, r17	; 0x07
    37ae:	0e 83       	std	Y+6, r16	; 0x06
	for(uint8_t i = y1; i <= y2; i++) {
    37b0:	8c 81       	ldd	r24, Y+4	; 0x04
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	0b c0       	rjmp	.+22     	; 0x37cc <set_row+0x40>
		set_led_8_8_12(x, i, z, intensity);
    37b6:	8e 81       	ldd	r24, Y+6	; 0x06
    37b8:	9f 81       	ldd	r25, Y+7	; 0x07
    37ba:	9c 01       	movw	r18, r24
    37bc:	4b 81       	ldd	r20, Y+3	; 0x03
    37be:	69 81       	ldd	r22, Y+1	; 0x01
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
/* Sensor values are stored in this struct */ 
sensors_t sensors = {MAX_INTENSITY};

void set_row(uint8_t x, uint8_t z, uint8_t y1, uint8_t y2, uint16_t intensity)
{
	for(uint8_t i = y1; i <= y2; i++) {
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	8f 5f       	subi	r24, 0xFF	; 255
    37ca:	89 83       	std	Y+1, r24	; 0x01
    37cc:	99 81       	ldd	r25, Y+1	; 0x01
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	89 17       	cp	r24, r25
    37d2:	88 f7       	brcc	.-30     	; 0x37b6 <set_row+0x2a>
		set_led_8_8_12(x, i, z, intensity);
	}
}
    37d4:	27 96       	adiw	r28, 0x07	; 7
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	08 95       	ret

000037ea <set_z>:

void set_z(uint8_t x, uint8_t y, uint16_t intensity)
{
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	29 97       	sbiw	r28, 0x09	; 9
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	8e 83       	std	Y+6, r24	; 0x06
    3800:	6f 83       	std	Y+7, r22	; 0x07
    3802:	59 87       	std	Y+9, r21	; 0x09
    3804:	48 87       	std	Y+8, r20	; 0x08
	assert(intensity <= MAX_2D_PLOT_INTENSITY);

	// Do linear interpolation (two voxels per x-y pair)
	uint8_t lower_z = intensity >> GS_DEPTH;
    3806:	88 85       	ldd	r24, Y+8	; 0x08
    3808:	99 85       	ldd	r25, Y+9	; 0x09
    380a:	89 2f       	mov	r24, r25
    380c:	99 27       	eor	r25, r25
    380e:	82 95       	swap	r24
    3810:	8f 70       	andi	r24, 0x0F	; 15
    3812:	89 83       	std	Y+1, r24	; 0x01
	uint16_t upper_i = intensity & MAX_INTENSITY;
    3814:	88 85       	ldd	r24, Y+8	; 0x08
    3816:	99 85       	ldd	r25, Y+9	; 0x09
    3818:	9f 70       	andi	r25, 0x0F	; 15
    381a:	9b 83       	std	Y+3, r25	; 0x03
    381c:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t lower_i = MAX_INTENSITY - upper_i;
    381e:	2f ef       	ldi	r18, 0xFF	; 255
    3820:	3f e0       	ldi	r19, 0x0F	; 15
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	a9 01       	movw	r20, r18
    3828:	48 1b       	sub	r20, r24
    382a:	59 0b       	sbc	r21, r25
    382c:	ca 01       	movw	r24, r20
    382e:	9d 83       	std	Y+5, r25	; 0x05
    3830:	8c 83       	std	Y+4, r24	; 0x04
	
	set_led_8_8_12(x,y,lower_z,lower_i);
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	9d 81       	ldd	r25, Y+5	; 0x05
    3836:	9c 01       	movw	r18, r24
    3838:	49 81       	ldd	r20, Y+1	; 0x01
    383a:	6f 81       	ldd	r22, Y+7	; 0x07
    383c:	8e 81       	ldd	r24, Y+6	; 0x06
    383e:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
	set_led_8_8_12(x,y,lower_z + 1,upper_i);
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	48 2f       	mov	r20, r24
    3846:	4f 5f       	subi	r20, 0xFF	; 255
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	9c 01       	movw	r18, r24
    384e:	6f 81       	ldd	r22, Y+7	; 0x07
    3850:	8e 81       	ldd	r24, Y+6	; 0x06
    3852:	0e 94 34 1c 	call	0x3868	; 0x3868 <set_led_8_8_12>
}
    3856:	29 96       	adiw	r28, 0x09	; 9
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	08 95       	ret

00003868 <set_led_8_8_12>:

void set_led_8_8_12(uint8_t x, uint8_t y, uint8_t z, uint16_t i)
{
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	2b 97       	sbiw	r28, 0x0b	; 11
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	8f 83       	std	Y+7, r24	; 0x07
    387e:	68 87       	std	Y+8, r22	; 0x08
    3880:	49 87       	std	Y+9, r20	; 0x09
    3882:	3b 87       	std	Y+11, r19	; 0x0b
    3884:	2a 87       	std	Y+10, r18	; 0x0a
	 * GS_DEPTH is 12. This calculates bit position efficiently by
	 * using bit shifts. With AVR's 8-bit registers this is
	 * optimized to do first operations with uint8_t's and do the
	 * last shift with uint16_t because it's the only one which
	 * overflows from 8 bit register. */
	const uint16_t bit_pos = 12 * (x | y << 3 | (uint16_t)z << 6);
    3886:	8f 81       	ldd	r24, Y+7	; 0x07
    3888:	28 2f       	mov	r18, r24
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	88 85       	ldd	r24, Y+8	; 0x08
    388e:	88 2f       	mov	r24, r24
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	82 2b       	or	r24, r18
    38a0:	93 2b       	or	r25, r19
    38a2:	9c 01       	movw	r18, r24
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	00 24       	eor	r0, r0
    38ac:	96 95       	lsr	r25
    38ae:	87 95       	ror	r24
    38b0:	07 94       	ror	r0
    38b2:	96 95       	lsr	r25
    38b4:	87 95       	ror	r24
    38b6:	07 94       	ror	r0
    38b8:	98 2f       	mov	r25, r24
    38ba:	80 2d       	mov	r24, r0
    38bc:	28 2b       	or	r18, r24
    38be:	39 2b       	or	r19, r25
    38c0:	c9 01       	movw	r24, r18
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	82 0f       	add	r24, r18
    38c8:	93 1f       	adc	r25, r19
    38ca:	88 0f       	add	r24, r24
    38cc:	99 1f       	adc	r25, r25
    38ce:	88 0f       	add	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	9c 83       	std	Y+4, r25	; 0x04
    38d4:	8b 83       	std	Y+3, r24	; 0x03

	/* Byte position is done simply by truncating the last 8 bits
	 * of the data. Variable raw is filled with the data. */
	const uint16_t byte_pos = bit_pos >> 3;
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	9c 81       	ldd	r25, Y+4	; 0x04
    38da:	96 95       	lsr	r25
    38dc:	87 95       	ror	r24
    38de:	96 95       	lsr	r25
    38e0:	87 95       	ror	r24
    38e2:	96 95       	lsr	r25
    38e4:	87 95       	ror	r24
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
	assert(byte_pos < GS_BUF_BYTES);
	uint16_t raw = (gs_buf_back[byte_pos] << 8) | gs_buf_back[byte_pos+1];
    38ea:	20 91 02 01 	lds	r18, 0x0102
    38ee:	30 91 03 01 	lds	r19, 0x0103
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	82 0f       	add	r24, r18
    38f8:	93 1f       	adc	r25, r19
    38fa:	fc 01       	movw	r30, r24
    38fc:	80 81       	ld	r24, Z
    38fe:	88 2f       	mov	r24, r24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	38 2f       	mov	r19, r24
    3904:	22 27       	eor	r18, r18
    3906:	40 91 02 01 	lds	r20, 0x0102
    390a:	50 91 03 01 	lds	r21, 0x0103
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	84 0f       	add	r24, r20
    3916:	95 1f       	adc	r25, r21
    3918:	fc 01       	movw	r30, r24
    391a:	80 81       	ld	r24, Z
    391c:	88 2f       	mov	r24, r24
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	82 2b       	or	r24, r18
    3922:	93 2b       	or	r25, r19
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01

	/* If 12-bit value starts from the beginning of the data
	 * (bit_pos is dividable by 8) then we put the data starting
	 * from MSB, otherwise we start from MSB - 4 bits. */
	if (bit_pos & 0x7) raw = (raw & 0xf000) | i;
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	9c 81       	ldd	r25, Y+4	; 0x04
    392c:	87 70       	andi	r24, 0x07	; 7
    392e:	99 27       	eor	r25, r25
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	61 f0       	breq	.+24     	; 0x394c <set_led_8_8_12+0xe4>
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	9c 01       	movw	r18, r24
    393a:	22 27       	eor	r18, r18
    393c:	30 7f       	andi	r19, 0xF0	; 240
    393e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3940:	9b 85       	ldd	r25, Y+11	; 0x0b
    3942:	82 2b       	or	r24, r18
    3944:	93 2b       	or	r25, r19
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	11 c0       	rjmp	.+34     	; 0x396e <set_led_8_8_12+0x106>
	else raw = (raw & 0x000f) | (i << 4);
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	9c 01       	movw	r18, r24
    3952:	2f 70       	andi	r18, 0x0F	; 15
    3954:	33 27       	eor	r19, r19
    3956:	8a 85       	ldd	r24, Y+10	; 0x0a
    3958:	9b 85       	ldd	r25, Y+11	; 0x0b
    395a:	82 95       	swap	r24
    395c:	92 95       	swap	r25
    395e:	90 7f       	andi	r25, 0xF0	; 240
    3960:	98 27       	eor	r25, r24
    3962:	80 7f       	andi	r24, 0xF0	; 240
    3964:	98 27       	eor	r25, r24
    3966:	82 2b       	or	r24, r18
    3968:	93 2b       	or	r25, r19
    396a:	9a 83       	std	Y+2, r25	; 0x02
    396c:	89 83       	std	Y+1, r24	; 0x01

	/* Store data back to buffer */
	gs_buf_back[byte_pos] = raw >> 8;
    396e:	20 91 02 01 	lds	r18, 0x0102
    3972:	30 91 03 01 	lds	r19, 0x0103
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	82 0f       	add	r24, r18
    397c:	93 1f       	adc	r25, r19
    397e:	29 81       	ldd	r18, Y+1	; 0x01
    3980:	3a 81       	ldd	r19, Y+2	; 0x02
    3982:	23 2f       	mov	r18, r19
    3984:	33 27       	eor	r19, r19
    3986:	fc 01       	movw	r30, r24
    3988:	20 83       	st	Z, r18
	gs_buf_back[byte_pos+1] = raw;
    398a:	20 91 02 01 	lds	r18, 0x0102
    398e:	30 91 03 01 	lds	r19, 0x0103
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	82 0f       	add	r24, r18
    399a:	93 1f       	adc	r25, r19
    399c:	29 81       	ldd	r18, Y+1	; 0x01
    399e:	fc 01       	movw	r30, r24
    39a0:	20 83       	st	Z, r18
}
    39a2:	2b 96       	adiw	r28, 0x0b	; 11
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	08 95       	ret

000039b4 <get_led_wrap>:

uint16_t get_led_wrap(int8_t x, int8_t y, int8_t z)
{
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <get_led_wrap+0x6>
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <get_led_wrap+0x8>
    39bc:	00 d0       	rcall	.+0      	; 0x39be <get_led_wrap+0xa>
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	8c 83       	std	Y+4, r24	; 0x04
    39c4:	6d 83       	std	Y+5, r22	; 0x05
    39c6:	4e 83       	std	Y+6, r20	; 0x06
	// Assert it is not too high (for the same reason)
	assert(x < 2*LEDS_X);
	assert(y < 2*LEDS_Y);
	assert(z < 2*LEDS_Z);

	uint8_t rx = x < 0? LEDS_X + x: x >= LEDS_X? x-LEDS_X: x;
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	88 23       	and	r24, r24
    39cc:	1c f4       	brge	.+6      	; 0x39d4 <get_led_wrap+0x20>
    39ce:	8c 81       	ldd	r24, Y+4	; 0x04
    39d0:	88 5f       	subi	r24, 0xF8	; 248
    39d2:	07 c0       	rjmp	.+14     	; 0x39e2 <get_led_wrap+0x2e>
    39d4:	8c 81       	ldd	r24, Y+4	; 0x04
    39d6:	88 30       	cpi	r24, 0x08	; 8
    39d8:	1c f0       	brlt	.+6      	; 0x39e0 <get_led_wrap+0x2c>
    39da:	8c 81       	ldd	r24, Y+4	; 0x04
    39dc:	88 50       	subi	r24, 0x08	; 8
    39de:	01 c0       	rjmp	.+2      	; 0x39e2 <get_led_wrap+0x2e>
    39e0:	8c 81       	ldd	r24, Y+4	; 0x04
    39e2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t ry = y < 0? LEDS_Y + y: y >= LEDS_Y? y-LEDS_Y: y;
    39e4:	8d 81       	ldd	r24, Y+5	; 0x05
    39e6:	88 23       	and	r24, r24
    39e8:	1c f4       	brge	.+6      	; 0x39f0 <get_led_wrap+0x3c>
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	88 5f       	subi	r24, 0xF8	; 248
    39ee:	07 c0       	rjmp	.+14     	; 0x39fe <get_led_wrap+0x4a>
    39f0:	8d 81       	ldd	r24, Y+5	; 0x05
    39f2:	88 30       	cpi	r24, 0x08	; 8
    39f4:	1c f0       	brlt	.+6      	; 0x39fc <get_led_wrap+0x48>
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	88 50       	subi	r24, 0x08	; 8
    39fa:	01 c0       	rjmp	.+2      	; 0x39fe <get_led_wrap+0x4a>
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t rz = z < 0? LEDS_Z + z: z >= LEDS_Z? z-LEDS_Z: z;
    3a00:	8e 81       	ldd	r24, Y+6	; 0x06
    3a02:	88 23       	and	r24, r24
    3a04:	1c f4       	brge	.+6      	; 0x3a0c <get_led_wrap+0x58>
    3a06:	8e 81       	ldd	r24, Y+6	; 0x06
    3a08:	88 5f       	subi	r24, 0xF8	; 248
    3a0a:	07 c0       	rjmp	.+14     	; 0x3a1a <get_led_wrap+0x66>
    3a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0e:	88 30       	cpi	r24, 0x08	; 8
    3a10:	1c f0       	brlt	.+6      	; 0x3a18 <get_led_wrap+0x64>
    3a12:	8e 81       	ldd	r24, Y+6	; 0x06
    3a14:	88 50       	subi	r24, 0x08	; 8
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <get_led_wrap+0x66>
    3a18:	8e 81       	ldd	r24, Y+6	; 0x06
    3a1a:	8b 83       	std	Y+3, r24	; 0x03

	return get_led(rx, ry, rz);
    3a1c:	4b 81       	ldd	r20, Y+3	; 0x03
    3a1e:	6a 81       	ldd	r22, Y+2	; 0x02
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <get_led_8_8_12>
}
    3a26:	26 96       	adiw	r28, 0x06	; 6
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

00003a38 <get_led_8_8_12>:

uint16_t get_led_8_8_12(uint8_t x, uint8_t y, uint8_t z)
{
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	29 97       	sbiw	r28, 0x09	; 9
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	8f 83       	std	Y+7, r24	; 0x07
    3a4e:	68 87       	std	Y+8, r22	; 0x08
    3a50:	49 87       	std	Y+9, r20	; 0x09
	 * GS_DEPTH is 12. This calculates bit position efficiently by
	 * using bit shifts. With AVR's 8-bit registers this is
	 * optimized to do first operations with uint8_t's and do the
	 * last shift with uint16_t because it's the only one which
	 * overflows from 8 bit register. */
	const uint16_t bit_pos = 12 * (x | y << 3 | (uint16_t)z << 6);
    3a52:	8f 81       	ldd	r24, Y+7	; 0x07
    3a54:	28 2f       	mov	r18, r24
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	88 85       	ldd	r24, Y+8	; 0x08
    3a5a:	88 2f       	mov	r24, r24
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	82 2b       	or	r24, r18
    3a6c:	93 2b       	or	r25, r19
    3a6e:	9c 01       	movw	r18, r24
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	88 2f       	mov	r24, r24
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	00 24       	eor	r0, r0
    3a78:	96 95       	lsr	r25
    3a7a:	87 95       	ror	r24
    3a7c:	07 94       	ror	r0
    3a7e:	96 95       	lsr	r25
    3a80:	87 95       	ror	r24
    3a82:	07 94       	ror	r0
    3a84:	98 2f       	mov	r25, r24
    3a86:	80 2d       	mov	r24, r0
    3a88:	28 2b       	or	r18, r24
    3a8a:	39 2b       	or	r19, r25
    3a8c:	c9 01       	movw	r24, r18
    3a8e:	88 0f       	add	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	82 0f       	add	r24, r18
    3a94:	93 1f       	adc	r25, r19
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	9a 83       	std	Y+2, r25	; 0x02
    3aa0:	89 83       	std	Y+1, r24	; 0x01

	/* Byte position is done simply by truncating the last 8 bits
	 * of the data. Variable raw is filled with the data. */
	const uint16_t byte_pos = bit_pos >> 3;
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa6:	96 95       	lsr	r25
    3aa8:	87 95       	ror	r24
    3aaa:	96 95       	lsr	r25
    3aac:	87 95       	ror	r24
    3aae:	96 95       	lsr	r25
    3ab0:	87 95       	ror	r24
    3ab2:	9c 83       	std	Y+4, r25	; 0x04
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
	assert(byte_pos < GS_BUF_BYTES);
	uint16_t raw = (gs_buf_front[byte_pos] << 8) | gs_buf_front[byte_pos+1];
    3ab6:	20 91 00 01 	lds	r18, 0x0100
    3aba:	30 91 01 01 	lds	r19, 0x0101
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac2:	82 0f       	add	r24, r18
    3ac4:	93 1f       	adc	r25, r19
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 81       	ld	r24, Z
    3aca:	88 2f       	mov	r24, r24
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	38 2f       	mov	r19, r24
    3ad0:	22 27       	eor	r18, r18
    3ad2:	40 91 00 01 	lds	r20, 0x0100
    3ad6:	50 91 01 01 	lds	r21, 0x0101
    3ada:	8b 81       	ldd	r24, Y+3	; 0x03
    3adc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ade:	01 96       	adiw	r24, 0x01	; 1
    3ae0:	84 0f       	add	r24, r20
    3ae2:	95 1f       	adc	r25, r21
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	80 81       	ld	r24, Z
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	82 2b       	or	r24, r18
    3aee:	93 2b       	or	r25, r19
    3af0:	9e 83       	std	Y+6, r25	; 0x06
    3af2:	8d 83       	std	Y+5, r24	; 0x05

	/* If 12-bit value starts from the beginning of the data
	 * (bit_pos is dividable by 8) then we get data starting from
	 * MSB, otherwise we get from MSB - 4 bits. */
	return (bit_pos & 0x7) ? raw & 0x0fff : raw >> 4;
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	9a 81       	ldd	r25, Y+2	; 0x02
    3af8:	87 70       	andi	r24, 0x07	; 7
    3afa:	99 27       	eor	r25, r25
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	21 f0       	breq	.+8      	; 0x3b08 <get_led_8_8_12+0xd0>
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
    3b04:	9f 70       	andi	r25, 0x0F	; 15
    3b06:	08 c0       	rjmp	.+16     	; 0x3b18 <get_led_8_8_12+0xe0>
    3b08:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0c:	92 95       	swap	r25
    3b0e:	82 95       	swap	r24
    3b10:	8f 70       	andi	r24, 0x0F	; 15
    3b12:	89 27       	eor	r24, r25
    3b14:	9f 70       	andi	r25, 0x0F	; 15
    3b16:	89 27       	eor	r24, r25
}
    3b18:	29 96       	adiw	r28, 0x09	; 9
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	08 95       	ret

00003b2a <iterate_xy>:

void iterate_xy(iterate_xy_t f)
{
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <iterate_xy+0x6>
    3b30:	00 d0       	rcall	.+0      	; 0x3b32 <iterate_xy+0x8>
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	9c 83       	std	Y+4, r25	; 0x04
    3b38:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8_t x = 0; x < LEDS_X; x++) {
    3b3a:	19 82       	std	Y+1, r1	; 0x01
    3b3c:	11 c0       	rjmp	.+34     	; 0x3b60 <iterate_xy+0x36>
		for(uint8_t y = 0; y < LEDS_Y; y++) {
    3b3e:	1a 82       	std	Y+2, r1	; 0x02
    3b40:	09 c0       	rjmp	.+18     	; 0x3b54 <iterate_xy+0x2a>
			f(x, y);
    3b42:	2b 81       	ldd	r18, Y+3	; 0x03
    3b44:	3c 81       	ldd	r19, Y+4	; 0x04
    3b46:	6a 81       	ldd	r22, Y+2	; 0x02
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	f9 01       	movw	r30, r18
    3b4c:	09 95       	icall
}

void iterate_xy(iterate_xy_t f)
{
	for(uint8_t x = 0; x < LEDS_X; x++) {
		for(uint8_t y = 0; y < LEDS_Y; y++) {
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	8f 5f       	subi	r24, 0xFF	; 255
    3b52:	8a 83       	std	Y+2, r24	; 0x02
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	88 30       	cpi	r24, 0x08	; 8
    3b58:	a0 f3       	brcs	.-24     	; 0x3b42 <iterate_xy+0x18>
	return (bit_pos & 0x7) ? raw & 0x0fff : raw >> 4;
}

void iterate_xy(iterate_xy_t f)
{
	for(uint8_t x = 0; x < LEDS_X; x++) {
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	88 30       	cpi	r24, 0x08	; 8
    3b64:	60 f3       	brcs	.-40     	; 0x3b3e <iterate_xy+0x14>
		for(uint8_t y = 0; y < LEDS_Y; y++) {
			f(x, y);
		}
	}
}
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	08 95       	ret

00003b74 <iterate_xyz>:

void iterate_xyz(iterate_xyz_t f)
{
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <iterate_xyz+0x6>
    3b7a:	00 d0       	rcall	.+0      	; 0x3b7c <iterate_xyz+0x8>
    3b7c:	1f 92       	push	r1
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	9d 83       	std	Y+5, r25	; 0x05
    3b84:	8c 83       	std	Y+4, r24	; 0x04
	for(uint8_t x = 0; x < LEDS_X; x++) {
    3b86:	19 82       	std	Y+1, r1	; 0x01
    3b88:	1a c0       	rjmp	.+52     	; 0x3bbe <iterate_xyz+0x4a>
		for(uint8_t y = 0; y < LEDS_Y; y++) {
    3b8a:	1a 82       	std	Y+2, r1	; 0x02
    3b8c:	12 c0       	rjmp	.+36     	; 0x3bb2 <iterate_xyz+0x3e>
			for(uint8_t z = 0; z < LEDS_Z; z++) {
    3b8e:	1b 82       	std	Y+3, r1	; 0x03
    3b90:	0a c0       	rjmp	.+20     	; 0x3ba6 <iterate_xyz+0x32>
				f(x, y, z);
    3b92:	2c 81       	ldd	r18, Y+4	; 0x04
    3b94:	3d 81       	ldd	r19, Y+5	; 0x05
    3b96:	4b 81       	ldd	r20, Y+3	; 0x03
    3b98:	6a 81       	ldd	r22, Y+2	; 0x02
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	f9 01       	movw	r30, r18
    3b9e:	09 95       	icall

void iterate_xyz(iterate_xyz_t f)
{
	for(uint8_t x = 0; x < LEDS_X; x++) {
		for(uint8_t y = 0; y < LEDS_Y; y++) {
			for(uint8_t z = 0; z < LEDS_Z; z++) {
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	88 30       	cpi	r24, 0x08	; 8
    3baa:	98 f3       	brcs	.-26     	; 0x3b92 <iterate_xyz+0x1e>
}

void iterate_xyz(iterate_xyz_t f)
{
	for(uint8_t x = 0; x < LEDS_X; x++) {
		for(uint8_t y = 0; y < LEDS_Y; y++) {
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	8f 5f       	subi	r24, 0xFF	; 255
    3bb0:	8a 83       	std	Y+2, r24	; 0x02
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	88 30       	cpi	r24, 0x08	; 8
    3bb6:	58 f3       	brcs	.-42     	; 0x3b8e <iterate_xyz+0x1a>
	}
}

void iterate_xyz(iterate_xyz_t f)
{
	for(uint8_t x = 0; x < LEDS_X; x++) {
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	8f 5f       	subi	r24, 0xFF	; 255
    3bbc:	89 83       	std	Y+1, r24	; 0x01
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	88 30       	cpi	r24, 0x08	; 8
    3bc2:	18 f3       	brcs	.-58     	; 0x3b8a <iterate_xyz+0x16>
			for(uint8_t z = 0; z < LEDS_Z; z++) {
				f(x, y, z);
			}
		}
	}
}
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	df 91       	pop	r29
    3bd0:	cf 91       	pop	r28
    3bd2:	08 95       	ret

00003bd4 <clear_buffer>:

void clear_buffer(void)
{
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
	memset(gs_buf_back,0,GS_BUF_BYTES);
    3bdc:	80 91 02 01 	lds	r24, 0x0102
    3be0:	90 91 03 01 	lds	r25, 0x0103
    3be4:	40 e0       	ldi	r20, 0x00	; 0
    3be6:	53 e0       	ldi	r21, 0x03	; 3
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	0e 94 07 31 	call	0x620e	; 0x620e <memset>
}
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	08 95       	ret

00003bf6 <weber_fechner>:
#include "../../pgmspace.h"

/* Pre-calculated Weber–Fechner table generated by helpers/WeberFechner.hs */
const uint16_t weber_fechner_table[] PROGMEM = {0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,20,20,21,21,21,22,22,23,23,23,24,24,25,26,26,27,27,28,28,29,30,30,31,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,54,56,57,59,61,62,64,66,68,70,72,74,76,78,81,83,85,88,91,93,96,99,102,105,108,112,115,118,122,126,130,134,138,142,147,151,156,161,166,171,176,182,188,193,200,206,212,219,226,233,241,248,256,265,273,282,291,300,310,320,330,341,352,363,375,387,400,412,426,440,454,469,484,500,516,533,550,568,587,606,625,646,667,689,711,735,759,784,809,836,863,891,921,951,982,1014,1048,1082,1118,1154,1192,1232,1272,1314,1357,1402,1448,1496,1545,1596,1649,1703,1759,1817,1877,1939,2003,2069,2137,2208,2281,2356,2434,2514,2597,2683,2772,2863,2958,3056,3157,3261,3369,3480,3595,3714,3837,3964,4095};

uint16_t weber_fechner(uint8_t i) {
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <weber_fechner+0xe>
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <weber_fechner+0x10>
    3c06:	1f 92       	push	r1
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
	return pgm_get(weber_fechner_table[i],word);
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	88 2f       	mov	r24, r24
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	87 54       	subi	r24, 0x47	; 71
    3c1a:	95 4f       	sbci	r25, 0xF5	; 245
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	9a 81       	ldd	r25, Y+2	; 0x02
    3c24:	8c 01       	movw	r16, r24
    3c26:	f8 01       	movw	r30, r16
    3c28:	e5 90       	lpm	r14, Z+
    3c2a:	f4 90       	lpm	r15, Z+
    3c2c:	8f 01       	movw	r16, r30
    3c2e:	fc 82       	std	Y+4, r15	; 0x04
    3c30:	eb 82       	std	Y+3, r14	; 0x03
    3c32:	1a 83       	std	Y+2, r17	; 0x02
    3c34:	09 83       	std	Y+1, r16	; 0x01
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	1f 91       	pop	r17
    3c4a:	0f 91       	pop	r16
    3c4c:	ff 90       	pop	r15
    3c4e:	ef 90       	pop	r14
    3c50:	08 95       	ret

00003c52 <__iCliRetVal.1858>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    cli();
    3c5a:	f8 94       	cli
    return 1;
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
}
    3c5e:	df 91       	pop	r29
    3c60:	cf 91       	pop	r28
    3c62:	08 95       	ret

00003c64 <__iSeiParam.1862>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	00 d0       	rcall	.+0      	; 0x3c6a <__iSeiParam.1862+0x6>
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
    sei();
    3c72:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	08 95       	ret

00003c7e <adc_init>:

uint8_t curr_channel = 0;
uint16_t latest_conv_results[CHANNEL_COUNT];

void adc_init()
{
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
	// disable digital inputs of ADC0 ... ADCn
	// see e.g. http://www.openmusiclabs.com/learning/digital/atmega-adc/
	DIDR0 = DIDR0_MASK;
    3c86:	8e e7       	ldi	r24, 0x7E	; 126
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	23 e0       	ldi	r18, 0x03	; 3
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	20 83       	st	Z, r18

	// AREF = AVcc
	ADMUX = (1 << REFS0);
    3c90:	8c e7       	ldi	r24, 0x7C	; 124
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	20 e4       	ldi	r18, 0x40	; 64
    3c96:	fc 01       	movw	r30, r24
    3c98:	20 83       	st	Z, r18

	// Enable ADC and set prescaler
	ADCSRA = _BV(ADEN) | ADC_PRESCALER;
    3c9a:	8a e7       	ldi	r24, 0x7A	; 122
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	27 e8       	ldi	r18, 0x87	; 135
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	20 83       	st	Z, r18
}
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	08 95       	ret

00003caa <adc_get>:
	return READ_ADC_RESULT;
}
#endif

uint16_t adc_get(uint8_t channel)
{
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	00 d0       	rcall	.+0      	; 0x3cb0 <adc_get+0x6>
    3cb0:	00 d0       	rcall	.+0      	; 0x3cb2 <adc_get+0x8>
    3cb2:	1f 92       	push	r1
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t ret_val;

	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3cba:	1c 82       	std	Y+4, r1	; 0x04
    3cbc:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__iCliRetVal.1858>
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
    3cc2:	0d c0       	rjmp	.+26     	; 0x3cde <adc_get+0x34>
		ret_val = latest_conv_results[channel];
    3cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc6:	88 2f       	mov	r24, r24
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	88 0f       	add	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	8d 5b       	subi	r24, 0xBD	; 189
    3cd0:	98 4f       	sbci	r25, 0xF8	; 248
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01

uint16_t adc_get(uint8_t channel)
{
	uint16_t ret_val;

	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3cdc:	1b 82       	std	Y+3, r1	; 0x03
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	88 23       	and	r24, r24
    3ce2:	81 f7       	brne	.-32     	; 0x3cc4 <adc_get+0x1a>
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	04 96       	adiw	r24, 0x04	; 4
    3ce8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__iSeiParam.1862>
		ret_val = latest_conv_results[channel];
	}
	return ret_val;
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <adc_start>:

void adc_start(void)
{
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
	adc_init();
    3d08:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <adc_init>

	curr_channel = 0;
    3d0c:	10 92 42 07 	sts	0x0742, r1
	ADCSRA |= _BV(ADSC) | _BV(ADIE);
    3d10:	8a e7       	ldi	r24, 0x7A	; 122
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	2a e7       	ldi	r18, 0x7A	; 122
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	f9 01       	movw	r30, r18
    3d1a:	20 81       	ld	r18, Z
    3d1c:	28 64       	ori	r18, 0x48	; 72
    3d1e:	fc 01       	movw	r30, r24
    3d20:	20 83       	st	Z, r18
}
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	08 95       	ret

00003d28 <__vector_21>:
{
	ADCSRA &= ~(_BV(ADSC) | _BV(ADIE));
}

ISR(ADC_vect)
{
    3d28:	1f 92       	push	r1
    3d2a:	0f 92       	push	r0
    3d2c:	00 90 5f 00 	lds	r0, 0x005F
    3d30:	0f 92       	push	r0
    3d32:	11 24       	eor	r1, r1
    3d34:	2f 93       	push	r18
    3d36:	3f 93       	push	r19
    3d38:	4f 93       	push	r20
    3d3a:	5f 93       	push	r21
    3d3c:	8f 93       	push	r24
    3d3e:	9f 93       	push	r25
    3d40:	ef 93       	push	r30
    3d42:	ff 93       	push	r31
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
	latest_conv_results[curr_channel] = READ_ADC_RESULT;
    3d4c:	80 91 42 07 	lds	r24, 0x0742
    3d50:	88 2f       	mov	r24, r24
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	28 e7       	ldi	r18, 0x78	; 120
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	f9 01       	movw	r30, r18
    3d5a:	20 81       	ld	r18, Z
    3d5c:	42 2f       	mov	r20, r18
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	29 e7       	ldi	r18, 0x79	; 121
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	f9 01       	movw	r30, r18
    3d66:	20 81       	ld	r18, Z
    3d68:	22 2f       	mov	r18, r18
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	32 2f       	mov	r19, r18
    3d6e:	22 27       	eor	r18, r18
    3d70:	24 2b       	or	r18, r20
    3d72:	35 2b       	or	r19, r21
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	8d 5b       	subi	r24, 0xBD	; 189
    3d7a:	98 4f       	sbci	r25, 0xF8	; 248
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	31 83       	std	Z+1, r19	; 0x01
    3d80:	20 83       	st	Z, r18

	curr_channel++;
    3d82:	80 91 42 07 	lds	r24, 0x0742
    3d86:	8f 5f       	subi	r24, 0xFF	; 255
    3d88:	80 93 42 07 	sts	0x0742, r24
	if (curr_channel >= CHANNEL_COUNT)
    3d8c:	80 91 42 07 	lds	r24, 0x0742
    3d90:	82 30       	cpi	r24, 0x02	; 2
    3d92:	10 f0       	brcs	.+4      	; 0x3d98 <__vector_21+0x70>
		curr_channel = 0;
    3d94:	10 92 42 07 	sts	0x0742, r1

	ADMUX = (ADMUX & 0xe0) | curr_channel;
    3d98:	8c e7       	ldi	r24, 0x7C	; 124
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	2c e7       	ldi	r18, 0x7C	; 124
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	f9 01       	movw	r30, r18
    3da2:	20 81       	ld	r18, Z
    3da4:	32 2f       	mov	r19, r18
    3da6:	30 7e       	andi	r19, 0xE0	; 224
    3da8:	20 91 42 07 	lds	r18, 0x0742
    3dac:	23 2b       	or	r18, r19
    3dae:	fc 01       	movw	r30, r24
    3db0:	20 83       	st	Z, r18

	//start the next conversion
	ADCSRA |= _BV(ADSC);
    3db2:	8a e7       	ldi	r24, 0x7A	; 122
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	2a e7       	ldi	r18, 0x7A	; 122
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	f9 01       	movw	r30, r18
    3dbc:	20 81       	ld	r18, Z
    3dbe:	20 64       	ori	r18, 0x40	; 64
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	20 83       	st	Z, r18
}
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	ff 91       	pop	r31
    3dca:	ef 91       	pop	r30
    3dcc:	9f 91       	pop	r25
    3dce:	8f 91       	pop	r24
    3dd0:	5f 91       	pop	r21
    3dd2:	4f 91       	pop	r20
    3dd4:	3f 91       	pop	r19
    3dd6:	2f 91       	pop	r18
    3dd8:	0f 90       	pop	r0
    3dda:	00 92 5f 00 	sts	0x005F, r0
    3dde:	0f 90       	pop	r0
    3de0:	1f 90       	pop	r1
    3de2:	18 95       	reti

00003de4 <__iCliRetVal.1882>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    cli();
    3dec:	f8 94       	cli
    return 1;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
}
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	08 95       	ret

00003df6 <__iSeiParam.1886>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	00 d0       	rcall	.+0      	; 0x3dfc <__iSeiParam.1886+0x6>
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	9a 83       	std	Y+2, r25	; 0x02
    3e02:	89 83       	std	Y+1, r24	; 0x01
    sei();
    3e04:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <stop_simulation_periodically.1889>:

/* Dividing 8 ms interval with 125 to get exactly 1 second */
#define POSIX_DIVIDER 125

/* Trick to support simulator stopping every 25 fps */
static void stop_simulation_periodically(void) {
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
#ifdef SIMU
	if (ticks_volatile % 5 == 0) {
		asm volatile("break");
	}
#endif
}
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	08 95       	ret

00003e1e <__vector_7>:

/**
 * Timer interrupt increments RTC and tick counter
 */
ISR(TIMER2_COMPA_vect)
{
    3e1e:	1f 92       	push	r1
    3e20:	0f 92       	push	r0
    3e22:	00 90 5f 00 	lds	r0, 0x005F
    3e26:	0f 92       	push	r0
    3e28:	11 24       	eor	r1, r1
    3e2a:	2f 93       	push	r18
    3e2c:	3f 93       	push	r19
    3e2e:	4f 93       	push	r20
    3e30:	5f 93       	push	r21
    3e32:	6f 93       	push	r22
    3e34:	7f 93       	push	r23
    3e36:	8f 93       	push	r24
    3e38:	9f 93       	push	r25
    3e3a:	af 93       	push	r26
    3e3c:	bf 93       	push	r27
    3e3e:	ef 93       	push	r30
    3e40:	ff 93       	push	r31
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
	/* Tick counter for effects. Stop incrementing after maximum
	 * is reached to avoid messing the effect */
	if (ticks_volatile != ~0)
    3e4a:	80 91 47 07 	lds	r24, 0x0747
    3e4e:	90 91 48 07 	lds	r25, 0x0748
    3e52:	8f 3f       	cpi	r24, 0xFF	; 255
    3e54:	2f ef       	ldi	r18, 0xFF	; 255
    3e56:	92 07       	cpc	r25, r18
    3e58:	49 f0       	breq	.+18     	; 0x3e6c <__vector_7+0x4e>
		ticks_volatile++;
    3e5a:	80 91 47 07 	lds	r24, 0x0747
    3e5e:	90 91 48 07 	lds	r25, 0x0748
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	90 93 48 07 	sts	0x0748, r25
    3e68:	80 93 47 07 	sts	0x0747, r24

	stop_simulation_periodically();
    3e6c:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <stop_simulation_periodically.1889>

	// Run real time clock if it is set
	if (!--rtc.div && is_time_valid()) {
    3e70:	80 91 b4 07 	lds	r24, 0x07B4
    3e74:	81 50       	subi	r24, 0x01	; 1
    3e76:	80 93 b4 07 	sts	0x07B4, r24
    3e7a:	88 23       	and	r24, r24
    3e7c:	01 f5       	brne	.+64     	; 0x3ebe <__vector_7+0xa0>
    3e7e:	0e 94 56 20 	call	0x40ac	; 0x40ac <is_time_valid.1893>
    3e82:	88 23       	and	r24, r24
    3e84:	e1 f0       	breq	.+56     	; 0x3ebe <__vector_7+0xa0>
		rtc.div = POSIX_DIVIDER;
    3e86:	8d e7       	ldi	r24, 0x7D	; 125
    3e88:	80 93 b4 07 	sts	0x07B4, r24
		rtc.time++;
    3e8c:	80 91 b0 07 	lds	r24, 0x07B0
    3e90:	90 91 b1 07 	lds	r25, 0x07B1
    3e94:	a0 91 b2 07 	lds	r26, 0x07B2
    3e98:	b0 91 b3 07 	lds	r27, 0x07B3
    3e9c:	01 96       	adiw	r24, 0x01	; 1
    3e9e:	a1 1d       	adc	r26, r1
    3ea0:	b1 1d       	adc	r27, r1
    3ea2:	80 93 b0 07 	sts	0x07B0, r24
    3ea6:	90 93 b1 07 	sts	0x07B1, r25
    3eaa:	a0 93 b2 07 	sts	0x07B2, r26
    3eae:	b0 93 b3 07 	sts	0x07B3, r27

		// Update checksum
		rtc.cksum = calc_posix_time_cksum();
    3eb2:	0e 94 2f 20 	call	0x405e	; 0x405e <calc_posix_time_cksum.1891>
    3eb6:	80 93 b5 07 	sts	0x07B5, r24

		/* ATTENTION! Running of cron enables interrupts. This
		 * must be last line of interrupt handler! */
		enable_interrupts_and_run_cron();
    3eba:	0e 94 66 20 	call	0x40cc	; 0x40cc <enable_interrupts_and_run_cron.1895>
	}
}
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	ff 91       	pop	r31
    3ec4:	ef 91       	pop	r30
    3ec6:	bf 91       	pop	r27
    3ec8:	af 91       	pop	r26
    3eca:	9f 91       	pop	r25
    3ecc:	8f 91       	pop	r24
    3ece:	7f 91       	pop	r23
    3ed0:	6f 91       	pop	r22
    3ed2:	5f 91       	pop	r21
    3ed4:	4f 91       	pop	r20
    3ed6:	3f 91       	pop	r19
    3ed8:	2f 91       	pop	r18
    3eda:	0f 90       	pop	r0
    3edc:	00 92 5f 00 	sts	0x005F, r0
    3ee0:	0f 90       	pop	r0
    3ee2:	1f 90       	pop	r1
    3ee4:	18 95       	reti

00003ee6 <centisecs>:

uint16_t centisecs(void) {
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <centisecs+0x6>
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <centisecs+0x8>
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
	uint16_t copy_of_ticks;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3ef2:	1c 82       	std	Y+4, r1	; 0x04
    3ef4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__iCliRetVal.1882>
    3ef8:	8b 83       	std	Y+3, r24	; 0x03
    3efa:	07 c0       	rjmp	.+14     	; 0x3f0a <centisecs+0x24>
		copy_of_ticks = ticks_volatile;
    3efc:	80 91 47 07 	lds	r24, 0x0747
    3f00:	90 91 48 07 	lds	r25, 0x0748
    3f04:	9a 83       	std	Y+2, r25	; 0x02
    3f06:	89 83       	std	Y+1, r24	; 0x01
	}
}

uint16_t centisecs(void) {
	uint16_t copy_of_ticks;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3f08:	1b 82       	std	Y+3, r1	; 0x03
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	88 23       	and	r24, r24
    3f0e:	b1 f7       	brne	.-20     	; 0x3efc <centisecs+0x16>
    3f10:	ce 01       	movw	r24, r28
    3f12:	04 96       	adiw	r24, 0x04	; 4
    3f14:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__iSeiParam.1886>
		copy_of_ticks = ticks_volatile;
	}
	return copy_of_ticks;
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	df 91       	pop	r29
    3f26:	cf 91       	pop	r28
    3f28:	08 95       	ret

00003f2a <reset_time>:

void reset_time(void) {
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	00 d0       	rcall	.+0      	; 0x3f30 <reset_time+0x6>
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3f34:	1a 82       	std	Y+2, r1	; 0x02
    3f36:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__iCliRetVal.1882>
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	05 c0       	rjmp	.+10     	; 0x3f48 <reset_time+0x1e>
		ticks_volatile = 0;
    3f3e:	10 92 48 07 	sts	0x0748, r1
    3f42:	10 92 47 07 	sts	0x0747, r1
	}
	return copy_of_ticks;
}

void reset_time(void) {
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3f46:	19 82       	std	Y+1, r1	; 0x01
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	88 23       	and	r24, r24
    3f4c:	c1 f7       	brne	.-16     	; 0x3f3e <reset_time+0x14>
    3f4e:	ce 01       	movw	r24, r28
    3f50:	02 96       	adiw	r24, 0x02	; 2
    3f52:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__iSeiParam.1886>
		ticks_volatile = 0;
	}
}
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	08 95       	ret

00003f60 <time>:

time_t time(time_t *t) {
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	28 97       	sbiw	r28, 0x08	; 8
    3f6a:	0f b6       	in	r0, 0x3f	; 63
    3f6c:	f8 94       	cli
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	0f be       	out	0x3f, r0	; 63
    3f72:	cd bf       	out	0x3d, r28	; 61
    3f74:	98 87       	std	Y+8, r25	; 0x08
    3f76:	8f 83       	std	Y+7, r24	; 0x07
	time_t time;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3f78:	1e 82       	std	Y+6, r1	; 0x06
    3f7a:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__iCliRetVal.1882>
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	15 c0       	rjmp	.+42     	; 0x3fac <time+0x4c>
		// Time is zero when it's not set
		time = is_time_valid() ? rtc.time : 0;
    3f82:	0e 94 56 20 	call	0x40ac	; 0x40ac <is_time_valid.1893>
    3f86:	88 23       	and	r24, r24
    3f88:	49 f0       	breq	.+18     	; 0x3f9c <time+0x3c>
    3f8a:	80 91 b0 07 	lds	r24, 0x07B0
    3f8e:	90 91 b1 07 	lds	r25, 0x07B1
    3f92:	a0 91 b2 07 	lds	r26, 0x07B2
    3f96:	b0 91 b3 07 	lds	r27, 0x07B3
    3f9a:	03 c0       	rjmp	.+6      	; 0x3fa2 <time+0x42>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	9a 83       	std	Y+2, r25	; 0x02
    3fa6:	ab 83       	std	Y+3, r26	; 0x03
    3fa8:	bc 83       	std	Y+4, r27	; 0x04
	}
}

time_t time(time_t *t) {
	time_t time;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3faa:	1d 82       	std	Y+5, r1	; 0x05
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	88 23       	and	r24, r24
    3fb0:	41 f7       	brne	.-48     	; 0x3f82 <time+0x22>
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	06 96       	adiw	r24, 0x06	; 6
    3fb6:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__iSeiParam.1886>
		// Time is zero when it's not set
		time = is_time_valid() ? rtc.time : 0;
 	}
	if (t != NULL) *t = time;
    3fba:	8f 81       	ldd	r24, Y+7	; 0x07
    3fbc:	98 85       	ldd	r25, Y+8	; 0x08
    3fbe:	00 97       	sbiw	r24, 0x00	; 0
    3fc0:	59 f0       	breq	.+22     	; 0x3fd8 <time+0x78>
    3fc2:	2f 81       	ldd	r18, Y+7	; 0x07
    3fc4:	38 85       	ldd	r19, Y+8	; 0x08
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	ab 81       	ldd	r26, Y+3	; 0x03
    3fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    3fce:	f9 01       	movw	r30, r18
    3fd0:	80 83       	st	Z, r24
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	a2 83       	std	Z+2, r26	; 0x02
    3fd6:	b3 83       	std	Z+3, r27	; 0x03
	return time;
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	ab 81       	ldd	r26, Y+3	; 0x03
    3fde:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3fe0:	bc 01       	movw	r22, r24
    3fe2:	cd 01       	movw	r24, r26
    3fe4:	28 96       	adiw	r28, 0x08	; 8
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	08 95       	ret

00003ff6 <stime>:

int stime(time_t *t) {
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <stime+0x6>
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <stime+0x8>
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	9c 83       	std	Y+4, r25	; 0x04
    4004:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    4006:	1a 82       	std	Y+2, r1	; 0x02
    4008:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__iCliRetVal.1882>
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	17 c0       	rjmp	.+46     	; 0x403e <stime+0x48>
		rtc.time = *t;
    4010:	8b 81       	ldd	r24, Y+3	; 0x03
    4012:	9c 81       	ldd	r25, Y+4	; 0x04
    4014:	fc 01       	movw	r30, r24
    4016:	80 81       	ld	r24, Z
    4018:	91 81       	ldd	r25, Z+1	; 0x01
    401a:	a2 81       	ldd	r26, Z+2	; 0x02
    401c:	b3 81       	ldd	r27, Z+3	; 0x03
    401e:	80 93 b0 07 	sts	0x07B0, r24
    4022:	90 93 b1 07 	sts	0x07B1, r25
    4026:	a0 93 b2 07 	sts	0x07B2, r26
    402a:	b0 93 b3 07 	sts	0x07B3, r27
		rtc.div = POSIX_DIVIDER;
    402e:	8d e7       	ldi	r24, 0x7D	; 125
    4030:	80 93 b4 07 	sts	0x07B4, r24
		rtc.cksum = calc_posix_time_cksum();
    4034:	0e 94 2f 20 	call	0x405e	; 0x405e <calc_posix_time_cksum.1891>
    4038:	80 93 b5 07 	sts	0x07B5, r24
	if (t != NULL) *t = time;
	return time;
}

int stime(time_t *t) {
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    403c:	19 82       	std	Y+1, r1	; 0x01
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	88 23       	and	r24, r24
    4042:	31 f7       	brne	.-52     	; 0x4010 <stime+0x1a>
    4044:	ce 01       	movw	r24, r28
    4046:	02 96       	adiw	r24, 0x02	; 2
    4048:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__iSeiParam.1886>
		rtc.time = *t;
		rtc.div = POSIX_DIVIDER;
		rtc.cksum = calc_posix_time_cksum();
	}
	return 0;
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
}
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	08 95       	ret

0000405e <calc_posix_time_cksum.1891>:

/**
 * Calculates checksum using XOR and seed value of 0x55. Must be
 * called with interrupts disabled.
 */
static uint8_t calc_posix_time_cksum(void) {
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	00 d0       	rcall	.+0      	; 0x4064 <calc_posix_time_cksum.1891+0x6>
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
	uint8_t *p = (void*)&(rtc.time);
    4068:	80 eb       	ldi	r24, 0xB0	; 176
    406a:	97 e0       	ldi	r25, 0x07	; 7
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
	return 0x55 ^ p[0] ^ p[1] ^ p[2] ^ p[3];
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	fc 01       	movw	r30, r24
    4076:	20 81       	ld	r18, Z
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	9a 81       	ldd	r25, Y+2	; 0x02
    407c:	01 96       	adiw	r24, 0x01	; 1
    407e:	fc 01       	movw	r30, r24
    4080:	80 81       	ld	r24, Z
    4082:	28 27       	eor	r18, r24
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	9a 81       	ldd	r25, Y+2	; 0x02
    4088:	02 96       	adiw	r24, 0x02	; 2
    408a:	fc 01       	movw	r30, r24
    408c:	80 81       	ld	r24, Z
    408e:	28 27       	eor	r18, r24
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	9a 81       	ldd	r25, Y+2	; 0x02
    4094:	03 96       	adiw	r24, 0x03	; 3
    4096:	fc 01       	movw	r30, r24
    4098:	80 81       	ld	r24, Z
    409a:	92 2f       	mov	r25, r18
    409c:	98 27       	eor	r25, r24
    409e:	85 e5       	ldi	r24, 0x55	; 85
    40a0:	89 27       	eor	r24, r25
}
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	08 95       	ret

000040ac <is_time_valid.1893>:

/**
 * Validates checksum. May be called only when interrupts are
 * disabled.
 */
static uint8_t is_time_valid(void) {
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
	return calc_posix_time_cksum() == rtc.cksum;
    40b4:	0e 94 2f 20 	call	0x405e	; 0x405e <calc_posix_time_cksum.1891>
    40b8:	28 2f       	mov	r18, r24
    40ba:	90 91 b5 07 	lds	r25, 0x07B5
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	29 17       	cp	r18, r25
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <is_time_valid.1893+0x1a>
    40c4:	80 e0       	ldi	r24, 0x00	; 0
}
    40c6:	df 91       	pop	r29
    40c8:	cf 91       	pop	r28
    40ca:	08 95       	ret

000040cc <enable_interrupts_and_run_cron.1895>:

/**
 * Runs cron with enabled interrupts. Detects if a cron run has been
 * running too long.
 */
void enable_interrupts_and_run_cron(void) {
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <enable_interrupts_and_run_cron.1895+0x6>
    40d2:	00 d0       	rcall	.+0      	; 0x40d4 <enable_interrupts_and_run_cron.1895+0x8>
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cron_running = 0;

	if (cron_running) {
    40d8:	80 91 49 07 	lds	r24, 0x0749
    40dc:	88 23       	and	r24, r24
    40de:	d1 f4       	brne	.+52     	; 0x4114 <enable_interrupts_and_run_cron.1895+0x48>
		// TODO light up debug LED
		return;
	}
	
	cron_running = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	80 93 49 07 	sts	0x0749, r24
	const time_t now = rtc.time; // Storing over sei()
    40e6:	80 91 b0 07 	lds	r24, 0x07B0
    40ea:	90 91 b1 07 	lds	r25, 0x07B1
    40ee:	a0 91 b2 07 	lds	r26, 0x07B2
    40f2:	b0 91 b3 07 	lds	r27, 0x07B3
    40f6:	89 83       	std	Y+1, r24	; 0x01
    40f8:	9a 83       	std	Y+2, r25	; 0x02
    40fa:	ab 83       	std	Y+3, r26	; 0x03
    40fc:	bc 83       	std	Y+4, r27	; 0x04
	sei();
    40fe:	78 94       	sei
	run_cron(now);
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	ab 81       	ldd	r26, Y+3	; 0x03
    4106:	bc 81       	ldd	r27, Y+4	; 0x04
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 8b 21 	call	0x4316	; 0x4316 <run_cron>
	cron_running = 0;
    4110:	10 92 49 07 	sts	0x0749, r1
}
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	08 95       	ret

00004122 <srand_from_clock>:

void srand_from_clock(void) {
    4122:	cf 93       	push	r28
    4124:	df 93       	push	r29
    4126:	00 d0       	rcall	.+0      	; 0x4128 <srand_from_clock+0x6>
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
	/* Not caring about race conditions - they just make the
	 * random more random :-) */
	uint16_t seed = (rtc.time << 16) ^ rtc.time ^ ticks_volatile;
    412c:	80 91 b0 07 	lds	r24, 0x07B0
    4130:	90 91 b1 07 	lds	r25, 0x07B1
    4134:	a0 91 b2 07 	lds	r26, 0x07B2
    4138:	b0 91 b3 07 	lds	r27, 0x07B3
    413c:	80 91 b0 07 	lds	r24, 0x07B0
    4140:	90 91 b1 07 	lds	r25, 0x07B1
    4144:	a0 91 b2 07 	lds	r26, 0x07B2
    4148:	b0 91 b3 07 	lds	r27, 0x07B3
    414c:	9c 01       	movw	r18, r24
    414e:	80 91 47 07 	lds	r24, 0x0747
    4152:	90 91 48 07 	lds	r25, 0x0748
    4156:	82 27       	eor	r24, r18
    4158:	93 27       	eor	r25, r19
    415a:	9a 83       	std	Y+2, r25	; 0x02
    415c:	89 83       	std	Y+1, r24	; 0x01
	srand(seed);
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <srand>
}
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	08 95       	ret

00004170 <get_crontab_entry>:
	},
	END_OF_CRONTAB
};

void get_crontab_entry(struct event *p,uint8_t i)
{
    4170:	cf 93       	push	r28
    4172:	df 93       	push	r29
    4174:	00 d0       	rcall	.+0      	; 0x4176 <get_crontab_entry+0x6>
    4176:	1f 92       	push	r1
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	9a 83       	std	Y+2, r25	; 0x02
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	6b 83       	std	Y+3, r22	; 0x03
	eeprom_read_block(p,eeprom_crontab+i,sizeof(struct event));
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	9c 01       	movw	r18, r24
    4196:	20 50       	subi	r18, 0x00	; 0
    4198:	30 40       	sbci	r19, 0x00	; 0
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	48 e0       	ldi	r20, 0x08	; 8
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	b9 01       	movw	r22, r18
    41a4:	0e 94 0e 31 	call	0x621c	; 0x621c <__eerd_block_m328p>
}
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	08 95       	ret

000041b4 <truncate_crontab>:

void truncate_crontab(uint8_t n) {
    41b4:	cf 93       	push	r28
    41b6:	df 93       	push	r29
    41b8:	1f 92       	push	r1
    41ba:	cd b7       	in	r28, 0x3d	; 61
    41bc:	de b7       	in	r29, 0x3e	; 62
    41be:	89 83       	std	Y+1, r24	; 0x01
	if (n >= CRONTAB_SIZE) return;
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	8a 30       	cpi	r24, 0x0A	; 10
    41c4:	70 f4       	brcc	.+28     	; 0x41e2 <truncate_crontab+0x2e>
	eeprom_update_byte((uint8_t*)&(eeprom_crontab[n].kind),(uint8_t)END);
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	88 2f       	mov	r24, r24
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	88 0f       	add	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	80 50       	subi	r24, 0x00	; 0
    41da:	90 40       	sbci	r25, 0x00	; 0
    41dc:	6f ef       	ldi	r22, 0xFF	; 255
    41de:	0e 94 2e 31 	call	0x625c	; 0x625c <__eeupd_byte_m328p>
}
    41e2:	0f 90       	pop	r0
    41e4:	df 91       	pop	r29
    41e6:	cf 91       	pop	r28
    41e8:	08 95       	ret

000041ea <set_crontab_entry>:

void set_crontab_entry(struct event *p,uint8_t i)
{
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	00 d0       	rcall	.+0      	; 0x41f0 <set_crontab_entry+0x6>
    41f0:	1f 92       	push	r1
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	9a 83       	std	Y+2, r25	; 0x02
    41f8:	89 83       	std	Y+1, r24	; 0x01
    41fa:	6b 83       	std	Y+3, r22	; 0x03
	eeprom_update_block(p,eeprom_crontab+i,sizeof(struct event));
    41fc:	8b 81       	ldd	r24, Y+3	; 0x03
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	88 0f       	add	r24, r24
    420c:	99 1f       	adc	r25, r25
    420e:	9c 01       	movw	r18, r24
    4210:	20 50       	subi	r18, 0x00	; 0
    4212:	30 40       	sbci	r19, 0x00	; 0
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	48 e0       	ldi	r20, 0x08	; 8
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	b9 01       	movw	r22, r18
    421e:	0e 94 1e 31 	call	0x623c	; 0x623c <__eeupd_block_m328p>
}
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	08 95       	ret

0000422e <is_event_valid>:
};

const uint8_t cron_actions_len = sizeof(cron_actions)/sizeof(struct action_info);

bool is_event_valid(struct event *e)
{
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	00 d0       	rcall	.+0      	; 0x4234 <is_event_valid+0x6>
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
	// Validate kind. END is not there for a reason.
	if (e->kind != WEEKLY &&
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	fc 01       	movw	r30, r24
    4242:	80 81       	ld	r24, Z
    4244:	88 23       	and	r24, r24
    4246:	71 f0       	breq	.+28     	; 0x4264 <is_event_valid+0x36>
	    e->kind != ONETIME &&
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	9a 81       	ldd	r25, Y+2	; 0x02
    424c:	fc 01       	movw	r30, r24
    424e:	80 81       	ld	r24, Z
const uint8_t cron_actions_len = sizeof(cron_actions)/sizeof(struct action_info);

bool is_event_valid(struct event *e)
{
	// Validate kind. END is not there for a reason.
	if (e->kind != WEEKLY &&
    4250:	81 30       	cpi	r24, 0x01	; 1
    4252:	41 f0       	breq	.+16     	; 0x4264 <is_event_valid+0x36>
	    e->kind != ONETIME &&
	    e->kind != EMPTY) return false;
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	fc 01       	movw	r30, r24
    425a:	80 81       	ld	r24, Z

bool is_event_valid(struct event *e)
{
	// Validate kind. END is not there for a reason.
	if (e->kind != WEEKLY &&
	    e->kind != ONETIME &&
    425c:	8e 3f       	cpi	r24, 0xFE	; 254
    425e:	11 f0       	breq	.+4      	; 0x4264 <is_event_valid+0x36>
	    e->kind != EMPTY) return false;
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	07 c0       	rjmp	.+14     	; 0x4272 <is_event_valid+0x44>

	// Validate act
	return is_action_valid(e->act);
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	9a 81       	ldd	r25, Y+2	; 0x02
    4268:	fc 01       	movw	r30, r24
    426a:	81 81       	ldd	r24, Z+1	; 0x01
    426c:	92 81       	ldd	r25, Z+2	; 0x02
    426e:	0e 94 3e 21 	call	0x427c	; 0x427c <is_action_valid>
}
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	df 91       	pop	r29
    4278:	cf 91       	pop	r28
    427a:	08 95       	ret

0000427c <is_action_valid>:

bool is_action_valid(action_t act)
{
    427c:	ef 92       	push	r14
    427e:	ff 92       	push	r15
    4280:	0f 93       	push	r16
    4282:	1f 93       	push	r17
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	29 97       	sbiw	r28, 0x09	; 9
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	99 87       	std	Y+9, r25	; 0x09
    429a:	88 87       	std	Y+8, r24	; 0x08
	// Validate act
	for (uint8_t i=0; i<cron_actions_len; i++) {
    429c:	19 82       	std	Y+1, r1	; 0x01
    429e:	28 c0       	rjmp	.+80     	; 0x42f0 <is_action_valid+0x74>
		action_t x = (action_t)pgm_get(cron_actions[i].act, word);
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	88 2f       	mov	r24, r24
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	88 0f       	add	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	88 0f       	add	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	88 0f       	add	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	86 59       	subi	r24, 0x96	; 150
    42b4:	92 4f       	sbci	r25, 0xF2	; 242
    42b6:	9b 83       	std	Y+3, r25	; 0x03
    42b8:	8a 83       	std	Y+2, r24	; 0x02
    42ba:	8a 81       	ldd	r24, Y+2	; 0x02
    42bc:	9b 81       	ldd	r25, Y+3	; 0x03
    42be:	8c 01       	movw	r16, r24
    42c0:	f8 01       	movw	r30, r16
    42c2:	e5 90       	lpm	r14, Z+
    42c4:	f4 90       	lpm	r15, Z+
    42c6:	8f 01       	movw	r16, r30
    42c8:	fd 82       	std	Y+5, r15	; 0x05
    42ca:	ec 82       	std	Y+4, r14	; 0x04
    42cc:	1b 83       	std	Y+3, r17	; 0x03
    42ce:	0a 83       	std	Y+2, r16	; 0x02
    42d0:	8c 81       	ldd	r24, Y+4	; 0x04
    42d2:	9d 81       	ldd	r25, Y+5	; 0x05
    42d4:	9f 83       	std	Y+7, r25	; 0x07
    42d6:	8e 83       	std	Y+6, r24	; 0x06
		if (act == x) return true;
    42d8:	28 85       	ldd	r18, Y+8	; 0x08
    42da:	39 85       	ldd	r19, Y+9	; 0x09
    42dc:	8e 81       	ldd	r24, Y+6	; 0x06
    42de:	9f 81       	ldd	r25, Y+7	; 0x07
    42e0:	28 17       	cp	r18, r24
    42e2:	39 07       	cpc	r19, r25
    42e4:	11 f4       	brne	.+4      	; 0x42ea <is_action_valid+0x6e>
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	09 c0       	rjmp	.+18     	; 0x42fc <is_action_valid+0x80>
}

bool is_action_valid(action_t act)
{
	// Validate act
	for (uint8_t i=0; i<cron_actions_len; i++) {
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	8f 5f       	subi	r24, 0xFF	; 255
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	80 91 15 01 	lds	r24, 0x0115
    42f4:	99 81       	ldd	r25, Y+1	; 0x01
    42f6:	98 17       	cp	r25, r24
    42f8:	98 f2       	brcs	.-90     	; 0x42a0 <is_action_valid+0x24>
		action_t x = (action_t)pgm_get(cron_actions[i].act, word);
		if (act == x) return true;
	}
	return false;
    42fa:	80 e0       	ldi	r24, 0x00	; 0
}
    42fc:	29 96       	adiw	r28, 0x09	; 9
    42fe:	0f b6       	in	r0, 0x3f	; 63
    4300:	f8 94       	cli
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	cd bf       	out	0x3d, r28	; 61
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	08 95       	ret

00004316 <run_cron>:

void run_cron(const time_t now) {
    4316:	ef 92       	push	r14
    4318:	ff 92       	push	r15
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	66 97       	sbiw	r28, 0x16	; 22
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	6b 8b       	std	Y+19, r22	; 0x13
    4334:	7c 8b       	std	Y+20, r23	; 0x14
    4336:	8d 8b       	std	Y+21, r24	; 0x15
    4338:	9e 8b       	std	Y+22, r25	; 0x16
	static time_t last_time = 0;

	// Do not break when clock is set to past
	if (last_time > now) last_time=now;
    433a:	20 91 4a 07 	lds	r18, 0x074A
    433e:	30 91 4b 07 	lds	r19, 0x074B
    4342:	40 91 4c 07 	lds	r20, 0x074C
    4346:	50 91 4d 07 	lds	r21, 0x074D
    434a:	8b 89       	ldd	r24, Y+19	; 0x13
    434c:	9c 89       	ldd	r25, Y+20	; 0x14
    434e:	ad 89       	ldd	r26, Y+21	; 0x15
    4350:	be 89       	ldd	r27, Y+22	; 0x16
    4352:	82 17       	cp	r24, r18
    4354:	93 07       	cpc	r25, r19
    4356:	a4 07       	cpc	r26, r20
    4358:	b5 07       	cpc	r27, r21
    435a:	60 f4       	brcc	.+24     	; 0x4374 <run_cron+0x5e>
    435c:	8b 89       	ldd	r24, Y+19	; 0x13
    435e:	9c 89       	ldd	r25, Y+20	; 0x14
    4360:	ad 89       	ldd	r26, Y+21	; 0x15
    4362:	be 89       	ldd	r27, Y+22	; 0x16
    4364:	80 93 4a 07 	sts	0x074A, r24
    4368:	90 93 4b 07 	sts	0x074B, r25
    436c:	a0 93 4c 07 	sts	0x074C, r26
    4370:	b0 93 4d 07 	sts	0x074D, r27

	time_t start_of_day = now / SECS_IN_DAY * SECS_IN_DAY;
    4374:	8b 89       	ldd	r24, Y+19	; 0x13
    4376:	9c 89       	ldd	r25, Y+20	; 0x14
    4378:	ad 89       	ldd	r26, Y+21	; 0x15
    437a:	be 89       	ldd	r27, Y+22	; 0x16
    437c:	20 e8       	ldi	r18, 0x80	; 128
    437e:	31 e5       	ldi	r19, 0x51	; 81
    4380:	41 e0       	ldi	r20, 0x01	; 1
    4382:	50 e0       	ldi	r21, 0x00	; 0
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    438c:	da 01       	movw	r26, r20
    438e:	c9 01       	movw	r24, r18
    4390:	9c 01       	movw	r18, r24
    4392:	ad 01       	movw	r20, r26
    4394:	60 e8       	ldi	r22, 0x80	; 128
    4396:	71 e5       	ldi	r23, 0x51	; 81
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0e 94 41 30 	call	0x6082	; 0x6082 <__mulsi3>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	8a 83       	std	Y+2, r24	; 0x02
    43a6:	9b 83       	std	Y+3, r25	; 0x03
    43a8:	ac 83       	std	Y+4, r26	; 0x04
    43aa:	bd 83       	std	Y+5, r27	; 0x05
	int16_t last_min = (last_time < start_of_day)
    43ac:	20 91 4a 07 	lds	r18, 0x074A
    43b0:	30 91 4b 07 	lds	r19, 0x074B
    43b4:	40 91 4c 07 	lds	r20, 0x074C
    43b8:	50 91 4d 07 	lds	r21, 0x074D
    43bc:	8a 81       	ldd	r24, Y+2	; 0x02
    43be:	9b 81       	ldd	r25, Y+3	; 0x03
    43c0:	ac 81       	ldd	r26, Y+4	; 0x04
    43c2:	bd 81       	ldd	r27, Y+5	; 0x05
    43c4:	28 17       	cp	r18, r24
    43c6:	39 07       	cpc	r19, r25
    43c8:	4a 07       	cpc	r20, r26
    43ca:	5b 07       	cpc	r21, r27
    43cc:	f8 f0       	brcs	.+62     	; 0x440c <run_cron+0xf6>
		? -1
		: (last_time-start_of_day)/60;
    43ce:	20 91 4a 07 	lds	r18, 0x074A
    43d2:	30 91 4b 07 	lds	r19, 0x074B
    43d6:	40 91 4c 07 	lds	r20, 0x074C
    43da:	50 91 4d 07 	lds	r21, 0x074D
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	9b 81       	ldd	r25, Y+3	; 0x03
    43e2:	ac 81       	ldd	r26, Y+4	; 0x04
    43e4:	bd 81       	ldd	r27, Y+5	; 0x05
    43e6:	79 01       	movw	r14, r18
    43e8:	8a 01       	movw	r16, r20
    43ea:	e8 1a       	sub	r14, r24
    43ec:	f9 0a       	sbc	r15, r25
    43ee:	0a 0b       	sbc	r16, r26
    43f0:	1b 0b       	sbc	r17, r27
    43f2:	d8 01       	movw	r26, r16
    43f4:	c7 01       	movw	r24, r14
    43f6:	2c e3       	ldi	r18, 0x3C	; 60
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    4406:	da 01       	movw	r26, r20
    4408:	c9 01       	movw	r24, r18
    440a:	02 c0       	rjmp	.+4      	; 0x4410 <run_cron+0xfa>

	// Do not break when clock is set to past
	if (last_time > now) last_time=now;

	time_t start_of_day = now / SECS_IN_DAY * SECS_IN_DAY;
	int16_t last_min = (last_time < start_of_day)
    440c:	8f ef       	ldi	r24, 0xFF	; 255
    440e:	9f ef       	ldi	r25, 0xFF	; 255
    4410:	9f 83       	std	Y+7, r25	; 0x07
    4412:	8e 83       	std	Y+6, r24	; 0x06
		? -1
		: (last_time-start_of_day)/60;
	int16_t now_min = (now - start_of_day)/60;
    4414:	2b 89       	ldd	r18, Y+19	; 0x13
    4416:	3c 89       	ldd	r19, Y+20	; 0x14
    4418:	4d 89       	ldd	r20, Y+21	; 0x15
    441a:	5e 89       	ldd	r21, Y+22	; 0x16
    441c:	8a 81       	ldd	r24, Y+2	; 0x02
    441e:	9b 81       	ldd	r25, Y+3	; 0x03
    4420:	ac 81       	ldd	r26, Y+4	; 0x04
    4422:	bd 81       	ldd	r27, Y+5	; 0x05
    4424:	79 01       	movw	r14, r18
    4426:	8a 01       	movw	r16, r20
    4428:	e8 1a       	sub	r14, r24
    442a:	f9 0a       	sbc	r15, r25
    442c:	0a 0b       	sbc	r16, r26
    442e:	1b 0b       	sbc	r17, r27
    4430:	d8 01       	movw	r26, r16
    4432:	c7 01       	movw	r24, r14
    4434:	2c e3       	ldi	r18, 0x3C	; 60
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    4444:	da 01       	movw	r26, r20
    4446:	c9 01       	movw	r24, r18
    4448:	99 87       	std	Y+9, r25	; 0x09
    444a:	88 87       	std	Y+8, r24	; 0x08
	uint8_t weekday = (uint8_t)(now / SECS_IN_DAY % 7);
    444c:	8b 89       	ldd	r24, Y+19	; 0x13
    444e:	9c 89       	ldd	r25, Y+20	; 0x14
    4450:	ad 89       	ldd	r26, Y+21	; 0x15
    4452:	be 89       	ldd	r27, Y+22	; 0x16
    4454:	20 e8       	ldi	r18, 0x80	; 128
    4456:	31 e5       	ldi	r19, 0x51	; 81
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	bc 01       	movw	r22, r24
    445e:	cd 01       	movw	r24, r26
    4460:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    4464:	da 01       	movw	r26, r20
    4466:	c9 01       	movw	r24, r18
    4468:	27 e0       	ldi	r18, 0x07	; 7
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e0       	ldi	r20, 0x00	; 0
    446e:	50 e0       	ldi	r21, 0x00	; 0
    4470:	bc 01       	movw	r22, r24
    4472:	cd 01       	movw	r24, r26
    4474:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	8a 87       	std	Y+10, r24	; 0x0a

	for (uint8_t i=0; i<CRONTAB_SIZE; i++) {
    447e:	19 82       	std	Y+1, r1	; 0x01
    4480:	62 c0       	rjmp	.+196    	; 0x4546 <run_cron+0x230>
		struct event e;
		get_crontab_entry(&e,i);
    4482:	ce 01       	movw	r24, r28
    4484:	0b 96       	adiw	r24, 0x0b	; 11
    4486:	69 81       	ldd	r22, Y+1	; 0x01
    4488:	0e 94 b8 20 	call	0x4170	; 0x4170 <get_crontab_entry>
		
		// Doing the checks
		if (e.kind == END) break;
    448c:	8b 85       	ldd	r24, Y+11	; 0x0b
    448e:	8f 3f       	cpi	r24, 0xFF	; 255
    4490:	09 f4       	brne	.+2      	; 0x4494 <run_cron+0x17e>
    4492:	5d c0       	rjmp	.+186    	; 0x454e <run_cron+0x238>
		if (e.kind == EMPTY) continue;
    4494:	8b 85       	ldd	r24, Y+11	; 0x0b
    4496:	8e 3f       	cpi	r24, 0xFE	; 254
    4498:	09 f4       	brne	.+2      	; 0x449c <run_cron+0x186>
    449a:	49 c0       	rjmp	.+146    	; 0x452e <run_cron+0x218>
		if (e.kind == WEEKLY) {
    449c:	8b 85       	ldd	r24, Y+11	; 0x0b
    449e:	88 23       	and	r24, r24
    44a0:	f9 f4       	brne	.+62     	; 0x44e0 <run_cron+0x1ca>
			// If not this day, skip
			if (!(e.u.weekly.weekdays & (1 << weekday))) continue;
    44a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a4:	88 2f       	mov	r24, r24
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    44aa:	22 2f       	mov	r18, r18
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	02 2e       	mov	r0, r18
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <run_cron+0x1a0>
    44b2:	95 95       	asr	r25
    44b4:	87 95       	ror	r24
    44b6:	0a 94       	dec	r0
    44b8:	e2 f7       	brpl	.-8      	; 0x44b2 <run_cron+0x19c>
    44ba:	81 70       	andi	r24, 0x01	; 1
    44bc:	99 27       	eor	r25, r25
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	c1 f1       	breq	.+112    	; 0x4532 <run_cron+0x21c>
			// If haven't happened, skip
			if (e.u.weekly.minutes <= last_min) continue;
    44c2:	28 89       	ldd	r18, Y+16	; 0x10
    44c4:	39 89       	ldd	r19, Y+17	; 0x11
    44c6:	8e 81       	ldd	r24, Y+6	; 0x06
    44c8:	9f 81       	ldd	r25, Y+7	; 0x07
    44ca:	82 17       	cp	r24, r18
    44cc:	93 07       	cpc	r25, r19
    44ce:	9c f5       	brge	.+102    	; 0x4536 <run_cron+0x220>
			if (e.u.weekly.minutes > now_min) continue;
    44d0:	28 89       	ldd	r18, Y+16	; 0x10
    44d2:	39 89       	ldd	r19, Y+17	; 0x11
    44d4:	88 85       	ldd	r24, Y+8	; 0x08
    44d6:	99 85       	ldd	r25, Y+9	; 0x09
    44d8:	82 17       	cp	r24, r18
    44da:	93 07       	cpc	r25, r19
    44dc:	14 f5       	brge	.+68     	; 0x4522 <run_cron+0x20c>
    44de:	30 c0       	rjmp	.+96     	; 0x4540 <run_cron+0x22a>
		} else if (e.kind == ONETIME) {
    44e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44e2:	81 30       	cpi	r24, 0x01	; 1
    44e4:	a1 f5       	brne	.+104    	; 0x454e <run_cron+0x238>
			if (e.u.onetime.ts <= last_time) continue;
    44e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    44e8:	38 89       	ldd	r19, Y+16	; 0x10
    44ea:	49 89       	ldd	r20, Y+17	; 0x11
    44ec:	5a 89       	ldd	r21, Y+18	; 0x12
    44ee:	80 91 4a 07 	lds	r24, 0x074A
    44f2:	90 91 4b 07 	lds	r25, 0x074B
    44f6:	a0 91 4c 07 	lds	r26, 0x074C
    44fa:	b0 91 4d 07 	lds	r27, 0x074D
    44fe:	82 17       	cp	r24, r18
    4500:	93 07       	cpc	r25, r19
    4502:	a4 07       	cpc	r26, r20
    4504:	b5 07       	cpc	r27, r21
    4506:	c8 f4       	brcc	.+50     	; 0x453a <run_cron+0x224>
			if (e.u.onetime.ts > now) continue;
    4508:	2f 85       	ldd	r18, Y+15	; 0x0f
    450a:	38 89       	ldd	r19, Y+16	; 0x10
    450c:	49 89       	ldd	r20, Y+17	; 0x11
    450e:	5a 89       	ldd	r21, Y+18	; 0x12
    4510:	8b 89       	ldd	r24, Y+19	; 0x13
    4512:	9c 89       	ldd	r25, Y+20	; 0x14
    4514:	ad 89       	ldd	r26, Y+21	; 0x15
    4516:	be 89       	ldd	r27, Y+22	; 0x16
    4518:	82 17       	cp	r24, r18
    451a:	93 07       	cpc	r25, r19
    451c:	a4 07       	cpc	r26, r20
    451e:	b5 07       	cpc	r27, r21
    4520:	70 f0       	brcs	.+28     	; 0x453e <run_cron+0x228>
			// Unknown code. TODO light up DEBUG led
			break;
		}
		
		// We got a match, run the action.
		e.act(e.arg);
    4522:	2c 85       	ldd	r18, Y+12	; 0x0c
    4524:	3d 85       	ldd	r19, Y+13	; 0x0d
    4526:	8e 85       	ldd	r24, Y+14	; 0x0e
    4528:	f9 01       	movw	r30, r18
    452a:	09 95       	icall
    452c:	09 c0       	rjmp	.+18     	; 0x4540 <run_cron+0x22a>
		struct event e;
		get_crontab_entry(&e,i);
		
		// Doing the checks
		if (e.kind == END) break;
		if (e.kind == EMPTY) continue;
    452e:	00 00       	nop
    4530:	07 c0       	rjmp	.+14     	; 0x4540 <run_cron+0x22a>
		if (e.kind == WEEKLY) {
			// If not this day, skip
			if (!(e.u.weekly.weekdays & (1 << weekday))) continue;
    4532:	00 00       	nop
    4534:	05 c0       	rjmp	.+10     	; 0x4540 <run_cron+0x22a>
			// If haven't happened, skip
			if (e.u.weekly.minutes <= last_min) continue;
    4536:	00 00       	nop
    4538:	03 c0       	rjmp	.+6      	; 0x4540 <run_cron+0x22a>
			if (e.u.weekly.minutes > now_min) continue;
		} else if (e.kind == ONETIME) {
			if (e.u.onetime.ts <= last_time) continue;
    453a:	00 00       	nop
    453c:	01 c0       	rjmp	.+2      	; 0x4540 <run_cron+0x22a>
			if (e.u.onetime.ts > now) continue;
    453e:	00 00       	nop
		? -1
		: (last_time-start_of_day)/60;
	int16_t now_min = (now - start_of_day)/60;
	uint8_t weekday = (uint8_t)(now / SECS_IN_DAY % 7);

	for (uint8_t i=0; i<CRONTAB_SIZE; i++) {
    4540:	89 81       	ldd	r24, Y+1	; 0x01
    4542:	8f 5f       	subi	r24, 0xFF	; 255
    4544:	89 83       	std	Y+1, r24	; 0x01
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	8a 30       	cpi	r24, 0x0A	; 10
    454a:	08 f4       	brcc	.+2      	; 0x454e <run_cron+0x238>
    454c:	9a cf       	rjmp	.-204    	; 0x4482 <run_cron+0x16c>
		
		// We got a match, run the action.
		e.act(e.arg);
	}

	last_time = now;
    454e:	8b 89       	ldd	r24, Y+19	; 0x13
    4550:	9c 89       	ldd	r25, Y+20	; 0x14
    4552:	ad 89       	ldd	r26, Y+21	; 0x15
    4554:	be 89       	ldd	r27, Y+22	; 0x16
    4556:	80 93 4a 07 	sts	0x074A, r24
    455a:	90 93 4b 07 	sts	0x074B, r25
    455e:	a0 93 4c 07 	sts	0x074C, r26
    4562:	b0 93 4d 07 	sts	0x074D, r27
}
    4566:	66 96       	adiw	r28, 0x16	; 22
    4568:	0f b6       	in	r0, 0x3f	; 63
    456a:	f8 94       	cli
    456c:	de bf       	out	0x3e, r29	; 62
    456e:	0f be       	out	0x3f, r0	; 63
    4570:	cd bf       	out	0x3d, r28	; 61
    4572:	df 91       	pop	r29
    4574:	cf 91       	pop	r28
    4576:	1f 91       	pop	r17
    4578:	0f 91       	pop	r16
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	08 95       	ret

00004580 <serial_hello>:

void serial_hello(uint8_t x) {
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	1f 92       	push	r1
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    458a:	89 83       	std	Y+1, r24	; 0x01
	serial_send('h');
    458c:	88 e6       	ldi	r24, 0x68	; 104
    458e:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send('e');
    4592:	85 e6       	ldi	r24, 0x65	; 101
    4594:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send('l');
    4598:	8c e6       	ldi	r24, 0x6C	; 108
    459a:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send('l');
    459e:	8c e6       	ldi	r24, 0x6C	; 108
    45a0:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send('o');
    45a4:	8f e6       	ldi	r24, 0x6F	; 111
    45a6:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send('0'+x);
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	80 5d       	subi	r24, 0xD0	; 208
    45ae:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
}
    45b2:	0f 90       	pop	r0
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	08 95       	ret

000045ba <__iCliRetVal.2037>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    45ba:	cf 93       	push	r28
    45bc:	df 93       	push	r29
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    cli();
    45c2:	f8 94       	cli
    return 1;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
}
    45c6:	df 91       	pop	r29
    45c8:	cf 91       	pop	r28
    45ca:	08 95       	ret

000045cc <__iSeiParam.2041>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <__iSeiParam.2041+0x6>
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	9a 83       	std	Y+2, r25	; 0x02
    45d8:	89 83       	std	Y+1, r24	; 0x01
    sei();
    45da:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    45dc:	0f 90       	pop	r0
    45de:	0f 90       	pop	r0
    45e0:	df 91       	pop	r29
    45e2:	cf 91       	pop	r28
    45e4:	08 95       	ret

000045e6 <timer_init>:

/**
 * Initialize the timer for a new measurement cycle
 */
void timer_init(void)
{
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
	//TCCR1A &= ~(1<<WGM11 | 1<<WGM10); //no need to do this, bits are cleared by default
	//TCCR1B &= ~(1<<WGM13 | 1<<WGM12); //no need to do this, bits are cleared by default
	TCCR1B |= (1 << WGM12);	// sets compare and reset to "top" mode
    45ee:	81 e8       	ldi	r24, 0x81	; 129
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	21 e8       	ldi	r18, 0x81	; 129
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	f9 01       	movw	r30, r18
    45f8:	20 81       	ld	r18, Z
    45fa:	28 60       	ori	r18, 0x08	; 8
    45fc:	fc 01       	movw	r30, r24
    45fe:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS10);	// set clock divider to 1
    4600:	81 e8       	ldi	r24, 0x81	; 129
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	21 e8       	ldi	r18, 0x81	; 129
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	f9 01       	movw	r30, r18
    460a:	20 81       	ld	r18, Z
    460c:	21 60       	ori	r18, 0x01	; 1
    460e:	fc 01       	movw	r30, r24
    4610:	20 83       	st	Z, r18

	OCR1A = 160;		// set "top" for 10 us (16 MHz sysclock in use)
    4612:	88 e8       	ldi	r24, 0x88	; 136
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	20 ea       	ldi	r18, 0xA0	; 160
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	fc 01       	movw	r30, r24
    461c:	31 83       	std	Z+1, r19	; 0x01
    461e:	20 83       	st	Z, r18
	// TODO: the actual pulse length is 10 ms! Why?
	TCNT1 = 0;
    4620:	84 e8       	ldi	r24, 0x84	; 132
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	fc 01       	movw	r30, r24
    4626:	11 82       	std	Z+1, r1	; 0x01
    4628:	10 82       	st	Z, r1
	TIFR1 |= (1 << OCF1A);	// clear possible pending int
    462a:	86 e3       	ldi	r24, 0x36	; 54
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	26 e3       	ldi	r18, 0x36	; 54
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	f9 01       	movw	r30, r18
    4634:	20 81       	ld	r18, Z
    4636:	22 60       	ori	r18, 0x02	; 2
    4638:	fc 01       	movw	r30, r24
    463a:	20 83       	st	Z, r18
	TIMSK1 |= (1 << OCIE1A);	// enable int
    463c:	8f e6       	ldi	r24, 0x6F	; 111
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	2f e6       	ldi	r18, 0x6F	; 111
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	f9 01       	movw	r30, r18
    4646:	20 81       	ld	r18, Z
    4648:	22 60       	ori	r18, 0x02	; 2
    464a:	fc 01       	movw	r30, r24
    464c:	20 83       	st	Z, r18
}
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	08 95       	ret

00004654 <__vector_11>:
 * This int handler is called twice during measurement cycle
 *  - when it is time to generate the trailing edge of the start pulse
 *  - when the measurement cycle ends
 */
ISR(TIMER1_COMPA_vect)
{
    4654:	1f 92       	push	r1
    4656:	0f 92       	push	r0
    4658:	00 90 5f 00 	lds	r0, 0x005F
    465c:	0f 92       	push	r0
    465e:	11 24       	eor	r1, r1
    4660:	2f 93       	push	r18
    4662:	3f 93       	push	r19
    4664:	4f 93       	push	r20
    4666:	5f 93       	push	r21
    4668:	6f 93       	push	r22
    466a:	7f 93       	push	r23
    466c:	8f 93       	push	r24
    466e:	9f 93       	push	r25
    4670:	af 93       	push	r26
    4672:	bf 93       	push	r27
    4674:	ef 93       	push	r30
    4676:	ff 93       	push	r31
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62

	if (state == ST_SENDING_START_PULSE) {
    4680:	80 91 4e 07 	lds	r24, 0x074E
    4684:	81 30       	cpi	r24, 0x01	; 1
    4686:	59 f5       	brne	.+86     	; 0x46de <__vector_11+0x8a>

		PORTC &= ~(1 << PC5);	// force trailing edge of the pulse
    4688:	88 e2       	ldi	r24, 0x28	; 40
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	28 e2       	ldi	r18, 0x28	; 40
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	f9 01       	movw	r30, r18
    4692:	20 81       	ld	r18, Z
    4694:	2f 7d       	andi	r18, 0xDF	; 223
    4696:	fc 01       	movw	r30, r24
    4698:	20 83       	st	Z, r18

		//re-init TIMER1 for measuring response pulse length
		TCCR1B &= ~(1 << CS12 | 1 << CS11 | 1 << CS10);	// stop timer
    469a:	81 e8       	ldi	r24, 0x81	; 129
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	21 e8       	ldi	r18, 0x81	; 129
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	f9 01       	movw	r30, r18
    46a4:	20 81       	ld	r18, Z
    46a6:	28 7f       	andi	r18, 0xF8	; 248
    46a8:	fc 01       	movw	r30, r24
    46aa:	20 83       	st	Z, r18
		OCR1A = 6000;	// set "top" for 96 ms (16 MHz sysclock in use)
    46ac:	88 e8       	ldi	r24, 0x88	; 136
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	20 e7       	ldi	r18, 0x70	; 112
    46b2:	37 e1       	ldi	r19, 0x17	; 23
    46b4:	fc 01       	movw	r30, r24
    46b6:	31 83       	std	Z+1, r19	; 0x01
    46b8:	20 83       	st	Z, r18
		TCNT1 = 0;
    46ba:	84 e8       	ldi	r24, 0x84	; 132
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	fc 01       	movw	r30, r24
    46c0:	11 82       	std	Z+1, r1	; 0x01
    46c2:	10 82       	st	Z, r1
		TCCR1B |= (1 << CS12);	// start timer, set clock divider to 256
    46c4:	81 e8       	ldi	r24, 0x81	; 129
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	21 e8       	ldi	r18, 0x81	; 129
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	f9 01       	movw	r30, r18
    46ce:	20 81       	ld	r18, Z
    46d0:	24 60       	ori	r18, 0x04	; 4
    46d2:	fc 01       	movw	r30, r24
    46d4:	20 83       	st	Z, r18

		state = ST_WAITING_RESPONSE_PULSE;
    46d6:	82 e0       	ldi	r24, 0x02	; 2
    46d8:	80 93 4e 07 	sts	0x074E, r24
    46dc:	24 c0       	rjmp	.+72     	; 0x4726 <__vector_11+0xd2>
	} else {
		//normally the state should be ST_WAITING_ECHO_FADING_AWAY here
		//but clear state machine also in all other cases

		if (state == ST_MEASURING_RESPONSE_PULSE) {
    46de:	80 91 4e 07 	lds	r24, 0x074E
    46e2:	83 30       	cpi	r24, 0x03	; 3
    46e4:	31 f4       	brne	.+12     	; 0x46f2 <__vector_11+0x9e>
			// This situation happens when there is no
			// object in the beam area
			resp_pulse_length = HCSR04_MEAS_FAIL;
    46e6:	8f ef       	ldi	r24, 0xFF	; 255
    46e8:	9f ef       	ldi	r25, 0xFF	; 255
    46ea:	90 93 51 07 	sts	0x0751, r25
    46ee:	80 93 50 07 	sts	0x0750, r24
		}

		TIMSK1 &= ~(1 << OCIE1A);	// disable timer int
    46f2:	8f e6       	ldi	r24, 0x6F	; 111
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	2f e6       	ldi	r18, 0x6F	; 111
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	f9 01       	movw	r30, r18
    46fc:	20 81       	ld	r18, Z
    46fe:	2d 7f       	andi	r18, 0xFD	; 253
    4700:	fc 01       	movw	r30, r24
    4702:	20 83       	st	Z, r18
		PCICR &= ~(1 << PCIE1);	// disable PIN Change int
    4704:	88 e6       	ldi	r24, 0x68	; 104
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	28 e6       	ldi	r18, 0x68	; 104
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	f9 01       	movw	r30, r18
    470e:	20 81       	ld	r18, Z
    4710:	2d 7f       	andi	r18, 0xFD	; 253
    4712:	fc 01       	movw	r30, r24
    4714:	20 83       	st	Z, r18
		state = ST_IDLE;
    4716:	10 92 4e 07 	sts	0x074E, r1

		if (oper_mode == CONTINUOUS)
    471a:	80 91 4f 07 	lds	r24, 0x074F
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	11 f4       	brne	.+4      	; 0x4726 <__vector_11+0xd2>
			send_pulse();
    4722:	0e 94 22 24 	call	0x4844	; 0x4844 <send_pulse>
	}
}
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	ff 91       	pop	r31
    472c:	ef 91       	pop	r30
    472e:	bf 91       	pop	r27
    4730:	af 91       	pop	r26
    4732:	9f 91       	pop	r25
    4734:	8f 91       	pop	r24
    4736:	7f 91       	pop	r23
    4738:	6f 91       	pop	r22
    473a:	5f 91       	pop	r21
    473c:	4f 91       	pop	r20
    473e:	3f 91       	pop	r19
    4740:	2f 91       	pop	r18
    4742:	0f 90       	pop	r0
    4744:	00 92 5f 00 	sts	0x005F, r0
    4748:	0f 90       	pop	r0
    474a:	1f 90       	pop	r1
    474c:	18 95       	reti

0000474e <pin_init>:

/**
 * Initialize the I/O pins for a new measurement cycle
 */
void pin_init(void)
{
    474e:	cf 93       	push	r28
    4750:	df 93       	push	r29
    4752:	cd b7       	in	r28, 0x3d	; 61
    4754:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1 << PC5);	//output
    4756:	87 e2       	ldi	r24, 0x27	; 39
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	27 e2       	ldi	r18, 0x27	; 39
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	f9 01       	movw	r30, r18
    4760:	20 81       	ld	r18, Z
    4762:	20 62       	ori	r18, 0x20	; 32
    4764:	fc 01       	movw	r30, r24
    4766:	20 83       	st	Z, r18
	DDRC &= ~(1 << PC4);	//input
    4768:	87 e2       	ldi	r24, 0x27	; 39
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	27 e2       	ldi	r18, 0x27	; 39
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	f9 01       	movw	r30, r18
    4772:	20 81       	ld	r18, Z
    4774:	2f 7e       	andi	r18, 0xEF	; 239
    4776:	fc 01       	movw	r30, r24
    4778:	20 83       	st	Z, r18

	//Enable PIN Change Interrupt 1 - This enables interrupts on pins
	//PCINT14...8, see doc8161.pdf Rev. 8161D – 10/09, ch 12
	PCICR |= (1 << PCIE1);
    477a:	88 e6       	ldi	r24, 0x68	; 104
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	28 e6       	ldi	r18, 0x68	; 104
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	f9 01       	movw	r30, r18
    4784:	20 81       	ld	r18, Z
    4786:	22 60       	ori	r18, 0x02	; 2
    4788:	fc 01       	movw	r30, r24
    478a:	20 83       	st	Z, r18

	//Set the mask on Pin change interrupt 1 so that only PCINT12 (PC4) triggers
	//the interrupt. see doc8161.pdf Rev. 8161D – 10/09, ch 12.2.1
	PCMSK1 |= (1 << PCINT12);
    478c:	8c e6       	ldi	r24, 0x6C	; 108
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	2c e6       	ldi	r18, 0x6C	; 108
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	f9 01       	movw	r30, r18
    4796:	20 81       	ld	r18, Z
    4798:	20 61       	ori	r18, 0x10	; 16
    479a:	fc 01       	movw	r30, r24
    479c:	20 83       	st	Z, r18
	return;
}
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	08 95       	ret

000047a4 <__vector_4>:
 * This int handler is called twice during measurement cycle
 *  - when it is time to generate the trailing edge of the start pulse
 *  - when the measurement cycle ends
 */
ISR(PCINT1_vect)
{
    47a4:	1f 92       	push	r1
    47a6:	0f 92       	push	r0
    47a8:	00 90 5f 00 	lds	r0, 0x005F
    47ac:	0f 92       	push	r0
    47ae:	11 24       	eor	r1, r1
    47b0:	1f 93       	push	r17
    47b2:	2f 93       	push	r18
    47b4:	3f 93       	push	r19
    47b6:	8f 93       	push	r24
    47b8:	9f 93       	push	r25
    47ba:	ef 93       	push	r30
    47bc:	ff 93       	push	r31
    47be:	cf 93       	push	r28
    47c0:	df 93       	push	r29
    47c2:	cd b7       	in	r28, 0x3d	; 61
    47c4:	de b7       	in	r29, 0x3e	; 62

	register uint8_t leading_edge = PINC & (1 << PINC4);
    47c6:	86 e2       	ldi	r24, 0x26	; 38
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	fc 01       	movw	r30, r24
    47cc:	80 81       	ld	r24, Z
    47ce:	18 2f       	mov	r17, r24
    47d0:	10 71       	andi	r17, 0x10	; 16
	if (state == ST_WAITING_RESPONSE_PULSE) {
    47d2:	80 91 4e 07 	lds	r24, 0x074E
    47d6:	82 30       	cpi	r24, 0x02	; 2
    47d8:	59 f4       	brne	.+22     	; 0x47f0 <__vector_4+0x4c>
		if (leading_edge) {
    47da:	11 23       	and	r17, r17
    47dc:	21 f1       	breq	.+72     	; 0x4826 <__vector_4+0x82>
			TCNT1 = 0; //restart counting
    47de:	84 e8       	ldi	r24, 0x84	; 132
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	fc 01       	movw	r30, r24
    47e4:	11 82       	std	Z+1, r1	; 0x01
    47e6:	10 82       	st	Z, r1
			state = ST_MEASURING_RESPONSE_PULSE;
    47e8:	83 e0       	ldi	r24, 0x03	; 3
    47ea:	80 93 4e 07 	sts	0x074E, r24
    47ee:	1b c0       	rjmp	.+54     	; 0x4826 <__vector_4+0x82>
		}
		//else{
		//trailing edge, just fall through
		//}
	} else if (state == ST_MEASURING_RESPONSE_PULSE) {
    47f0:	80 91 4e 07 	lds	r24, 0x074E
    47f4:	83 30       	cpi	r24, 0x03	; 3
    47f6:	b9 f4       	brne	.+46     	; 0x4826 <__vector_4+0x82>
		if (!leading_edge) {
    47f8:	11 23       	and	r17, r17
    47fa:	a9 f4       	brne	.+42     	; 0x4826 <__vector_4+0x82>
			resp_pulse_length = TCNT1;
    47fc:	84 e8       	ldi	r24, 0x84	; 132
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	fc 01       	movw	r30, r24
    4802:	80 81       	ld	r24, Z
    4804:	91 81       	ldd	r25, Z+1	; 0x01
    4806:	90 93 51 07 	sts	0x0751, r25
    480a:	80 93 50 07 	sts	0x0750, r24
			PCICR &= ~(1 << PCIE1);	//Disable PIN Change Interrupt 1
    480e:	88 e6       	ldi	r24, 0x68	; 104
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	28 e6       	ldi	r18, 0x68	; 104
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	f9 01       	movw	r30, r18
    4818:	20 81       	ld	r18, Z
    481a:	2d 7f       	andi	r18, 0xFD	; 253
    481c:	fc 01       	movw	r30, r24
    481e:	20 83       	st	Z, r18
			state = ST_WAITING_ECHO_FADING_AWAY;
    4820:	84 e0       	ldi	r24, 0x04	; 4
    4822:	80 93 4e 07 	sts	0x074E, r24
		//}
	}
	//else{
	//should not happen
	//}
}
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	ff 91       	pop	r31
    482c:	ef 91       	pop	r30
    482e:	9f 91       	pop	r25
    4830:	8f 91       	pop	r24
    4832:	3f 91       	pop	r19
    4834:	2f 91       	pop	r18
    4836:	1f 91       	pop	r17
    4838:	0f 90       	pop	r0
    483a:	00 92 5f 00 	sts	0x005F, r0
    483e:	0f 90       	pop	r0
    4840:	1f 90       	pop	r1
    4842:	18 95       	reti

00004844 <send_pulse>:

int send_pulse(void)
{
    4844:	cf 93       	push	r28
    4846:	df 93       	push	r29
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
	if (state != ST_IDLE)
    484c:	80 91 4e 07 	lds	r24, 0x074E
    4850:	88 23       	and	r24, r24
    4852:	19 f0       	breq	.+6      	; 0x485a <send_pulse+0x16>
		return 0;
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	12 c0       	rjmp	.+36     	; 0x487e <send_pulse+0x3a>

	pin_init();
    485a:	0e 94 a7 23 	call	0x474e	; 0x474e <pin_init>
	PORTC |= (1 << PC5);	// the leading edge of the pulse
    485e:	88 e2       	ldi	r24, 0x28	; 40
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	28 e2       	ldi	r18, 0x28	; 40
    4864:	30 e0       	ldi	r19, 0x00	; 0
    4866:	f9 01       	movw	r30, r18
    4868:	20 81       	ld	r18, Z
    486a:	20 62       	ori	r18, 0x20	; 32
    486c:	fc 01       	movw	r30, r24
    486e:	20 83       	st	Z, r18
	timer_init();
    4870:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <timer_init>

	state = ST_SENDING_START_PULSE;
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	80 93 4e 07 	sts	0x074E, r24

	return 1;
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	90 e0       	ldi	r25, 0x00	; 0
}
    487e:	df 91       	pop	r29
    4880:	cf 91       	pop	r28
    4882:	08 95       	ret

00004884 <hcsr04_start_continuous_meas>:

	return send_pulse();
}

int hcsr04_start_continuous_meas(void)
{
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	00 d0       	rcall	.+0      	; 0x488a <hcsr04_start_continuous_meas+0x6>
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
	int ret_val = send_pulse();
    488e:	0e 94 22 24 	call	0x4844	; 0x4844 <send_pulse>
    4892:	9a 83       	std	Y+2, r25	; 0x02
    4894:	89 83       	std	Y+1, r24	; 0x01

	if (ret_val)
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	9a 81       	ldd	r25, Y+2	; 0x02
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	19 f0       	breq	.+6      	; 0x48a4 <hcsr04_start_continuous_meas+0x20>
		oper_mode = CONTINUOUS;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	80 93 4f 07 	sts	0x074F, r24

	return ret_val;
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	df 91       	pop	r29
    48ae:	cf 91       	pop	r28
    48b0:	08 95       	ret

000048b2 <hcsr04_get_distance_in_cm>:
	}
	return ret_val;
}

uint16_t hcsr04_get_distance_in_cm(void)
{
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <hcsr04_get_distance_in_cm+0x6>
    48b8:	00 d0       	rcall	.+0      	; 0x48ba <hcsr04_get_distance_in_cm+0x8>
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
	uint16_t tmp_pulse_length;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    48be:	1c 82       	std	Y+4, r1	; 0x04
    48c0:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__iCliRetVal.2037>
    48c4:	8b 83       	std	Y+3, r24	; 0x03
    48c6:	07 c0       	rjmp	.+14     	; 0x48d6 <hcsr04_get_distance_in_cm+0x24>
		tmp_pulse_length = resp_pulse_length;
    48c8:	80 91 50 07 	lds	r24, 0x0750
    48cc:	90 91 51 07 	lds	r25, 0x0751
    48d0:	9a 83       	std	Y+2, r25	; 0x02
    48d2:	89 83       	std	Y+1, r24	; 0x01
}

uint16_t hcsr04_get_distance_in_cm(void)
{
	uint16_t tmp_pulse_length;
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    48d4:	1b 82       	std	Y+3, r1	; 0x03
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	88 23       	and	r24, r24
    48da:	b1 f7       	brne	.-20     	; 0x48c8 <hcsr04_get_distance_in_cm+0x16>
    48dc:	ce 01       	movw	r24, r28
    48de:	04 96       	adiw	r24, 0x04	; 4
    48e0:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__iSeiParam.2041>
		tmp_pulse_length = resp_pulse_length;
	}
	if (tmp_pulse_length == HCSR04_MEAS_FAIL)
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	9a 81       	ldd	r25, Y+2	; 0x02
    48e8:	8f 3f       	cpi	r24, 0xFF	; 255
    48ea:	2f ef       	ldi	r18, 0xFF	; 255
    48ec:	92 07       	cpc	r25, r18
    48ee:	19 f4       	brne	.+6      	; 0x48f6 <hcsr04_get_distance_in_cm+0x44>
		return tmp_pulse_length;
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	9a 81       	ldd	r25, Y+2	; 0x02
    48f4:	18 c0       	rjmp	.+48     	; 0x4926 <hcsr04_get_distance_in_cm+0x74>

	// 36 pulses per 10 cm, when clock divider is 256 in TCCR1B
	return (10 * tmp_pulse_length) / 36;
    48f6:	89 81       	ldd	r24, Y+1	; 0x01
    48f8:	9a 81       	ldd	r25, Y+2	; 0x02
    48fa:	88 0f       	add	r24, r24
    48fc:	99 1f       	adc	r25, r25
    48fe:	9c 01       	movw	r18, r24
    4900:	22 0f       	add	r18, r18
    4902:	33 1f       	adc	r19, r19
    4904:	22 0f       	add	r18, r18
    4906:	33 1f       	adc	r19, r19
    4908:	82 0f       	add	r24, r18
    490a:	93 1f       	adc	r25, r19
    490c:	9c 01       	movw	r18, r24
    490e:	af e8       	ldi	r26, 0x8F	; 143
    4910:	b3 ee       	ldi	r27, 0xE3	; 227
    4912:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    4916:	96 95       	lsr	r25
    4918:	87 95       	ror	r24
    491a:	92 95       	swap	r25
    491c:	82 95       	swap	r24
    491e:	8f 70       	andi	r24, 0x0F	; 15
    4920:	89 27       	eor	r24, r25
    4922:	9f 70       	andi	r25, 0x0F	; 15
    4924:	89 27       	eor	r24, r25
}
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	df 91       	pop	r29
    4930:	cf 91       	pop	r28
    4932:	08 95       	ret

00004934 <init_tlc5940>:
#include "pinMacros.h"
#include "init.h"
#include "tlc5940.h"

void init_tlc5940(void)
{
    4934:	cf 93       	push	r28
    4936:	df 93       	push	r29
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
	/* The pin used as BLANK is also !SS pin, thus it has to be an
	 * output to stay in master SPI mode). */
	DDRB |=
    493c:	84 e2       	ldi	r24, 0x24	; 36
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	24 e2       	ldi	r18, 0x24	; 36
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	f9 01       	movw	r30, r18
    4946:	20 81       	ld	r18, Z
    4948:	26 60       	ori	r18, 0x06	; 6
    494a:	fc 01       	movw	r30, r24
    494c:	20 83       	st	Z, r18
		(1<<PB1)| // XLAT: output
		(1<<PB2); // BLANK: output
	DDRD |=
    494e:	8a e2       	ldi	r24, 0x2A	; 42
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	2a e2       	ldi	r18, 0x2A	; 42
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	f9 01       	movw	r30, r18
    4958:	20 81       	ld	r18, Z
    495a:	20 61       	ori	r18, 0x10	; 16
    495c:	fc 01       	movw	r30, r24
    495e:	20 83       	st	Z, r18
		(1<<PD4); // Debug LED: output

	pin_high(BLANK);
    4960:	85 e2       	ldi	r24, 0x25	; 37
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	25 e2       	ldi	r18, 0x25	; 37
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	f9 01       	movw	r30, r18
    496a:	20 81       	ld	r18, Z
    496c:	24 60       	ori	r18, 0x04	; 4
    496e:	fc 01       	movw	r30, r24
    4970:	20 83       	st	Z, r18
}
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	08 95       	ret

00004978 <init_spi>:

void init_spi(void)
{
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
	DDRB |=
    4980:	84 e2       	ldi	r24, 0x24	; 36
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	24 e2       	ldi	r18, 0x24	; 36
    4986:	30 e0       	ldi	r19, 0x00	; 0
    4988:	f9 01       	movw	r30, r18
    498a:	20 81       	ld	r18, Z
    498c:	2c 62       	ori	r18, 0x2C	; 44
    498e:	fc 01       	movw	r30, r24
    4990:	20 83       	st	Z, r18
		(1<<PB2)| // !SS: output
		(1<<PB3)| // MOSI: output
		(1<<PB5); // SCK: output

	SPCR |=
    4992:	8c e4       	ldi	r24, 0x4C	; 76
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	2c e4       	ldi	r18, 0x4C	; 76
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	f9 01       	movw	r30, r18
    499c:	20 81       	ld	r18, Z
    499e:	20 6d       	ori	r18, 0xD0	; 208
    49a0:	fc 01       	movw	r30, r24
    49a2:	20 83       	st	Z, r18
		(1<<SPE)|  // Enable SPI
		(1<<MSTR); // We want the to be a master

	/* Leaving SPI2X, SPR1, and SPR0 to initial zero value. That
	   runs SPI at f_osc / 4 = 4 MHz, when f_osc is 16 MHz */
}
    49a4:	df 91       	pop	r29
    49a6:	cf 91       	pop	r28
    49a8:	08 95       	ret

000049aa <init_blank_timer>:

void init_blank_timer(){
    49aa:	cf 93       	push	r28
    49ac:	df 93       	push	r29
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
	/* We have 12 bit PWM cycle on TLC5940, prescaler of 1024, and
	 * TLC5940 clock divider of 4. So we need to have output
	 * compare value (interrupt interval) of 2^12/1024*4-1 */

	// CTC with OCRA as TOP
	TCCR0A = (1 << WGM01);
    49b2:	84 e4       	ldi	r24, 0x44	; 68
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	22 e0       	ldi	r18, 0x02	; 2
    49b8:	fc 01       	movw	r30, r24
    49ba:	20 83       	st	Z, r18
	// Interrupt generation interval is set by dimmer
	tlc5940_set_dimming(255);
    49bc:	8f ef       	ldi	r24, 0xFF	; 255
    49be:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <tlc5940_set_dimming>
	// Prescaler clk_io / 1024
	TCCR0B |= (1 << CS02) | (1 << CS00);
    49c2:	85 e4       	ldi	r24, 0x45	; 69
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	25 e4       	ldi	r18, 0x45	; 69
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	f9 01       	movw	r30, r18
    49cc:	20 81       	ld	r18, Z
    49ce:	25 60       	ori	r18, 0x05	; 5
    49d0:	fc 01       	movw	r30, r24
    49d2:	20 83       	st	Z, r18
	// Not enabling interrupt. Done in powersave.c
}
    49d4:	df 91       	pop	r29
    49d6:	cf 91       	pop	r28
    49d8:	08 95       	ret

000049da <init_effect_timer>:

void init_effect_timer(){
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
	//CTC with OCRA as TOP
	TCCR2A |= (1 << WGM21);
    49e2:	80 eb       	ldi	r24, 0xB0	; 176
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	20 eb       	ldi	r18, 0xB0	; 176
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	f9 01       	movw	r30, r18
    49ec:	20 81       	ld	r18, Z
    49ee:	22 60       	ori	r18, 0x02	; 2
    49f0:	fc 01       	movw	r30, r24
    49f2:	20 83       	st	Z, r18
	/* Generate interrupt every 125x1024 cycles, which gives clock
	   granularity of 8ms @ 16MHz */
	OCR2A = 124;
    49f4:	83 eb       	ldi	r24, 0xB3	; 179
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	2c e7       	ldi	r18, 0x7C	; 124
    49fa:	fc 01       	movw	r30, r24
    49fc:	20 83       	st	Z, r18
	// Enable Timer Compare match A interrupt
	TIMSK2 |= (1 << OCIE2A);
    49fe:	80 e7       	ldi	r24, 0x70	; 112
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	20 e7       	ldi	r18, 0x70	; 112
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	f9 01       	movw	r30, r18
    4a08:	20 81       	ld	r18, Z
    4a0a:	22 60       	ori	r18, 0x02	; 2
    4a0c:	fc 01       	movw	r30, r24
    4a0e:	20 83       	st	Z, r18
	// Prescaler clk_io / 1024
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
    4a10:	81 eb       	ldi	r24, 0xB1	; 177
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	21 eb       	ldi	r18, 0xB1	; 177
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	f9 01       	movw	r30, r18
    4a1a:	20 81       	ld	r18, Z
    4a1c:	27 60       	ori	r18, 0x07	; 7
    4a1e:	fc 01       	movw	r30, r24
    4a20:	20 83       	st	Z, r18
}
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	08 95       	ret

00004a28 <initUSART>:

void initUSART(){
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62

	DDRD |= (1<<PD1);
    4a30:	8a e2       	ldi	r24, 0x2A	; 42
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	2a e2       	ldi	r18, 0x2A	; 42
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	f9 01       	movw	r30, r18
    4a3a:	20 81       	ld	r18, Z
    4a3c:	22 60       	ori	r18, 0x02	; 2
    4a3e:	fc 01       	movw	r30, r24
    4a40:	20 83       	st	Z, r18

	/* See more information about the macro usage:
	 * http://www.nongnu.org/avr-libc/user-manual/group__util__setbaud.html
	 */
	UBRR0H = UBRRH_VALUE;
    4a42:	85 ec       	ldi	r24, 0xC5	; 197
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	fc 01       	movw	r30, r24
    4a48:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
    4a4a:	84 ec       	ldi	r24, 0xC4	; 196
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	27 e6       	ldi	r18, 0x67	; 103
    4a50:	fc 01       	movw	r30, r24
    4a52:	20 83       	st	Z, r18
#if USE_2X
	UCSR0A |= (1 << U2X0);
#else
	UCSR0A &= ~(1 << U2X0);
    4a54:	80 ec       	ldi	r24, 0xC0	; 192
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	20 ec       	ldi	r18, 0xC0	; 192
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	f9 01       	movw	r30, r18
    4a5e:	20 81       	ld	r18, Z
    4a60:	2d 7f       	andi	r18, 0xFD	; 253
    4a62:	fc 01       	movw	r30, r24
    4a64:	20 83       	st	Z, r18
#endif

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
    4a66:	82 ec       	ldi	r24, 0xC2	; 194
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	22 ec       	ldi	r18, 0xC2	; 194
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	f9 01       	movw	r30, r18
    4a70:	20 81       	ld	r18, Z
    4a72:	26 60       	ori	r18, 0x06	; 6
    4a74:	fc 01       	movw	r30, r24
    4a76:	20 83       	st	Z, r18

	UCSR0B |= (1<<TXEN0);  // Transmit enable
    4a78:	81 ec       	ldi	r24, 0xC1	; 193
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	21 ec       	ldi	r18, 0xC1	; 193
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	f9 01       	movw	r30, r18
    4a82:	20 81       	ld	r18, Z
    4a84:	28 60       	ori	r18, 0x08	; 8
    4a86:	fc 01       	movw	r30, r24
    4a88:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXEN0);  // Receive enable
    4a8a:	81 ec       	ldi	r24, 0xC1	; 193
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	21 ec       	ldi	r18, 0xC1	; 193
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	f9 01       	movw	r30, r18
    4a94:	20 81       	ld	r18, Z
    4a96:	20 61       	ori	r18, 0x10	; 16
    4a98:	fc 01       	movw	r30, r24
    4a9a:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXCIE0); // Receive ready interrupt
    4a9c:	81 ec       	ldi	r24, 0xC1	; 193
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	21 ec       	ldi	r18, 0xC1	; 193
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	f9 01       	movw	r30, r18
    4aa6:	20 81       	ld	r18, Z
    4aa8:	20 68       	ori	r18, 0x80	; 128
    4aaa:	fc 01       	movw	r30, r24
    4aac:	20 83       	st	Z, r18
	UCSR0B |= (1<<TXCIE0); // transmit ready interrupt
    4aae:	81 ec       	ldi	r24, 0xC1	; 193
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	21 ec       	ldi	r18, 0xC1	; 193
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	20 81       	ld	r18, Z
    4aba:	20 64       	ori	r18, 0x40	; 64
    4abc:	fc 01       	movw	r30, r24
    4abe:	20 83       	st	Z, r18

}
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	08 95       	ret

00004ac6 <main>:
static void next_effect();
static void select_playlist_item(uint8_t index);
static void init_current_effect(void);
static void pick_startup_mode(void);

int main() {
    4ac6:	ef 92       	push	r14
    4ac8:	ff 92       	push	r15
    4aca:	0f 93       	push	r16
    4acc:	1f 93       	push	r17
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	2c 97       	sbiw	r28, 0x0c	; 12
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
	cli();
    4ae2:	f8 94       	cli

	wdt_disable(); // To make sure nothing weird happens
    4ae4:	88 e1       	ldi	r24, 0x18	; 24
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	80 93 60 00 	sts	0x0060, r24
    4aee:	10 92 60 00 	sts	0x0060, r1
    4af2:	0f be       	out	0x3f, r0	; 63
	init_tlc5940();
    4af4:	0e 94 9a 24 	call	0x4934	; 0x4934 <init_tlc5940>
	init_spi();
    4af8:	0e 94 bc 24 	call	0x4978	; 0x4978 <init_spi>
	init_ps();
    4afc:	0e 94 91 29 	call	0x5322	; 0x5322 <init_ps>

	init_blank_timer();
    4b00:	0e 94 d5 24 	call	0x49aa	; 0x49aa <init_blank_timer>
	init_effect_timer();
    4b04:	0e 94 ed 24 	call	0x49da	; 0x49da <init_effect_timer>
	
	init_playlist();
    4b08:	0e 94 66 28 	call	0x50cc	; 0x50cc <init_playlist.2094>
	
	initUSART();
    4b0c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <initUSART>
	sei();
    4b10:	78 94       	sei

	hcsr04_start_continuous_meas();
    4b12:	0e 94 42 24 	call	0x4884	; 0x4884 <hcsr04_start_continuous_meas>
	adc_start();
    4b16:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <adc_start>
	
	// Greet the serial user
	report(REPORT_BOOT);
    4b1a:	82 e4       	ldi	r24, 0x42	; 66
    4b1c:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <report.2098>

	// Select correct startup mode
	pick_startup_mode();
    4b20:	0e 94 53 28 	call	0x50a6	; 0x50a6 <pick_startup_mode.2106>

	while(1) {
		if(serial_available()) {
    4b24:	0e 94 b8 2a 	call	0x5570	; 0x5570 <serial_available>
    4b28:	88 23       	and	r24, r24
    4b2a:	61 f0       	breq	.+24     	; 0x4b44 <main+0x7e>
			uint8_t cmd = serial_read();
    4b2c:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <serial_read>
    4b30:	89 83       	std	Y+1, r24	; 0x01

			if (cmd == ESCAPE) process_cmd();
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	8e 37       	cpi	r24, 0x7E	; 126
    4b36:	19 f4       	brne	.+6      	; 0x4b3e <main+0x78>
    4b38:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <process_cmd.2108>
    4b3c:	03 c0       	rjmp	.+6      	; 0x4b44 <main+0x7e>
			else report(REPORT_JUNK_CHAR);
    4b3e:	80 e4       	ldi	r24, 0x40	; 64
    4b40:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <report.2098>
		}

		switch (mode) {
    4b44:	80 91 52 07 	lds	r24, 0x0752
    4b48:	88 2f       	mov	r24, r24
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	81 30       	cpi	r24, 0x01	; 1
    4b4e:	91 05       	cpc	r25, r1
    4b50:	a9 f1       	breq	.+106    	; 0x4bbc <main+0xf6>
    4b52:	82 30       	cpi	r24, 0x02	; 2
    4b54:	91 05       	cpc	r25, r1
    4b56:	1c f4       	brge	.+6      	; 0x4b5e <main+0x98>
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	39 f0       	breq	.+14     	; 0x4b6a <main+0xa4>
    4b5c:	e3 cf       	rjmp	.-58     	; 0x4b24 <main+0x5e>
    4b5e:	82 30       	cpi	r24, 0x02	; 2
    4b60:	91 05       	cpc	r25, r1
    4b62:	b9 f0       	breq	.+46     	; 0x4b92 <main+0xcc>
    4b64:	83 30       	cpi	r24, 0x03	; 3
    4b66:	91 05       	cpc	r25, r1
    4b68:	e9 f6       	brne	.-70     	; 0x4b24 <main+0x5e>
		case MODE_SLEEP:
			// Fall through to MODE_IDLE
		case MODE_IDLE:
			// No operation
			sleep_mode();
    4b6a:	83 e5       	ldi	r24, 0x53	; 83
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	23 e5       	ldi	r18, 0x53	; 83
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	f9 01       	movw	r30, r18
    4b74:	20 81       	ld	r18, Z
    4b76:	21 60       	ori	r18, 0x01	; 1
    4b78:	fc 01       	movw	r30, r24
    4b7a:	20 83       	st	Z, r18
    4b7c:	88 95       	sleep
    4b7e:	83 e5       	ldi	r24, 0x53	; 83
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	23 e5       	ldi	r18, 0x53	; 83
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	f9 01       	movw	r30, r18
    4b88:	20 81       	ld	r18, Z
    4b8a:	2e 7f       	andi	r18, 0xFE	; 254
    4b8c:	fc 01       	movw	r30, r24
    4b8e:	20 83       	st	Z, r18
    4b90:	c9 cf       	rjmp	.-110    	; 0x4b24 <main+0x5e>
			break;
		case MODE_PLAYLIST:
			ticks = centisecs();
    4b92:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <centisecs>
    4b96:	90 93 3f 07 	sts	0x073F, r25
    4b9a:	80 93 3e 07 	sts	0x073E, r24
			if (ticks > effect_length) {
    4b9e:	20 91 3e 07 	lds	r18, 0x073E
    4ba2:	30 91 3f 07 	lds	r19, 0x073F
    4ba6:	80 91 55 07 	lds	r24, 0x0755
    4baa:	90 91 56 07 	lds	r25, 0x0756
    4bae:	82 17       	cp	r24, r18
    4bb0:	93 07       	cpc	r25, r19
    4bb2:	20 f4       	brcc	.+8      	; 0x4bbc <main+0xf6>
				next_effect();
    4bb4:	0e 94 70 28 	call	0x50e0	; 0x50e0 <next_effect.2096>
				init_current_effect();
    4bb8:	0e 94 01 29 	call	0x5202	; 0x5202 <init_current_effect.2104>

			// no need to break!
			// fall to MODE_EFFECT on purpose
		case MODE_EFFECT:
			// If a buffer is not yet flipped
			if (flags.may_flip) break;
    4bbc:	80 91 af 07 	lds	r24, 0x07AF
    4bc0:	81 70       	andi	r24, 0x01	; 1
    4bc2:	88 23       	and	r24, r24
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <main+0x102>
    4bc6:	ae cf       	rjmp	.-164    	; 0x4b24 <main+0x5e>

			// Update clock and sensor values
			ticks = centisecs();
    4bc8:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <centisecs>
    4bcc:	90 93 3f 07 	sts	0x073F, r25
    4bd0:	80 93 3e 07 	sts	0x073E, r24
			sensors.distance1 = hcsr04_get_distance_in_cm();
    4bd4:	0e 94 59 24 	call	0x48b2	; 0x48b2 <hcsr04_get_distance_in_cm>
    4bd8:	80 93 06 01 	sts	0x0106, r24
			sensors.distance2 = hcsr04_get_distance_in_cm(); //TODO: use separate sensor
    4bdc:	0e 94 59 24 	call	0x48b2	; 0x48b2 <hcsr04_get_distance_in_cm>
    4be0:	80 93 07 01 	sts	0x0107, r24
			sensors.ambient_light = adc_get(0) >> 2;
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	0e 94 55 1e 	call	0x3caa	; 0x3caa <adc_get>
    4bea:	96 95       	lsr	r25
    4bec:	87 95       	ror	r24
    4bee:	96 95       	lsr	r25
    4bf0:	87 95       	ror	r24
    4bf2:	80 93 08 01 	sts	0x0108, r24
			sensors.sound_pressure_level = adc_get(1) >> 2;
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <adc_get>
    4bfc:	96 95       	lsr	r25
    4bfe:	87 95       	ror	r24
    4c00:	96 95       	lsr	r25
    4c02:	87 95       	ror	r24
    4c04:	80 93 09 01 	sts	0x0109, r24

			// Do the actual drawing
			draw_t draw = (draw_t)pgm_get(effect->draw,word);
    4c08:	80 91 53 07 	lds	r24, 0x0753
    4c0c:	90 91 54 07 	lds	r25, 0x0754
    4c10:	04 96       	adiw	r24, 0x04	; 4
    4c12:	9b 83       	std	Y+3, r25	; 0x03
    4c14:	8a 83       	std	Y+2, r24	; 0x02
    4c16:	8a 81       	ldd	r24, Y+2	; 0x02
    4c18:	9b 81       	ldd	r25, Y+3	; 0x03
    4c1a:	8c 01       	movw	r16, r24
    4c1c:	f8 01       	movw	r30, r16
    4c1e:	e5 90       	lpm	r14, Z+
    4c20:	f4 90       	lpm	r15, Z+
    4c22:	8f 01       	movw	r16, r30
    4c24:	fd 82       	std	Y+5, r15	; 0x05
    4c26:	ec 82       	std	Y+4, r14	; 0x04
    4c28:	1b 83       	std	Y+3, r17	; 0x03
    4c2a:	0a 83       	std	Y+2, r16	; 0x02
    4c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c30:	9f 83       	std	Y+7, r25	; 0x07
    4c32:	8e 83       	std	Y+6, r24	; 0x06
			if (draw != NULL) {
    4c34:	8e 81       	ldd	r24, Y+6	; 0x06
    4c36:	9f 81       	ldd	r25, Y+7	; 0x07
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	39 f0       	breq	.+14     	; 0x4c4a <main+0x184>
				draw();
    4c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    4c40:	fc 01       	movw	r30, r24
    4c42:	09 95       	icall
				allow_flipping(true);
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <allow_flipping>
			}

			// Slow down drawing if FPS is going to be too high
			uint16_t target_ticks =
				ticks + pgm_get(effect->minimum_ticks,byte);
    4c4a:	80 91 53 07 	lds	r24, 0x0753
    4c4e:	90 91 54 07 	lds	r25, 0x0754
    4c52:	07 96       	adiw	r24, 0x07	; 7
    4c54:	99 87       	std	Y+9, r25	; 0x09
    4c56:	88 87       	std	Y+8, r24	; 0x08
    4c58:	88 85       	ldd	r24, Y+8	; 0x08
    4c5a:	99 85       	ldd	r25, Y+9	; 0x09
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	14 91       	lpm	r17, Z+
    4c60:	1a 87       	std	Y+10, r17	; 0x0a
    4c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c64:	28 2f       	mov	r18, r24
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	80 91 3e 07 	lds	r24, 0x073E
    4c6c:	90 91 3f 07 	lds	r25, 0x073F
				draw();
				allow_flipping(true);
			}

			// Slow down drawing if FPS is going to be too high
			uint16_t target_ticks =
    4c70:	82 0f       	add	r24, r18
    4c72:	93 1f       	adc	r25, r19
    4c74:	9c 87       	std	Y+12, r25	; 0x0c
    4c76:	8b 87       	std	Y+11, r24	; 0x0b
    4c78:	13 c0       	rjmp	.+38     	; 0x4ca0 <main+0x1da>
				ticks + pgm_get(effect->minimum_ticks,byte);
			while (centisecs() < target_ticks ) {
				sleep_mode();
    4c7a:	83 e5       	ldi	r24, 0x53	; 83
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	23 e5       	ldi	r18, 0x53	; 83
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	f9 01       	movw	r30, r18
    4c84:	20 81       	ld	r18, Z
    4c86:	21 60       	ori	r18, 0x01	; 1
    4c88:	fc 01       	movw	r30, r24
    4c8a:	20 83       	st	Z, r18
    4c8c:	88 95       	sleep
    4c8e:	83 e5       	ldi	r24, 0x53	; 83
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	23 e5       	ldi	r18, 0x53	; 83
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	f9 01       	movw	r30, r18
    4c98:	20 81       	ld	r18, Z
    4c9a:	2e 7f       	andi	r18, 0xFE	; 254
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	20 83       	st	Z, r18
			}

			// Slow down drawing if FPS is going to be too high
			uint16_t target_ticks =
				ticks + pgm_get(effect->minimum_ticks,byte);
			while (centisecs() < target_ticks ) {
    4ca0:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <centisecs>
    4ca4:	9c 01       	movw	r18, r24
    4ca6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ca8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4caa:	28 17       	cp	r18, r24
    4cac:	39 07       	cpc	r19, r25
    4cae:	28 f3       	brcs	.-54     	; 0x4c7a <main+0x1b4>
    4cb0:	39 cf       	rjmp	.-398    	; 0x4b24 <main+0x5e>

00004cb2 <process_cmd.2108>:
 * Processes a command. The escape character is already read in
 * main(). This function may block because of reading serial data, but
 * that is okay for now.
 */
void process_cmd(void)
{
    4cb2:	ef 92       	push	r14
    4cb4:	ff 92       	push	r15
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	cd b7       	in	r28, 0x3d	; 61
    4cc0:	de b7       	in	r29, 0x3e	; 62
    4cc2:	ad 97       	sbiw	r28, 0x2d	; 45
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	de bf       	out	0x3e, r29	; 62
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	cd bf       	out	0x3d, r28	; 61
	uint8_t cmd = serial_read_blocking();
    4cce:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <serial_read_blocking>
    4cd2:	8d 83       	std	Y+5, r24	; 0x05

	if (cmd == ESCAPE) {
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	8e 37       	cpi	r24, 0x7E	; 126
    4cd8:	21 f4       	brne	.+8      	; 0x4ce2 <process_cmd.2108+0x30>
		// Put the character back
		serial_ungetc(ESCAPE);
    4cda:	8e e7       	ldi	r24, 0x7E	; 126
    4cdc:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <serial_ungetc>
    4ce0:	d5 c1       	rjmp	.+938    	; 0x508c <process_cmd.2108+0x3da>
		return; // Skip out:
	} if (cmd == CMD_NOTHING) {
    4ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce4:	8a 32       	cpi	r24, 0x2A	; 42
    4ce6:	09 f4       	brne	.+2      	; 0x4cea <process_cmd.2108+0x38>
    4ce8:	d1 c1       	rjmp	.+930    	; 0x508c <process_cmd.2108+0x3da>
		/* Outputs nothing, just ensures that previous command
		 * has ended */
		return;
	} ELSEIFCMD(CMD_STOP) {
    4cea:	8d 81       	ldd	r24, Y+5	; 0x05
    4cec:	8e 32       	cpi	r24, 0x2E	; 46
    4cee:	39 f4       	brne	.+14     	; 0x4cfe <process_cmd.2108+0x4c>
    4cf0:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4cf4:	88 23       	and	r24, r24
    4cf6:	19 f0       	breq	.+6      	; 0x4cfe <process_cmd.2108+0x4c>
		mode = MODE_IDLE;
    4cf8:	10 92 52 07 	sts	0x0752, r1
    4cfc:	c4 c1       	rjmp	.+904    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_CHANGE_EFFECT) {
    4cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4d00:	85 34       	cpi	r24, 0x45	; 69
    4d02:	41 f5       	brne	.+80     	; 0x4d54 <process_cmd.2108+0xa2>
    4d04:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4d08:	88 23       	and	r24, r24
    4d0a:	21 f1       	breq	.+72     	; 0x4d54 <process_cmd.2108+0xa2>
		uint8_t i;
		SERIAL_READ(i);
    4d0c:	ce 01       	movw	r24, r28
    4d0e:	8d 96       	adiw	r24, 0x2d	; 45
    4d10:	61 e0       	ldi	r22, 0x01	; 1
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <process_cmd.2108+0x6c>
    4d1c:	b1 c1       	rjmp	.+866    	; 0x5080 <process_cmd.2108+0x3ce>
		if (i >= effects_len)
    4d1e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d20:	80 91 0e 01 	lds	r24, 0x010E
    4d24:	98 17       	cp	r25, r24
    4d26:	08 f0       	brcs	.+2      	; 0x4d2a <process_cmd.2108+0x78>
    4d28:	a3 c1       	rjmp	.+838    	; 0x5070 <process_cmd.2108+0x3be>
			goto bad_arg_a;

		// Change mode and pick correct effect from the array.
		mode = MODE_EFFECT;
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	80 93 52 07 	sts	0x0752, r24
		effect = effects + i;
    4d30:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d32:	88 2f       	mov	r24, r24
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	8b 57       	subi	r24, 0x7B	; 123
    4d44:	9e 4f       	sbci	r25, 0xFE	; 254
    4d46:	90 93 54 07 	sts	0x0754, r25
    4d4a:	80 93 53 07 	sts	0x0753, r24

		// Prepare running of the new effect
		init_current_effect();
    4d4e:	0e 94 01 29 	call	0x5202	; 0x5202 <init_current_effect.2104>
    4d52:	99 c1       	rjmp	.+818    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_SELECT_PLAYLIST) {
    4d54:	8d 81       	ldd	r24, Y+5	; 0x05
    4d56:	80 35       	cpi	r24, 0x50	; 80
    4d58:	11 f5       	brne	.+68     	; 0x4d9e <process_cmd.2108+0xec>
    4d5a:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4d5e:	88 23       	and	r24, r24
    4d60:	f1 f0       	breq	.+60     	; 0x4d9e <process_cmd.2108+0xec>
		uint8_t i;
		SERIAL_READ(i);
    4d62:	ce 01       	movw	r24, r28
    4d64:	8c 96       	adiw	r24, 0x2c	; 44
    4d66:	61 e0       	ldi	r22, 0x01	; 1
    4d68:	70 e0       	ldi	r23, 0x00	; 0
    4d6a:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4d6e:	00 97       	sbiw	r24, 0x00	; 0
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <process_cmd.2108+0xc2>
    4d72:	86 c1       	rjmp	.+780    	; 0x5080 <process_cmd.2108+0x3ce>
		if (i >= playlists_len)
    4d74:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d76:	80 91 13 01 	lds	r24, 0x0113
    4d7a:	98 17       	cp	r25, r24
    4d7c:	08 f0       	brcs	.+2      	; 0x4d80 <process_cmd.2108+0xce>
    4d7e:	78 c1       	rjmp	.+752    	; 0x5070 <process_cmd.2108+0x3be>
			goto bad_arg_a;

		// Change mode and run init
		mode = MODE_PLAYLIST;
    4d80:	82 e0       	ldi	r24, 0x02	; 2
    4d82:	80 93 52 07 	sts	0x0752, r24
		select_playlist_item(playlists[i]);
    4d86:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d88:	88 2f       	mov	r24, r24
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	8d 54       	subi	r24, 0x4D	; 77
    4d8e:	99 4f       	sbci	r25, 0xF9	; 249
    4d90:	fc 01       	movw	r30, r24
    4d92:	80 81       	ld	r24, Z
    4d94:	0e 94 8e 28 	call	0x511c	; 0x511c <select_playlist_item.2089>
		init_current_effect();
    4d98:	0e 94 01 29 	call	0x5202	; 0x5202 <init_current_effect.2104>
    4d9c:	74 c1       	rjmp	.+744    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_SET_TIME) {
    4d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4da0:	84 35       	cpi	r24, 0x54	; 84
    4da2:	99 f4       	brne	.+38     	; 0x4dca <process_cmd.2108+0x118>
    4da4:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4da8:	88 23       	and	r24, r24
    4daa:	79 f0       	breq	.+30     	; 0x4dca <process_cmd.2108+0x118>
		time_t tmp_time;
		SERIAL_READ(tmp_time);
    4dac:	ce 01       	movw	r24, r28
    4dae:	88 96       	adiw	r24, 0x28	; 40
    4db0:	64 e0       	ldi	r22, 0x04	; 4
    4db2:	70 e0       	ldi	r23, 0x00	; 0
    4db4:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4db8:	84 30       	cpi	r24, 0x04	; 4
    4dba:	91 05       	cpc	r25, r1
    4dbc:	08 f4       	brcc	.+2      	; 0x4dc0 <process_cmd.2108+0x10e>
    4dbe:	60 c1       	rjmp	.+704    	; 0x5080 <process_cmd.2108+0x3ce>
		stime(&tmp_time);
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	88 96       	adiw	r24, 0x28	; 40
    4dc4:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <stime>
    4dc8:	5e c1       	rjmp	.+700    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_GET_TIME) {
    4dca:	8d 81       	ldd	r24, Y+5	; 0x05
    4dcc:	84 37       	cpi	r24, 0x74	; 116
    4dce:	a9 f4       	brne	.+42     	; 0x4dfa <process_cmd.2108+0x148>
    4dd0:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4dd4:	88 23       	and	r24, r24
    4dd6:	89 f0       	breq	.+34     	; 0x4dfa <process_cmd.2108+0x148>
		time_t tmp_time = time(NULL);
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <time>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	8c a3       	std	Y+36, r24	; 0x24
    4de6:	9d a3       	std	Y+37, r25	; 0x25
    4de8:	ae a3       	std	Y+38, r26	; 0x26
    4dea:	bf a3       	std	Y+39, r27	; 0x27
		sram_to_serial(&tmp_time,sizeof(time_t));
    4dec:	ce 01       	movw	r24, r28
    4dee:	84 96       	adiw	r24, 0x24	; 36
    4df0:	64 e0       	ldi	r22, 0x04	; 4
    4df2:	70 e0       	ldi	r23, 0x00	; 0
    4df4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <sram_to_serial>
    4df8:	46 c1       	rjmp	.+652    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_SET_SENSOR) {
    4dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4dfc:	83 35       	cpi	r24, 0x53	; 83
    4dfe:	c1 f5       	brne	.+112    	; 0x4e70 <process_cmd.2108+0x1be>
    4e00:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4e04:	88 23       	and	r24, r24
    4e06:	a1 f1       	breq	.+104    	; 0x4e70 <process_cmd.2108+0x1be>
		struct {
			uint8_t start;
			uint8_t len;
		} data;
		SERIAL_READ(data);
    4e08:	ce 01       	movw	r24, r28
    4e0a:	82 96       	adiw	r24, 0x22	; 34
    4e0c:	62 e0       	ldi	r22, 0x02	; 2
    4e0e:	70 e0       	ldi	r23, 0x00	; 0
    4e10:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4e14:	82 30       	cpi	r24, 0x02	; 2
    4e16:	91 05       	cpc	r25, r1
    4e18:	08 f4       	brcc	.+2      	; 0x4e1c <process_cmd.2108+0x16a>
    4e1a:	32 c1       	rjmp	.+612    	; 0x5080 <process_cmd.2108+0x3ce>

		// Check boundaries
		if (data.start >= sizeof(sensors_t))
    4e1c:	8a a1       	ldd	r24, Y+34	; 0x22
    4e1e:	86 30       	cpi	r24, 0x06	; 6
    4e20:	08 f0       	brcs	.+2      	; 0x4e24 <process_cmd.2108+0x172>
    4e22:	26 c1       	rjmp	.+588    	; 0x5070 <process_cmd.2108+0x3be>
			goto bad_arg_a;

		if (data.start + data.len > sizeof(sensors_t))
    4e24:	8a a1       	ldd	r24, Y+34	; 0x22
    4e26:	28 2f       	mov	r18, r24
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	8b a1       	ldd	r24, Y+35	; 0x23
    4e2c:	88 2f       	mov	r24, r24
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	82 0f       	add	r24, r18
    4e32:	93 1f       	adc	r25, r19
    4e34:	87 30       	cpi	r24, 0x07	; 7
    4e36:	91 05       	cpc	r25, r1
    4e38:	08 f0       	brcs	.+2      	; 0x4e3c <process_cmd.2108+0x18a>
    4e3a:	1e c1       	rjmp	.+572    	; 0x5078 <process_cmd.2108+0x3c6>
			goto bad_arg_b;

		// Fill in sensor structure
		void *p = &sensors;
    4e3c:	84 e0       	ldi	r24, 0x04	; 4
    4e3e:	91 e0       	ldi	r25, 0x01	; 1
    4e40:	9f 83       	std	Y+7, r25	; 0x07
    4e42:	8e 83       	std	Y+6, r24	; 0x06
		if (serial_to_sram(p+data.start,data.len) < data.len)
    4e44:	8b a1       	ldd	r24, Y+35	; 0x23
    4e46:	28 2f       	mov	r18, r24
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	8a a1       	ldd	r24, Y+34	; 0x22
    4e4c:	88 2f       	mov	r24, r24
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	4e 81       	ldd	r20, Y+6	; 0x06
    4e52:	5f 81       	ldd	r21, Y+7	; 0x07
    4e54:	84 0f       	add	r24, r20
    4e56:	95 1f       	adc	r25, r21
    4e58:	b9 01       	movw	r22, r18
    4e5a:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4e5e:	9c 01       	movw	r18, r24
    4e60:	8b a1       	ldd	r24, Y+35	; 0x23
    4e62:	88 2f       	mov	r24, r24
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	28 17       	cp	r18, r24
    4e68:	39 07       	cpc	r19, r25
    4e6a:	08 f4       	brcc	.+2      	; 0x4e6e <process_cmd.2108+0x1bc>
    4e6c:	09 c1       	rjmp	.+530    	; 0x5080 <process_cmd.2108+0x3ce>
    4e6e:	0b c1       	rjmp	.+534    	; 0x5086 <process_cmd.2108+0x3d4>
			goto interrupted;
	} ELSEIFCMD(CMD_LIST_EFFECTS) {
    4e70:	8d 81       	ldd	r24, Y+5	; 0x05
    4e72:	85 36       	cpi	r24, 0x65	; 101
    4e74:	e1 f4       	brne	.+56     	; 0x4eae <process_cmd.2108+0x1fc>
    4e76:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4e7a:	88 23       	and	r24, r24
    4e7c:	c1 f0       	breq	.+48     	; 0x4eae <process_cmd.2108+0x1fc>
		// Print effect names separated by '\0' character
		for (uint8_t i=0; i<effects_len; i++) {
    4e7e:	19 82       	std	Y+1, r1	; 0x01
    4e80:	10 c0       	rjmp	.+32     	; 0x4ea2 <process_cmd.2108+0x1f0>
			send_string_from_pgm(&effects[i].name);
    4e82:	89 81       	ldd	r24, Y+1	; 0x01
    4e84:	88 2f       	mov	r24, r24
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	88 0f       	add	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	88 0f       	add	r24, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	88 0f       	add	r24, r24
    4e92:	99 1f       	adc	r25, r25
    4e94:	8b 57       	subi	r24, 0x7B	; 123
    4e96:	9e 4f       	sbci	r25, 0xFE	; 254
    4e98:	0e 94 af 2b 	call	0x575e	; 0x575e <send_string_from_pgm>
		void *p = &sensors;
		if (serial_to_sram(p+data.start,data.len) < data.len)
			goto interrupted;
	} ELSEIFCMD(CMD_LIST_EFFECTS) {
		// Print effect names separated by '\0' character
		for (uint8_t i=0; i<effects_len; i++) {
    4e9c:	89 81       	ldd	r24, Y+1	; 0x01
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	89 83       	std	Y+1, r24	; 0x01
    4ea2:	80 91 0e 01 	lds	r24, 0x010E
    4ea6:	99 81       	ldd	r25, Y+1	; 0x01
    4ea8:	98 17       	cp	r25, r24
    4eaa:	58 f3       	brcs	.-42     	; 0x4e82 <process_cmd.2108+0x1d0>
    4eac:	ec c0       	rjmp	.+472    	; 0x5086 <process_cmd.2108+0x3d4>
			send_string_from_pgm(&effects[i].name);
		}
	} ELSEIFCMD(CMD_LIST_ACTIONS) {
    4eae:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb0:	81 36       	cpi	r24, 0x61	; 97
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <process_cmd.2108+0x204>
    4eb4:	60 c0       	rjmp	.+192    	; 0x4f76 <process_cmd.2108+0x2c4>
    4eb6:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4eba:	88 23       	and	r24, r24
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <process_cmd.2108+0x20e>
    4ebe:	5b c0       	rjmp	.+182    	; 0x4f76 <process_cmd.2108+0x2c4>
		// Report function pointers and their values.
		for (uint8_t i=0; i<cron_actions_len; i++) {
    4ec0:	1a 82       	std	Y+2, r1	; 0x02
    4ec2:	52 c0       	rjmp	.+164    	; 0x4f68 <process_cmd.2108+0x2b6>
			// Send function pointer, little-endian
			uint16_t fp = pgm_get(cron_actions[i].act,word);
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	88 2f       	mov	r24, r24
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	88 0f       	add	r24, r24
    4ecc:	99 1f       	adc	r25, r25
    4ece:	88 0f       	add	r24, r24
    4ed0:	99 1f       	adc	r25, r25
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	86 59       	subi	r24, 0x96	; 150
    4ed8:	92 4f       	sbci	r25, 0xF2	; 242
    4eda:	99 87       	std	Y+9, r25	; 0x09
    4edc:	88 87       	std	Y+8, r24	; 0x08
    4ede:	88 85       	ldd	r24, Y+8	; 0x08
    4ee0:	99 85       	ldd	r25, Y+9	; 0x09
    4ee2:	8c 01       	movw	r16, r24
    4ee4:	f8 01       	movw	r30, r16
    4ee6:	e5 90       	lpm	r14, Z+
    4ee8:	f4 90       	lpm	r15, Z+
    4eea:	8f 01       	movw	r16, r30
    4eec:	fb 86       	std	Y+11, r15	; 0x0b
    4eee:	ea 86       	std	Y+10, r14	; 0x0a
    4ef0:	19 87       	std	Y+9, r17	; 0x09
    4ef2:	08 87       	std	Y+8, r16	; 0x08
    4ef4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ef6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ef8:	9d 87       	std	Y+13, r25	; 0x0d
    4efa:	8c 87       	std	Y+12, r24	; 0x0c
			send_escaped(fp);
    4efc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4efe:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
			send_escaped(fp >> 8);
    4f02:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f04:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f06:	89 2f       	mov	r24, r25
    4f08:	99 27       	eor	r25, r25
    4f0a:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>

			// Send action and arg name
			send_string_from_pgm(&cron_actions[i].act_key);
    4f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f10:	88 2f       	mov	r24, r24
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	88 0f       	add	r24, r24
    4f16:	99 1f       	adc	r25, r25
    4f18:	88 0f       	add	r24, r24
    4f1a:	99 1f       	adc	r25, r25
    4f1c:	88 0f       	add	r24, r24
    4f1e:	99 1f       	adc	r25, r25
    4f20:	02 96       	adiw	r24, 0x02	; 2
    4f22:	86 59       	subi	r24, 0x96	; 150
    4f24:	92 4f       	sbci	r25, 0xF2	; 242
    4f26:	0e 94 af 2b 	call	0x575e	; 0x575e <send_string_from_pgm>
			send_string_from_pgm(&cron_actions[i].act_name);
    4f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2c:	88 2f       	mov	r24, r24
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	88 0f       	add	r24, r24
    4f32:	99 1f       	adc	r25, r25
    4f34:	88 0f       	add	r24, r24
    4f36:	99 1f       	adc	r25, r25
    4f38:	88 0f       	add	r24, r24
    4f3a:	99 1f       	adc	r25, r25
    4f3c:	04 96       	adiw	r24, 0x04	; 4
    4f3e:	86 59       	subi	r24, 0x96	; 150
    4f40:	92 4f       	sbci	r25, 0xF2	; 242
    4f42:	0e 94 af 2b 	call	0x575e	; 0x575e <send_string_from_pgm>
			send_string_from_pgm(&cron_actions[i].arg_name);
    4f46:	8a 81       	ldd	r24, Y+2	; 0x02
    4f48:	88 2f       	mov	r24, r24
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	88 0f       	add	r24, r24
    4f4e:	99 1f       	adc	r25, r25
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	88 0f       	add	r24, r24
    4f56:	99 1f       	adc	r25, r25
    4f58:	06 96       	adiw	r24, 0x06	; 6
    4f5a:	86 59       	subi	r24, 0x96	; 150
    4f5c:	92 4f       	sbci	r25, 0xF2	; 242
    4f5e:	0e 94 af 2b 	call	0x575e	; 0x575e <send_string_from_pgm>
		for (uint8_t i=0; i<effects_len; i++) {
			send_string_from_pgm(&effects[i].name);
		}
	} ELSEIFCMD(CMD_LIST_ACTIONS) {
		// Report function pointers and their values.
		for (uint8_t i=0; i<cron_actions_len; i++) {
    4f62:	8a 81       	ldd	r24, Y+2	; 0x02
    4f64:	8f 5f       	subi	r24, 0xFF	; 255
    4f66:	8a 83       	std	Y+2, r24	; 0x02
    4f68:	80 91 15 01 	lds	r24, 0x0115
    4f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6e:	98 17       	cp	r25, r24
    4f70:	08 f4       	brcc	.+2      	; 0x4f74 <process_cmd.2108+0x2c2>
    4f72:	a8 cf       	rjmp	.-176    	; 0x4ec4 <process_cmd.2108+0x212>
    4f74:	88 c0       	rjmp	.+272    	; 0x5086 <process_cmd.2108+0x3d4>
			// Send action and arg name
			send_string_from_pgm(&cron_actions[i].act_key);
			send_string_from_pgm(&cron_actions[i].act_name);
			send_string_from_pgm(&cron_actions[i].arg_name);
		}
	} ELSEIFCMD(CMD_RUN_ACTION) {
    4f76:	8d 81       	ldd	r24, Y+5	; 0x05
    4f78:	81 34       	cpi	r24, 0x41	; 65
    4f7a:	f1 f4       	brne	.+60     	; 0x4fb8 <process_cmd.2108+0x306>
    4f7c:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4f80:	88 23       	and	r24, r24
    4f82:	d1 f0       	breq	.+52     	; 0x4fb8 <process_cmd.2108+0x306>
		// Runs given action immediately
		struct {
			action_t act;
			uint8_t arg;
		} a;
		SERIAL_READ(a);
    4f84:	ce 01       	movw	r24, r28
    4f86:	4f 96       	adiw	r24, 0x1f	; 31
    4f88:	63 e0       	ldi	r22, 0x03	; 3
    4f8a:	70 e0       	ldi	r23, 0x00	; 0
    4f8c:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    4f90:	83 30       	cpi	r24, 0x03	; 3
    4f92:	91 05       	cpc	r25, r1
    4f94:	08 f4       	brcc	.+2      	; 0x4f98 <process_cmd.2108+0x2e6>
    4f96:	74 c0       	rjmp	.+232    	; 0x5080 <process_cmd.2108+0x3ce>
		if (!is_action_valid(a.act))
    4f98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f9a:	98 a1       	ldd	r25, Y+32	; 0x20
    4f9c:	0e 94 3e 21 	call	0x427c	; 0x427c <is_action_valid>
    4fa0:	98 2f       	mov	r25, r24
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	89 27       	eor	r24, r25
    4fa6:	88 23       	and	r24, r24
    4fa8:	09 f0       	breq	.+2      	; 0x4fac <process_cmd.2108+0x2fa>
    4faa:	62 c0       	rjmp	.+196    	; 0x5070 <process_cmd.2108+0x3be>
			goto bad_arg_a;
		a.act(a.arg);
    4fac:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4fae:	38 a1       	ldd	r19, Y+32	; 0x20
    4fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    4fb2:	f9 01       	movw	r30, r18
    4fb4:	09 95       	icall
    4fb6:	67 c0       	rjmp	.+206    	; 0x5086 <process_cmd.2108+0x3d4>
	} ELSEIFCMD(CMD_READ_CRONTAB) {
    4fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fba:	83 36       	cpi	r24, 0x63	; 99
    4fbc:	e1 f4       	brne	.+56     	; 0x4ff6 <process_cmd.2108+0x344>
    4fbe:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    4fc2:	88 23       	and	r24, r24
    4fc4:	c1 f0       	breq	.+48     	; 0x4ff6 <process_cmd.2108+0x344>
		// Print all entries in crontab
		for (uint8_t i=0; i<CRONTAB_SIZE; i++) {
    4fc6:	1b 82       	std	Y+3, r1	; 0x03
    4fc8:	12 c0       	rjmp	.+36     	; 0x4fee <process_cmd.2108+0x33c>
			// Read one crotab entry from EEPROM
			struct event e;
			get_crontab_entry(&e,i);
    4fca:	ce 01       	movw	r24, r28
    4fcc:	47 96       	adiw	r24, 0x17	; 23
    4fce:	6b 81       	ldd	r22, Y+3	; 0x03
    4fd0:	0e 94 b8 20 	call	0x4170	; 0x4170 <get_crontab_entry>

			// If it's end, stop reading, otherwise send bytes
			if (e.kind == END) break; // from for
    4fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    4fd8:	09 f4       	brne	.+2      	; 0x4fdc <process_cmd.2108+0x32a>
    4fda:	55 c0       	rjmp	.+170    	; 0x5086 <process_cmd.2108+0x3d4>
			sram_to_serial(&e,sizeof(e));
    4fdc:	ce 01       	movw	r24, r28
    4fde:	47 96       	adiw	r24, 0x17	; 23
    4fe0:	68 e0       	ldi	r22, 0x08	; 8
    4fe2:	70 e0       	ldi	r23, 0x00	; 0
    4fe4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <sram_to_serial>
		if (!is_action_valid(a.act))
			goto bad_arg_a;
		a.act(a.arg);
	} ELSEIFCMD(CMD_READ_CRONTAB) {
		// Print all entries in crontab
		for (uint8_t i=0; i<CRONTAB_SIZE; i++) {
    4fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fea:	8f 5f       	subi	r24, 0xFF	; 255
    4fec:	8b 83       	std	Y+3, r24	; 0x03
    4fee:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff0:	8a 30       	cpi	r24, 0x0A	; 10
    4ff2:	58 f3       	brcs	.-42     	; 0x4fca <process_cmd.2108+0x318>
    4ff4:	48 c0       	rjmp	.+144    	; 0x5086 <process_cmd.2108+0x3d4>

			// If it's end, stop reading, otherwise send bytes
			if (e.kind == END) break; // from for
			sram_to_serial(&e,sizeof(e));
		}
	} ELSEIFCMD(CMD_WRITE_CRONTAB) {
    4ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff8:	83 34       	cpi	r24, 0x43	; 67
    4ffa:	b1 f5       	brne	.+108    	; 0x5068 <process_cmd.2108+0x3b6>
    4ffc:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <answering.2101>
    5000:	88 23       	and	r24, r24
    5002:	91 f1       	breq	.+100    	; 0x5068 <process_cmd.2108+0x3b6>
		uint8_t i;
		for (i=0; i<CRONTAB_SIZE; i++) {
    5004:	1c 82       	std	Y+4, r1	; 0x04
    5006:	29 c0       	rjmp	.+82     	; 0x505a <process_cmd.2108+0x3a8>
			struct event e;

			/* Read a single element. If user stops
			 * sending in element boundary, that is
			 * acceptable. If not, then report error. */
			uint8_t bytes_read = serial_to_sram(&e,sizeof(e));
    5008:	ce 01       	movw	r24, r28
    500a:	0f 96       	adiw	r24, 0x0f	; 15
    500c:	68 e0       	ldi	r22, 0x08	; 8
    500e:	70 e0       	ldi	r23, 0x00	; 0
    5010:	0e 94 33 2c 	call	0x5866	; 0x5866 <serial_to_sram>
    5014:	8e 87       	std	Y+14, r24	; 0x0e
			if (bytes_read == 0) {
    5016:	8e 85       	ldd	r24, Y+14	; 0x0e
    5018:	88 23       	and	r24, r24
    501a:	11 f1       	breq	.+68     	; 0x5060 <process_cmd.2108+0x3ae>
				break; // It's okay to stop in element boundary
			} else if (bytes_read < sizeof(e)) {
    501c:	8e 85       	ldd	r24, Y+14	; 0x0e
    501e:	88 30       	cpi	r24, 0x08	; 8
    5020:	20 f4       	brcc	.+8      	; 0x502a <process_cmd.2108+0x378>
				send_escaped(RESP_INTERRUPTED);
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
    5028:	1b c0       	rjmp	.+54     	; 0x5060 <process_cmd.2108+0x3ae>
				break;
			}
			
			// Validating
			if (!is_event_valid(&e)) {
    502a:	ce 01       	movw	r24, r28
    502c:	0f 96       	adiw	r24, 0x0f	; 15
    502e:	0e 94 17 21 	call	0x422e	; 0x422e <is_event_valid>
    5032:	98 2f       	mov	r25, r24
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	89 27       	eor	r24, r25
    5038:	88 23       	and	r24, r24
    503a:	39 f0       	breq	.+14     	; 0x504a <process_cmd.2108+0x398>
				send_escaped(CRON_ITEM_NOT_VALID);
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
				send_escaped(i);
    5042:	8c 81       	ldd	r24, Y+4	; 0x04
    5044:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
    5048:	0b c0       	rjmp	.+22     	; 0x5060 <process_cmd.2108+0x3ae>
				break;
			}

			// Write to EEPROM
			set_crontab_entry(&e,i);
    504a:	ce 01       	movw	r24, r28
    504c:	0f 96       	adiw	r24, 0x0f	; 15
    504e:	6c 81       	ldd	r22, Y+4	; 0x04
    5050:	0e 94 f5 20 	call	0x41ea	; 0x41ea <set_crontab_entry>
			if (e.kind == END) break; // from for
			sram_to_serial(&e,sizeof(e));
		}
	} ELSEIFCMD(CMD_WRITE_CRONTAB) {
		uint8_t i;
		for (i=0; i<CRONTAB_SIZE; i++) {
    5054:	8c 81       	ldd	r24, Y+4	; 0x04
    5056:	8f 5f       	subi	r24, 0xFF	; 255
    5058:	8c 83       	std	Y+4, r24	; 0x04
    505a:	8c 81       	ldd	r24, Y+4	; 0x04
    505c:	8a 30       	cpi	r24, 0x0A	; 10
    505e:	a0 f2       	brcs	.-88     	; 0x5008 <process_cmd.2108+0x356>

		/* Truncating crontab to element count. This is done
		 * even in case of an error. In that case the crontab
		 * is truncated to the length of first valid
		 * entries. */
		truncate_crontab(i);
    5060:	8c 81       	ldd	r24, Y+4	; 0x04
    5062:	0e 94 da 20 	call	0x41b4	; 0x41b4 <truncate_crontab>
    5066:	0f c0       	rjmp	.+30     	; 0x5086 <process_cmd.2108+0x3d4>
	} else {
		report(REPORT_INVALID_CMD);
    5068:	8f e3       	ldi	r24, 0x3F	; 63
    506a:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <report.2098>
    506e:	0e c0       	rjmp	.+28     	; 0x508c <process_cmd.2108+0x3da>
		return;
	}
	goto out;

bad_arg_a:
	send_escaped(RESP_BAD_ARG_A);
    5070:	81 e0       	ldi	r24, 0x01	; 1
    5072:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
    5076:	07 c0       	rjmp	.+14     	; 0x5086 <process_cmd.2108+0x3d4>
	goto out;

bad_arg_b:
	send_escaped(RESP_BAD_ARG_B);
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
    507e:	03 c0       	rjmp	.+6      	; 0x5086 <process_cmd.2108+0x3d4>
	goto out;

interrupted:
	send_escaped(RESP_INTERRUPTED);
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
	goto out;

out:
	// All commands should be ended, successful or not
	report(REPORT_READY);
    5086:	89 e2       	ldi	r24, 0x29	; 41
    5088:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <report.2098>
}
    508c:	ad 96       	adiw	r28, 0x2d	; 45
    508e:	0f b6       	in	r0, 0x3f	; 63
    5090:	f8 94       	cli
    5092:	de bf       	out	0x3e, r29	; 62
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	cd bf       	out	0x3d, r28	; 61
    5098:	df 91       	pop	r29
    509a:	cf 91       	pop	r28
    509c:	1f 91       	pop	r17
    509e:	0f 91       	pop	r16
    50a0:	ff 90       	pop	r15
    50a2:	ef 90       	pop	r14
    50a4:	08 95       	ret

000050a6 <pick_startup_mode.2106>:
		mode = MODE_IDLE;
	}
}
#else
static void pick_startup_mode(void)
{
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
	// Quick fix to start in kiosk mode
	mode = MODE_PLAYLIST;
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	80 93 52 07 	sts	0x0752, r24
	select_playlist_item(playlists[0]);
    50b4:	80 91 b3 06 	lds	r24, 0x06B3
    50b8:	0e 94 8e 28 	call	0x511c	; 0x511c <select_playlist_item.2089>
	init_current_effect();
    50bc:	0e 94 01 29 	call	0x5202	; 0x5202 <init_current_effect.2104>

	// Shut down the cube at the beginning
	cube_shutdown(0);
    50c0:	80 e0       	ldi	r24, 0x00	; 0
    50c2:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <cube_shutdown>
}
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	08 95       	ret

000050cc <init_playlist.2094>:
#endif

static void init_playlist(void) {
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
    50d0:	cd b7       	in	r28, 0x3d	; 61
    50d2:	de b7       	in	r29, 0x3e	; 62
	select_playlist_item(0);
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	0e 94 8e 28 	call	0x511c	; 0x511c <select_playlist_item.2089>
}
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	08 95       	ret

000050e0 <next_effect.2096>:

static void next_effect() {
    50e0:	cf 93       	push	r28
    50e2:	df 93       	push	r29
    50e4:	cd b7       	in	r28, 0x3d	; 61
    50e6:	de b7       	in	r29, 0x3e	; 62
	if(active_effect + 1 == master_playlist_len) select_playlist_item(0);
    50e8:	80 91 57 07 	lds	r24, 0x0757
    50ec:	88 2f       	mov	r24, r24
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	9c 01       	movw	r18, r24
    50f2:	2f 5f       	subi	r18, 0xFF	; 255
    50f4:	3f 4f       	sbci	r19, 0xFF	; 255
    50f6:	80 91 12 01 	lds	r24, 0x0112
    50fa:	88 2f       	mov	r24, r24
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	28 17       	cp	r18, r24
    5100:	39 07       	cpc	r19, r25
    5102:	21 f4       	brne	.+8      	; 0x510c <next_effect.2096+0x2c>
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	0e 94 8e 28 	call	0x511c	; 0x511c <select_playlist_item.2089>
    510a:	05 c0       	rjmp	.+10     	; 0x5116 <next_effect.2096+0x36>
	else select_playlist_item(active_effect + 1);
    510c:	80 91 57 07 	lds	r24, 0x0757
    5110:	8f 5f       	subi	r24, 0xFF	; 255
    5112:	0e 94 8e 28 	call	0x511c	; 0x511c <select_playlist_item.2089>
}
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	08 95       	ret

0000511c <select_playlist_item.2089>:

static void select_playlist_item(uint8_t index) {
    511c:	ef 92       	push	r14
    511e:	ff 92       	push	r15
    5120:	0f 93       	push	r16
    5122:	1f 93       	push	r17
    5124:	cf 93       	push	r28
    5126:	df 93       	push	r29
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	2f 97       	sbiw	r28, 0x0f	; 15
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	8f 87       	std	Y+15, r24	; 0x0f
	active_effect = index;
    513a:	8f 85       	ldd	r24, Y+15	; 0x0f
    513c:	80 93 57 07 	sts	0x0757, r24
	const playlistitem_t *item = master_playlist + index;
    5140:	8f 85       	ldd	r24, Y+15	; 0x0f
    5142:	28 2f       	mov	r18, r24
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	c9 01       	movw	r24, r18
    5148:	88 0f       	add	r24, r24
    514a:	99 1f       	adc	r25, r25
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	82 0f       	add	r24, r18
    5152:	93 1f       	adc	r25, r19
    5154:	8c 54       	subi	r24, 0x4C	; 76
    5156:	9a 4f       	sbci	r25, 0xFA	; 250
    5158:	9a 83       	std	Y+2, r25	; 0x02
    515a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t e_id = pgm_get(item->id,byte);
    515c:	89 81       	ldd	r24, Y+1	; 0x01
    515e:	9a 81       	ldd	r25, Y+2	; 0x02
    5160:	9c 83       	std	Y+4, r25	; 0x04
    5162:	8b 83       	std	Y+3, r24	; 0x03
    5164:	8b 81       	ldd	r24, Y+3	; 0x03
    5166:	9c 81       	ldd	r25, Y+4	; 0x04
    5168:	fc 01       	movw	r30, r24
    516a:	14 91       	lpm	r17, Z+
    516c:	1d 83       	std	Y+5, r17	; 0x05
    516e:	8d 81       	ldd	r24, Y+5	; 0x05
    5170:	8e 83       	std	Y+6, r24	; 0x06
	effect = effects + e_id;
    5172:	8e 81       	ldd	r24, Y+6	; 0x06
    5174:	88 2f       	mov	r24, r24
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	88 0f       	add	r24, r24
    517a:	99 1f       	adc	r25, r25
    517c:	88 0f       	add	r24, r24
    517e:	99 1f       	adc	r25, r25
    5180:	88 0f       	add	r24, r24
    5182:	99 1f       	adc	r25, r25
    5184:	8b 57       	subi	r24, 0x7B	; 123
    5186:	9e 4f       	sbci	r25, 0xFE	; 254
    5188:	90 93 54 07 	sts	0x0754, r25
    518c:	80 93 53 07 	sts	0x0753, r24
	effect_length = pgm_get(item->length,word);
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	9a 81       	ldd	r25, Y+2	; 0x02
    5194:	01 96       	adiw	r24, 0x01	; 1
    5196:	98 87       	std	Y+8, r25	; 0x08
    5198:	8f 83       	std	Y+7, r24	; 0x07
    519a:	8f 81       	ldd	r24, Y+7	; 0x07
    519c:	98 85       	ldd	r25, Y+8	; 0x08
    519e:	8c 01       	movw	r16, r24
    51a0:	f8 01       	movw	r30, r16
    51a2:	e5 90       	lpm	r14, Z+
    51a4:	f4 90       	lpm	r15, Z+
    51a6:	8f 01       	movw	r16, r30
    51a8:	fa 86       	std	Y+10, r15	; 0x0a
    51aa:	e9 86       	std	Y+9, r14	; 0x09
    51ac:	18 87       	std	Y+8, r17	; 0x08
    51ae:	0f 83       	std	Y+7, r16	; 0x07
    51b0:	89 85       	ldd	r24, Y+9	; 0x09
    51b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51b4:	90 93 56 07 	sts	0x0756, r25
    51b8:	80 93 55 07 	sts	0x0755, r24
	custom_data = (void*)pgm_get(item->data,word);
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	9a 81       	ldd	r25, Y+2	; 0x02
    51c0:	03 96       	adiw	r24, 0x03	; 3
    51c2:	9c 87       	std	Y+12, r25	; 0x0c
    51c4:	8b 87       	std	Y+11, r24	; 0x0b
    51c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    51c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    51ca:	8c 01       	movw	r16, r24
    51cc:	f8 01       	movw	r30, r16
    51ce:	e5 90       	lpm	r14, Z+
    51d0:	f4 90       	lpm	r15, Z+
    51d2:	8f 01       	movw	r16, r30
    51d4:	fe 86       	std	Y+14, r15	; 0x0e
    51d6:	ed 86       	std	Y+13, r14	; 0x0d
    51d8:	1c 87       	std	Y+12, r17	; 0x0c
    51da:	0b 87       	std	Y+11, r16	; 0x0b
    51dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51de:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e0:	90 93 41 07 	sts	0x0741, r25
    51e4:	80 93 40 07 	sts	0x0740, r24
}
    51e8:	2f 96       	adiw	r28, 0x0f	; 15
    51ea:	0f b6       	in	r0, 0x3f	; 63
    51ec:	f8 94       	cli
    51ee:	de bf       	out	0x3e, r29	; 62
    51f0:	0f be       	out	0x3f, r0	; 63
    51f2:	cd bf       	out	0x3d, r28	; 61
    51f4:	df 91       	pop	r29
    51f6:	cf 91       	pop	r28
    51f8:	1f 91       	pop	r17
    51fa:	0f 91       	pop	r16
    51fc:	ff 90       	pop	r15
    51fe:	ef 90       	pop	r14
    5200:	08 95       	ret

00005202 <init_current_effect.2104>:

static void init_current_effect(void) {
    5202:	ef 92       	push	r14
    5204:	ff 92       	push	r15
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	29 97       	sbiw	r28, 0x09	; 9
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
	// Disable flipping until first frame is drawn
	allow_flipping(false);
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <allow_flipping>

	/* Restore front and back buffer pointers to point to
	 * different locations */
	gs_restore_bufs();
    5224:	0e 94 02 07 	call	0xe04	; 0xe04 <gs_restore_bufs>

	// Set up rng
	srand_from_clock();
    5228:	0e 94 91 20 	call	0x4122	; 0x4122 <srand_from_clock>

	// Run initializer
	init_t init = (init_t)pgm_get(effect->init, word);
    522c:	80 91 53 07 	lds	r24, 0x0753
    5230:	90 91 54 07 	lds	r25, 0x0754
    5234:	02 96       	adiw	r24, 0x02	; 2
    5236:	9a 83       	std	Y+2, r25	; 0x02
    5238:	89 83       	std	Y+1, r24	; 0x01
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	9a 81       	ldd	r25, Y+2	; 0x02
    523e:	8c 01       	movw	r16, r24
    5240:	f8 01       	movw	r30, r16
    5242:	e5 90       	lpm	r14, Z+
    5244:	f4 90       	lpm	r15, Z+
    5246:	8f 01       	movw	r16, r30
    5248:	fc 82       	std	Y+4, r15	; 0x04
    524a:	eb 82       	std	Y+3, r14	; 0x03
    524c:	1a 83       	std	Y+2, r17	; 0x02
    524e:	09 83       	std	Y+1, r16	; 0x01
    5250:	8b 81       	ldd	r24, Y+3	; 0x03
    5252:	9c 81       	ldd	r25, Y+4	; 0x04
    5254:	9e 83       	std	Y+6, r25	; 0x06
    5256:	8d 83       	std	Y+5, r24	; 0x05
	if (init != NULL) init();
    5258:	8d 81       	ldd	r24, Y+5	; 0x05
    525a:	9e 81       	ldd	r25, Y+6	; 0x06
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	21 f0       	breq	.+8      	; 0x5268 <init_current_effect.2104+0x66>
    5260:	8d 81       	ldd	r24, Y+5	; 0x05
    5262:	9e 81       	ldd	r25, Y+6	; 0x06
    5264:	fc 01       	movw	r30, r24
    5266:	09 95       	icall
	gs_buf_swap();
    5268:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <gs_buf_swap>
	
	/* If NO_FLIP, we "broke" flipping if required by pointing
	 * both buffers to the same location */
	if (pgm_get(effect->flip_buffers, byte) == NO_FLIP) {
    526c:	80 91 53 07 	lds	r24, 0x0753
    5270:	90 91 54 07 	lds	r25, 0x0754
    5274:	06 96       	adiw	r24, 0x06	; 6
    5276:	98 87       	std	Y+8, r25	; 0x08
    5278:	8f 83       	std	Y+7, r24	; 0x07
    527a:	8f 81       	ldd	r24, Y+7	; 0x07
    527c:	98 85       	ldd	r25, Y+8	; 0x08
    527e:	fc 01       	movw	r30, r24
    5280:	14 91       	lpm	r17, Z+
    5282:	19 87       	std	Y+9, r17	; 0x09
    5284:	89 85       	ldd	r24, Y+9	; 0x09
    5286:	88 23       	and	r24, r24
    5288:	41 f4       	brne	.+16     	; 0x529a <init_current_effect.2104+0x98>
		gs_buf_back = gs_buf_front;
    528a:	80 91 00 01 	lds	r24, 0x0100
    528e:	90 91 01 01 	lds	r25, 0x0101
    5292:	90 93 03 01 	sts	0x0103, r25
    5296:	80 93 02 01 	sts	0x0102, r24
	}
	
	// Restart tick counter
	reset_time();
    529a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <reset_time>
}
    529e:	29 96       	adiw	r28, 0x09	; 9
    52a0:	0f b6       	in	r0, 0x3f	; 63
    52a2:	f8 94       	cli
    52a4:	de bf       	out	0x3e, r29	; 62
    52a6:	0f be       	out	0x3f, r0	; 63
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	1f 91       	pop	r17
    52b0:	0f 91       	pop	r16
    52b2:	ff 90       	pop	r15
    52b4:	ef 90       	pop	r14
    52b6:	08 95       	ret

000052b8 <report.2098>:


/**
 * Send response via serial port.
 */
static void report(uint8_t code) {
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	1f 92       	push	r1
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	89 83       	std	Y+1, r24	; 0x01
	serial_send(ESCAPE);
    52c4:	8e e7       	ldi	r24, 0x7E	; 126
    52c6:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	serial_send(code);
    52ca:	89 81       	ldd	r24, Y+1	; 0x01
    52cc:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
}
    52d0:	0f 90       	pop	r0
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	08 95       	ret

000052d8 <answering.2101>:

static bool answering(void) {
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	cd b7       	in	r28, 0x3d	; 61
    52de:	de b7       	in	r29, 0x3e	; 62
	report(REPORT_ANSWERING);
    52e0:	88 e2       	ldi	r24, 0x28	; 40
    52e2:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <report.2098>
	return true;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
}
    52e8:	df 91       	pop	r29
    52ea:	cf 91       	pop	r28
    52ec:	08 95       	ret

000052ee <__vector_default>:

//If an interrupt happens and there isn't an interrupt handler, we go here!
ISR(BADISR_vect)
{
    52ee:	1f 92       	push	r1
    52f0:	0f 92       	push	r0
    52f2:	00 90 5f 00 	lds	r0, 0x005F
    52f6:	0f 92       	push	r0
    52f8:	11 24       	eor	r1, r1
    52fa:	2f 93       	push	r18
    52fc:	3f 93       	push	r19
    52fe:	8f 93       	push	r24
    5300:	9f 93       	push	r25
    5302:	ef 93       	push	r30
    5304:	ff 93       	push	r31
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	cd b7       	in	r28, 0x3d	; 61
    530c:	de b7       	in	r29, 0x3e	; 62
	pin_high(DEBUG_LED); //Give us an indication about an error condition...
    530e:	8b e2       	ldi	r24, 0x2B	; 43
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	2b e2       	ldi	r18, 0x2B	; 43
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	f9 01       	movw	r30, r18
    5318:	20 81       	ld	r18, Z
    531a:	20 61       	ori	r18, 0x10	; 16
    531c:	fc 01       	movw	r30, r24
    531e:	20 83       	st	Z, r18
    5320:	ff cf       	rjmp	.-2      	; 0x5320 <__vector_default+0x32>

00005322 <init_ps>:
#include "main.h"

uint8_t old_mode;

void init_ps(void)
{
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	cd b7       	in	r28, 0x3d	; 61
    5328:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD3); // PS_ON: output
    532a:	8a e2       	ldi	r24, 0x2A	; 42
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	2a e2       	ldi	r18, 0x2A	; 42
    5330:	30 e0       	ldi	r19, 0x00	; 0
    5332:	f9 01       	movw	r30, r18
    5334:	20 81       	ld	r18, Z
    5336:	28 60       	ori	r18, 0x08	; 8
    5338:	fc 01       	movw	r30, r24
    533a:	20 83       	st	Z, r18
	// PS_ON is low on startup
}
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	08 95       	ret

00005342 <cube_start>:

void cube_start(uint8_t unused)
{
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	1f 92       	push	r1
    5348:	cd b7       	in	r28, 0x3d	; 61
    534a:	de b7       	in	r29, 0x3e	; 62
    534c:	89 83       	std	Y+1, r24	; 0x01
	// Set sleep mode to lighter
	mode = old_mode;
    534e:	80 91 58 07 	lds	r24, 0x0758
    5352:	80 93 52 07 	sts	0x0752, r24

	power_adc_enable();
    5356:	84 e6       	ldi	r24, 0x64	; 100
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	24 e6       	ldi	r18, 0x64	; 100
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	f9 01       	movw	r30, r18
    5360:	20 81       	ld	r18, Z
    5362:	2e 7f       	andi	r18, 0xFE	; 254
    5364:	fc 01       	movw	r30, r24
    5366:	20 83       	st	Z, r18
	power_spi_enable();
    5368:	84 e6       	ldi	r24, 0x64	; 100
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	24 e6       	ldi	r18, 0x64	; 100
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	f9 01       	movw	r30, r18
    5372:	20 81       	ld	r18, Z
    5374:	2b 7f       	andi	r18, 0xFB	; 251
    5376:	fc 01       	movw	r30, r24
    5378:	20 83       	st	Z, r18
	power_timer0_enable();
    537a:	84 e6       	ldi	r24, 0x64	; 100
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	24 e6       	ldi	r18, 0x64	; 100
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	f9 01       	movw	r30, r18
    5384:	20 81       	ld	r18, Z
    5386:	2f 7d       	andi	r18, 0xDF	; 223
    5388:	fc 01       	movw	r30, r24
    538a:	20 83       	st	Z, r18
	power_timer1_enable();
    538c:	84 e6       	ldi	r24, 0x64	; 100
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	24 e6       	ldi	r18, 0x64	; 100
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	f9 01       	movw	r30, r18
    5396:	20 81       	ld	r18, Z
    5398:	27 7f       	andi	r18, 0xF7	; 247
    539a:	fc 01       	movw	r30, r24
    539c:	20 83       	st	Z, r18

	// Enable BLANK timer interrupt (starts SPI)
	TIMSK0 |= (1 << OCIE0A);
    539e:	8e e6       	ldi	r24, 0x6E	; 110
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	2e e6       	ldi	r18, 0x6E	; 110
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	f9 01       	movw	r30, r18
    53a8:	20 81       	ld	r18, Z
    53aa:	22 60       	ori	r18, 0x02	; 2
    53ac:	fc 01       	movw	r30, r24
    53ae:	20 83       	st	Z, r18
}
    53b0:	0f 90       	pop	r0
    53b2:	df 91       	pop	r29
    53b4:	cf 91       	pop	r28
    53b6:	08 95       	ret

000053b8 <cube_shutdown>:

void cube_shutdown(uint8_t unused)
{
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	1f 92       	push	r1
    53be:	cd b7       	in	r28, 0x3d	; 61
    53c0:	de b7       	in	r29, 0x3e	; 62
    53c2:	89 83       	std	Y+1, r24	; 0x01
	// Set harder powersave mode
	old_mode = mode;
    53c4:	80 91 52 07 	lds	r24, 0x0752
    53c8:	80 93 58 07 	sts	0x0758, r24
	mode = MODE_SLEEP;
    53cc:	83 e0       	ldi	r24, 0x03	; 3
    53ce:	80 93 52 07 	sts	0x0752, r24
	power_adc_disable();
    53d2:	84 e6       	ldi	r24, 0x64	; 100
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	24 e6       	ldi	r18, 0x64	; 100
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	f9 01       	movw	r30, r18
    53dc:	20 81       	ld	r18, Z
    53de:	21 60       	ori	r18, 0x01	; 1
    53e0:	fc 01       	movw	r30, r24
    53e2:	20 83       	st	Z, r18
	power_spi_disable();
    53e4:	84 e6       	ldi	r24, 0x64	; 100
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	24 e6       	ldi	r18, 0x64	; 100
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	f9 01       	movw	r30, r18
    53ee:	20 81       	ld	r18, Z
    53f0:	24 60       	ori	r18, 0x04	; 4
    53f2:	fc 01       	movw	r30, r24
    53f4:	20 83       	st	Z, r18
	power_timer0_disable();
    53f6:	84 e6       	ldi	r24, 0x64	; 100
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	24 e6       	ldi	r18, 0x64	; 100
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	f9 01       	movw	r30, r18
    5400:	20 81       	ld	r18, Z
    5402:	20 62       	ori	r18, 0x20	; 32
    5404:	fc 01       	movw	r30, r24
    5406:	20 83       	st	Z, r18
	power_timer1_disable();
    5408:	84 e6       	ldi	r24, 0x64	; 100
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	24 e6       	ldi	r18, 0x64	; 100
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	f9 01       	movw	r30, r18
    5412:	20 81       	ld	r18, Z
    5414:	28 60       	ori	r18, 0x08	; 8
    5416:	fc 01       	movw	r30, r24
    5418:	20 83       	st	Z, r18

	/* Pulling BLANK down reduces current consumption to
	 * 50mA. Doing that. We pull all other signals low, too. */
	pin_high(BLANK);
    541a:	85 e2       	ldi	r24, 0x25	; 37
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	25 e2       	ldi	r18, 0x25	; 37
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	f9 01       	movw	r30, r18
    5424:	20 81       	ld	r18, Z
    5426:	24 60       	ori	r18, 0x04	; 4
    5428:	fc 01       	movw	r30, r24
    542a:	20 83       	st	Z, r18
	pin_low(XLAT);
    542c:	85 e2       	ldi	r24, 0x25	; 37
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	25 e2       	ldi	r18, 0x25	; 37
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	f9 01       	movw	r30, r18
    5436:	20 81       	ld	r18, Z
    5438:	2d 7f       	andi	r18, 0xFD	; 253
    543a:	fc 01       	movw	r30, r24
    543c:	20 83       	st	Z, r18
}
    543e:	0f 90       	pop	r0
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	08 95       	ret

00005446 <__iCliRetVal.2243>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    5446:	cf 93       	push	r28
    5448:	df 93       	push	r29
    544a:	cd b7       	in	r28, 0x3d	; 61
    544c:	de b7       	in	r29, 0x3e	; 62
    cli();
    544e:	f8 94       	cli
    return 1;
    5450:	81 e0       	ldi	r24, 0x01	; 1
}
    5452:	df 91       	pop	r29
    5454:	cf 91       	pop	r28
    5456:	08 95       	ret

00005458 <__iSeiParam.2247>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    5458:	cf 93       	push	r28
    545a:	df 93       	push	r29
    545c:	00 d0       	rcall	.+0      	; 0x545e <__iSeiParam.2247+0x6>
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	89 83       	std	Y+1, r24	; 0x01
    sei();
    5466:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    5468:	0f 90       	pop	r0
    546a:	0f 90       	pop	r0
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	08 95       	ret

00005472 <__vector_18>:

/**
 * Called when a byte is received from USART.
 */
ISR(USART_RX_vect)
{
    5472:	1f 92       	push	r1
    5474:	0f 92       	push	r0
    5476:	00 90 5f 00 	lds	r0, 0x005F
    547a:	0f 92       	push	r0
    547c:	11 24       	eor	r1, r1
    547e:	2f 93       	push	r18
    5480:	3f 93       	push	r19
    5482:	4f 93       	push	r20
    5484:	8f 93       	push	r24
    5486:	9f 93       	push	r25
    5488:	ef 93       	push	r30
    548a:	ff 93       	push	r31
    548c:	cf 93       	push	r28
    548e:	df 93       	push	r29
    5490:	cd b7       	in	r28, 0x3d	; 61
    5492:	de b7       	in	r29, 0x3e	; 62
	rx_buf[rx_in_i++] = UDR0;
    5494:	40 91 99 07 	lds	r20, 0x0799
    5498:	84 2f       	mov	r24, r20
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	26 ec       	ldi	r18, 0xC6	; 198
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	f9 01       	movw	r30, r18
    54a2:	20 81       	ld	r18, Z
    54a4:	87 5a       	subi	r24, 0xA7	; 167
    54a6:	98 4f       	sbci	r25, 0xF8	; 248
    54a8:	fc 01       	movw	r30, r24
    54aa:	20 83       	st	Z, r18
    54ac:	84 2f       	mov	r24, r20
    54ae:	8f 5f       	subi	r24, 0xFF	; 255
    54b0:	80 93 99 07 	sts	0x0799, r24

	// Wrap to start
	if (rx_in_i == RX_BUF_SIZE) rx_in_i = 0;
    54b4:	80 91 99 07 	lds	r24, 0x0799
    54b8:	80 34       	cpi	r24, 0x40	; 64
    54ba:	11 f4       	brne	.+4      	; 0x54c0 <__vector_18+0x4e>
    54bc:	10 92 99 07 	sts	0x0799, r1
	
	if (rx_in_i == rx_out_i) {
    54c0:	90 91 99 07 	lds	r25, 0x0799
    54c4:	80 91 9a 07 	lds	r24, 0x079A
    54c8:	98 17       	cp	r25, r24
    54ca:	19 f4       	brne	.+6      	; 0x54d2 <__vector_18+0x60>
		// Overflow condition
		rx_state = TXRX_OVERFLOW;
    54cc:	81 e0       	ldi	r24, 0x01	; 1
    54ce:	80 93 ae 07 	sts	0x07AE, r24
	}
}
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	ff 91       	pop	r31
    54d8:	ef 91       	pop	r30
    54da:	9f 91       	pop	r25
    54dc:	8f 91       	pop	r24
    54de:	4f 91       	pop	r20
    54e0:	3f 91       	pop	r19
    54e2:	2f 91       	pop	r18
    54e4:	0f 90       	pop	r0
    54e6:	00 92 5f 00 	sts	0x005F, r0
    54ea:	0f 90       	pop	r0
    54ec:	1f 90       	pop	r1
    54ee:	18 95       	reti

000054f0 <__vector_20>:

/**
 * Called when USART has finished transmit.
 */
ISR(USART_TX_vect)
{
    54f0:	1f 92       	push	r1
    54f2:	0f 92       	push	r0
    54f4:	00 90 5f 00 	lds	r0, 0x005F
    54f8:	0f 92       	push	r0
    54fa:	11 24       	eor	r1, r1
    54fc:	2f 93       	push	r18
    54fe:	3f 93       	push	r19
    5500:	4f 93       	push	r20
    5502:	8f 93       	push	r24
    5504:	9f 93       	push	r25
    5506:	ef 93       	push	r30
    5508:	ff 93       	push	r31
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
	// If no data in buffer, then we just bail out.
	if (tx_in_i == tx_out_i) return;
    5512:	90 91 ab 07 	lds	r25, 0x07AB
    5516:	80 91 ac 07 	lds	r24, 0x07AC
    551a:	98 17       	cp	r25, r24
    551c:	d1 f0       	breq	.+52     	; 0x5552 <__vector_20+0x62>

	// If it overflows, do not fill console with garbage.
	if (tx_state == TXRX_OVERFLOW) return;
    551e:	80 91 ad 07 	lds	r24, 0x07AD
    5522:	81 30       	cpi	r24, 0x01	; 1
    5524:	b1 f0       	breq	.+44     	; 0x5552 <__vector_20+0x62>

	// Send the byte and wrap to start if needed
	UDR0 = tx_buf[tx_out_i++];
    5526:	86 ec       	ldi	r24, 0xC6	; 198
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	40 91 ac 07 	lds	r20, 0x07AC
    552e:	24 2f       	mov	r18, r20
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	25 56       	subi	r18, 0x65	; 101
    5534:	38 4f       	sbci	r19, 0xF8	; 248
    5536:	f9 01       	movw	r30, r18
    5538:	20 81       	ld	r18, Z
    553a:	fc 01       	movw	r30, r24
    553c:	20 83       	st	Z, r18
    553e:	84 2f       	mov	r24, r20
    5540:	8f 5f       	subi	r24, 0xFF	; 255
    5542:	80 93 ac 07 	sts	0x07AC, r24
	if (tx_out_i == TX_BUF_SIZE) tx_out_i = 0;
    5546:	80 91 ac 07 	lds	r24, 0x07AC
    554a:	80 31       	cpi	r24, 0x10	; 16
    554c:	11 f4       	brne	.+4      	; 0x5552 <__vector_20+0x62>
    554e:	10 92 ac 07 	sts	0x07AC, r1
}
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	ff 91       	pop	r31
    5558:	ef 91       	pop	r30
    555a:	9f 91       	pop	r25
    555c:	8f 91       	pop	r24
    555e:	4f 91       	pop	r20
    5560:	3f 91       	pop	r19
    5562:	2f 91       	pop	r18
    5564:	0f 90       	pop	r0
    5566:	00 92 5f 00 	sts	0x005F, r0
    556a:	0f 90       	pop	r0
    556c:	1f 90       	pop	r1
    556e:	18 95       	reti

00005570 <serial_available>:

uint8_t serial_available(void) {
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	1f 92       	push	r1
    5576:	cd b7       	in	r28, 0x3d	; 61
    5578:	de b7       	in	r29, 0x3e	; 62
	// If it overflows, do not let reads to happen
	if (rx_state == TXRX_OVERFLOW) return 0;
    557a:	80 91 ae 07 	lds	r24, 0x07AE
    557e:	81 30       	cpi	r24, 0x01	; 1
    5580:	11 f4       	brne	.+4      	; 0x5586 <serial_available+0x16>
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	12 c0       	rjmp	.+36     	; 0x55aa <serial_available+0x3a>

	uint8_t diff = rx_in_i - rx_out_i;
    5586:	90 91 99 07 	lds	r25, 0x0799
    558a:	80 91 9a 07 	lds	r24, 0x079A
    558e:	29 2f       	mov	r18, r25
    5590:	28 1b       	sub	r18, r24
    5592:	82 2f       	mov	r24, r18
    5594:	89 83       	std	Y+1, r24	; 0x01
	return (rx_in_i < rx_out_i) ? diff + RX_BUF_SIZE : diff;
    5596:	90 91 99 07 	lds	r25, 0x0799
    559a:	80 91 9a 07 	lds	r24, 0x079A
    559e:	98 17       	cp	r25, r24
    55a0:	18 f4       	brcc	.+6      	; 0x55a8 <serial_available+0x38>
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	80 5c       	subi	r24, 0xC0	; 192
    55a6:	01 c0       	rjmp	.+2      	; 0x55aa <serial_available+0x3a>
    55a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    55aa:	0f 90       	pop	r0
    55ac:	df 91       	pop	r29
    55ae:	cf 91       	pop	r28
    55b0:	08 95       	ret

000055b2 <serial_read>:
void serial_TX_empty(void) {
	tx_in_i = tx_out_i;
	tx_state = TXRX_OK;
}

uint8_t serial_read(void) {
    55b2:	cf 93       	push	r28
    55b4:	df 93       	push	r29
    55b6:	1f 92       	push	r1
    55b8:	cd b7       	in	r28, 0x3d	; 61
    55ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = rx_buf[rx_out_i++];
    55bc:	20 91 9a 07 	lds	r18, 0x079A
    55c0:	82 2f       	mov	r24, r18
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	87 5a       	subi	r24, 0xA7	; 167
    55c6:	98 4f       	sbci	r25, 0xF8	; 248
    55c8:	fc 01       	movw	r30, r24
    55ca:	80 81       	ld	r24, Z
    55cc:	89 83       	std	Y+1, r24	; 0x01
    55ce:	82 2f       	mov	r24, r18
    55d0:	8f 5f       	subi	r24, 0xFF	; 255
    55d2:	80 93 9a 07 	sts	0x079A, r24
	if (rx_out_i == RX_BUF_SIZE) rx_out_i = 0;
    55d6:	80 91 9a 07 	lds	r24, 0x079A
    55da:	80 34       	cpi	r24, 0x40	; 64
    55dc:	11 f4       	brne	.+4      	; 0x55e2 <serial_read+0x30>
    55de:	10 92 9a 07 	sts	0x079A, r1
	return data;
    55e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    55e4:	0f 90       	pop	r0
    55e6:	df 91       	pop	r29
    55e8:	cf 91       	pop	r28
    55ea:	08 95       	ret

000055ec <serial_ungetc>:

void serial_ungetc(uint8_t x)
{
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	1f 92       	push	r1
    55f2:	cd b7       	in	r28, 0x3d	; 61
    55f4:	de b7       	in	r29, 0x3e	; 62
    55f6:	89 83       	std	Y+1, r24	; 0x01
	// Done as single assignment this to avoid atomicity problem
	if (rx_out_i == 0) rx_out_i = RX_BUF_SIZE - 1;
    55f8:	80 91 9a 07 	lds	r24, 0x079A
    55fc:	88 23       	and	r24, r24
    55fe:	21 f4       	brne	.+8      	; 0x5608 <serial_ungetc+0x1c>
    5600:	8f e3       	ldi	r24, 0x3F	; 63
    5602:	80 93 9a 07 	sts	0x079A, r24
    5606:	05 c0       	rjmp	.+10     	; 0x5612 <serial_ungetc+0x26>
	else rx_out_i--;
    5608:	80 91 9a 07 	lds	r24, 0x079A
    560c:	81 50       	subi	r24, 0x01	; 1
    560e:	80 93 9a 07 	sts	0x079A, r24

	rx_buf[rx_out_i] = x;
    5612:	80 91 9a 07 	lds	r24, 0x079A
    5616:	88 2f       	mov	r24, r24
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	87 5a       	subi	r24, 0xA7	; 167
    561c:	98 4f       	sbci	r25, 0xF8	; 248
    561e:	29 81       	ldd	r18, Y+1	; 0x01
    5620:	fc 01       	movw	r30, r24
    5622:	20 83       	st	Z, r18

	if (rx_in_i == rx_out_i) {
    5624:	90 91 99 07 	lds	r25, 0x0799
    5628:	80 91 9a 07 	lds	r24, 0x079A
    562c:	98 17       	cp	r25, r24
    562e:	19 f4       	brne	.+6      	; 0x5636 <serial_ungetc+0x4a>
		// Overflow condition
		rx_state = TXRX_OVERFLOW;
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	80 93 ae 07 	sts	0x07AE, r24
	}
}
    5636:	0f 90       	pop	r0
    5638:	df 91       	pop	r29
    563a:	cf 91       	pop	r28
    563c:	08 95       	ret

0000563e <serial_send_nonblocking>:
	uint8_t diff = tx_out_i - tx_in_i - 1;
	return (tx_out_i < tx_in_i + 1) ? diff + TX_BUF_SIZE : diff;
}

void serial_send_nonblocking(uint8_t data)
{
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	00 d0       	rcall	.+0      	; 0x5644 <serial_send_nonblocking+0x6>
    5644:	1f 92       	push	r1
    5646:	cd b7       	in	r28, 0x3d	; 61
    5648:	de b7       	in	r29, 0x3e	; 62
    564a:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    564c:	1a 82       	std	Y+2, r1	; 0x02
    564e:	0e 94 23 2a 	call	0x5446	; 0x5446 <__iCliRetVal.2243>
    5652:	89 83       	std	Y+1, r24	; 0x01
    5654:	33 c0       	rjmp	.+102    	; 0x56bc <serial_send_nonblocking+0x7e>

		/* If buffer is empty and no byte is in transit, do not queue
		 * at all. */
		if (tx_in_i == tx_out_i && (UCSR0A & (1<<UDRE0))) {
    5656:	90 91 ab 07 	lds	r25, 0x07AB
    565a:	80 91 ac 07 	lds	r24, 0x07AC
    565e:	98 17       	cp	r25, r24
    5660:	81 f4       	brne	.+32     	; 0x5682 <serial_send_nonblocking+0x44>
    5662:	80 ec       	ldi	r24, 0xC0	; 192
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	fc 01       	movw	r30, r24
    5668:	80 81       	ld	r24, Z
    566a:	88 2f       	mov	r24, r24
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	80 72       	andi	r24, 0x20	; 32
    5670:	99 27       	eor	r25, r25
    5672:	00 97       	sbiw	r24, 0x00	; 0
    5674:	31 f0       	breq	.+12     	; 0x5682 <serial_send_nonblocking+0x44>
			UDR0 = data;
    5676:	86 ec       	ldi	r24, 0xC6	; 198
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	2b 81       	ldd	r18, Y+3	; 0x03
    567c:	fc 01       	movw	r30, r24
    567e:	20 83       	st	Z, r18
    5680:	20 c0       	rjmp	.+64     	; 0x56c2 <serial_send_nonblocking+0x84>
			return;
		}

		tx_buf[tx_in_i++] = data;
    5682:	20 91 ab 07 	lds	r18, 0x07AB
    5686:	82 2f       	mov	r24, r18
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	85 56       	subi	r24, 0x65	; 101
    568c:	98 4f       	sbci	r25, 0xF8	; 248
    568e:	3b 81       	ldd	r19, Y+3	; 0x03
    5690:	fc 01       	movw	r30, r24
    5692:	30 83       	st	Z, r19
    5694:	82 2f       	mov	r24, r18
    5696:	8f 5f       	subi	r24, 0xFF	; 255
    5698:	80 93 ab 07 	sts	0x07AB, r24

		// Wrap to start
		if (tx_in_i == TX_BUF_SIZE) tx_in_i = 0;
    569c:	80 91 ab 07 	lds	r24, 0x07AB
    56a0:	80 31       	cpi	r24, 0x10	; 16
    56a2:	11 f4       	brne	.+4      	; 0x56a8 <serial_send_nonblocking+0x6a>
    56a4:	10 92 ab 07 	sts	0x07AB, r1

		if (tx_in_i == tx_out_i) {
    56a8:	90 91 ab 07 	lds	r25, 0x07AB
    56ac:	80 91 ac 07 	lds	r24, 0x07AC
    56b0:	98 17       	cp	r25, r24
    56b2:	19 f4       	brne	.+6      	; 0x56ba <serial_send_nonblocking+0x7c>
			// Overflow condition
			tx_state = TXRX_OVERFLOW;
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	80 93 ad 07 	sts	0x07AD, r24
	return (tx_out_i < tx_in_i + 1) ? diff + TX_BUF_SIZE : diff;
}

void serial_send_nonblocking(uint8_t data)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    56ba:	19 82       	std	Y+1, r1	; 0x01
    56bc:	89 81       	ldd	r24, Y+1	; 0x01
    56be:	88 23       	and	r24, r24
    56c0:	51 f6       	brne	.-108    	; 0x5656 <serial_send_nonblocking+0x18>
    56c2:	ce 01       	movw	r24, r28
    56c4:	02 96       	adiw	r24, 0x02	; 2
    56c6:	0e 94 2c 2a 	call	0x5458	; 0x5458 <__iSeiParam.2247>
		if (tx_in_i == tx_out_i) {
			// Overflow condition
			tx_state = TXRX_OVERFLOW;
		}
	}
}
    56ca:	0f 90       	pop	r0
    56cc:	0f 90       	pop	r0
    56ce:	0f 90       	pop	r0
    56d0:	df 91       	pop	r29
    56d2:	cf 91       	pop	r28
    56d4:	08 95       	ret

000056d6 <serial_read_blocking>:

uint8_t serial_read_blocking(void) {
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	cd b7       	in	r28, 0x3d	; 61
    56dc:	de b7       	in	r29, 0x3e	; 62
    56de:	13 c0       	rjmp	.+38     	; 0x5706 <serial_read_blocking+0x30>
	while(!serial_available()) {
		sleep_mode();
    56e0:	83 e5       	ldi	r24, 0x53	; 83
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	23 e5       	ldi	r18, 0x53	; 83
    56e6:	30 e0       	ldi	r19, 0x00	; 0
    56e8:	f9 01       	movw	r30, r18
    56ea:	20 81       	ld	r18, Z
    56ec:	21 60       	ori	r18, 0x01	; 1
    56ee:	fc 01       	movw	r30, r24
    56f0:	20 83       	st	Z, r18
    56f2:	88 95       	sleep
    56f4:	83 e5       	ldi	r24, 0x53	; 83
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	23 e5       	ldi	r18, 0x53	; 83
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	f9 01       	movw	r30, r18
    56fe:	20 81       	ld	r18, Z
    5700:	2e 7f       	andi	r18, 0xFE	; 254
    5702:	fc 01       	movw	r30, r24
    5704:	20 83       	st	Z, r18
		}
	}
}

uint8_t serial_read_blocking(void) {
	while(!serial_available()) {
    5706:	0e 94 b8 2a 	call	0x5570	; 0x5570 <serial_available>
    570a:	88 23       	and	r24, r24
    570c:	49 f3       	breq	.-46     	; 0x56e0 <serial_read_blocking+0xa>
		sleep_mode();
	}
	return serial_read();
    570e:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <serial_read>
}
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	08 95       	ret

00005718 <serial_send>:

void serial_send(uint8_t data) {
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
    571c:	1f 92       	push	r1
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	89 83       	std	Y+1, r24	; 0x01
	while ((tx_in_i+1 == tx_out_i) ||
    5724:	80 91 ab 07 	lds	r24, 0x07AB
    5728:	88 2f       	mov	r24, r24
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	9c 01       	movw	r18, r24
    572e:	2f 5f       	subi	r18, 0xFF	; 255
    5730:	3f 4f       	sbci	r19, 0xFF	; 255
    5732:	80 91 ac 07 	lds	r24, 0x07AC
    5736:	88 2f       	mov	r24, r24
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	28 17       	cp	r18, r24
    573c:	39 07       	cpc	r19, r25
    573e:	91 f3       	breq	.-28     	; 0x5724 <serial_send+0xc>
	       (tx_in_i == TX_BUF_SIZE-1 && tx_out_i == 0));
    5740:	80 91 ab 07 	lds	r24, 0x07AB
	}
	return serial_read();
}

void serial_send(uint8_t data) {
	while ((tx_in_i+1 == tx_out_i) ||
    5744:	8f 30       	cpi	r24, 0x0F	; 15
    5746:	21 f4       	brne	.+8      	; 0x5750 <serial_send+0x38>
	       (tx_in_i == TX_BUF_SIZE-1 && tx_out_i == 0));
    5748:	80 91 ac 07 	lds	r24, 0x07AC
    574c:	88 23       	and	r24, r24
    574e:	51 f3       	breq	.-44     	; 0x5724 <serial_send+0xc>
	serial_send_nonblocking(data);
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	0e 94 1f 2b 	call	0x563e	; 0x563e <serial_send_nonblocking>
}
    5756:	0f 90       	pop	r0
    5758:	df 91       	pop	r29
    575a:	cf 91       	pop	r28
    575c:	08 95       	ret

0000575e <send_string_from_pgm>:
#include <stdlib.h>
#include "serial.h"
#include "serial_escaped.h"

void send_string_from_pgm(const char * const* pgm_p)
{
    575e:	ef 92       	push	r14
    5760:	ff 92       	push	r15
    5762:	0f 93       	push	r16
    5764:	1f 93       	push	r17
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
    576e:	2c 97       	sbiw	r28, 0x0c	; 12
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	de bf       	out	0x3e, r29	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	cd bf       	out	0x3d, r28	; 61
    577a:	9c 87       	std	Y+12, r25	; 0x0c
    577c:	8b 87       	std	Y+11, r24	; 0x0b
	char *p = (char*)pgm_read_word_near(pgm_p);
    577e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5780:	9c 85       	ldd	r25, Y+12	; 0x0c
    5782:	9c 83       	std	Y+4, r25	; 0x04
    5784:	8b 83       	std	Y+3, r24	; 0x03
    5786:	8b 81       	ldd	r24, Y+3	; 0x03
    5788:	9c 81       	ldd	r25, Y+4	; 0x04
    578a:	8c 01       	movw	r16, r24
    578c:	f8 01       	movw	r30, r16
    578e:	e5 90       	lpm	r14, Z+
    5790:	f4 90       	lpm	r15, Z+
    5792:	8f 01       	movw	r16, r30
    5794:	fe 82       	std	Y+6, r15	; 0x06
    5796:	ed 82       	std	Y+5, r14	; 0x05
    5798:	1c 83       	std	Y+4, r17	; 0x04
    579a:	0b 83       	std	Y+3, r16	; 0x03
    579c:	8d 81       	ldd	r24, Y+5	; 0x05
    579e:	9e 81       	ldd	r25, Y+6	; 0x06
    57a0:	9a 83       	std	Y+2, r25	; 0x02
    57a2:	89 83       	std	Y+1, r24	; 0x01
	char c;

	// If is NULL, print is as zero-length string
	if ( p == NULL) {
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
    57a6:	9a 81       	ldd	r25, Y+2	; 0x02
    57a8:	00 97       	sbiw	r24, 0x00	; 0
    57aa:	21 f4       	brne	.+8      	; 0x57b4 <send_string_from_pgm+0x56>
		send_escaped('\0');
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
    57b2:	16 c0       	rjmp	.+44     	; 0x57e0 <send_string_from_pgm+0x82>
		return;
	}
	
	// Read byte-by-byte and write, including NUL byte
	do {
		c = pgm_read_byte_near(p++);
    57b4:	89 81       	ldd	r24, Y+1	; 0x01
    57b6:	9a 81       	ldd	r25, Y+2	; 0x02
    57b8:	98 87       	std	Y+8, r25	; 0x08
    57ba:	8f 83       	std	Y+7, r24	; 0x07
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	9a 81       	ldd	r25, Y+2	; 0x02
    57c0:	01 96       	adiw	r24, 0x01	; 1
    57c2:	9a 83       	std	Y+2, r25	; 0x02
    57c4:	89 83       	std	Y+1, r24	; 0x01
    57c6:	8f 81       	ldd	r24, Y+7	; 0x07
    57c8:	98 85       	ldd	r25, Y+8	; 0x08
    57ca:	fc 01       	movw	r30, r24
    57cc:	14 91       	lpm	r17, Z+
    57ce:	19 87       	std	Y+9, r17	; 0x09
    57d0:	89 85       	ldd	r24, Y+9	; 0x09
    57d2:	8a 87       	std	Y+10, r24	; 0x0a
		send_escaped(c);
    57d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    57d6:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
	} while (c != '\0');
    57da:	8a 85       	ldd	r24, Y+10	; 0x0a
    57dc:	88 23       	and	r24, r24
    57de:	51 f7       	brne	.-44     	; 0x57b4 <send_string_from_pgm+0x56>
}
    57e0:	2c 96       	adiw	r28, 0x0c	; 12
    57e2:	0f b6       	in	r0, 0x3f	; 63
    57e4:	f8 94       	cli
    57e6:	de bf       	out	0x3e, r29	; 62
    57e8:	0f be       	out	0x3f, r0	; 63
    57ea:	cd bf       	out	0x3d, r28	; 61
    57ec:	df 91       	pop	r29
    57ee:	cf 91       	pop	r28
    57f0:	1f 91       	pop	r17
    57f2:	0f 91       	pop	r16
    57f4:	ff 90       	pop	r15
    57f6:	ef 90       	pop	r14
    57f8:	08 95       	ret

000057fa <sram_to_serial>:

void sram_to_serial(void *src, uint16_t n)
{
    57fa:	cf 93       	push	r28
    57fc:	df 93       	push	r29
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
    5802:	28 97       	sbiw	r28, 0x08	; 8
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	9e 83       	std	Y+6, r25	; 0x06
    5810:	8d 83       	std	Y+5, r24	; 0x05
    5812:	78 87       	std	Y+8, r23	; 0x08
    5814:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t *p = (uint8_t*)src;
    5816:	8d 81       	ldd	r24, Y+5	; 0x05
    5818:	9e 81       	ldd	r25, Y+6	; 0x06
    581a:	9a 83       	std	Y+2, r25	; 0x02
    581c:	89 83       	std	Y+1, r24	; 0x01
	for (int i=0; i<n; i++)
    581e:	1c 82       	std	Y+4, r1	; 0x04
    5820:	1b 82       	std	Y+3, r1	; 0x03
    5822:	11 c0       	rjmp	.+34     	; 0x5846 <sram_to_serial+0x4c>
		send_escaped(*p++);
    5824:	89 81       	ldd	r24, Y+1	; 0x01
    5826:	9a 81       	ldd	r25, Y+2	; 0x02
    5828:	fc 01       	movw	r30, r24
    582a:	20 81       	ld	r18, Z
    582c:	89 81       	ldd	r24, Y+1	; 0x01
    582e:	9a 81       	ldd	r25, Y+2	; 0x02
    5830:	01 96       	adiw	r24, 0x01	; 1
    5832:	9a 83       	std	Y+2, r25	; 0x02
    5834:	89 83       	std	Y+1, r24	; 0x01
    5836:	82 2f       	mov	r24, r18
    5838:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <send_escaped>
}

void sram_to_serial(void *src, uint16_t n)
{
	uint8_t *p = (uint8_t*)src;
	for (int i=0; i<n; i++)
    583c:	8b 81       	ldd	r24, Y+3	; 0x03
    583e:	9c 81       	ldd	r25, Y+4	; 0x04
    5840:	01 96       	adiw	r24, 0x01	; 1
    5842:	9c 83       	std	Y+4, r25	; 0x04
    5844:	8b 83       	std	Y+3, r24	; 0x03
    5846:	2b 81       	ldd	r18, Y+3	; 0x03
    5848:	3c 81       	ldd	r19, Y+4	; 0x04
    584a:	8f 81       	ldd	r24, Y+7	; 0x07
    584c:	98 85       	ldd	r25, Y+8	; 0x08
    584e:	28 17       	cp	r18, r24
    5850:	39 07       	cpc	r19, r25
    5852:	40 f3       	brcs	.-48     	; 0x5824 <sram_to_serial+0x2a>
		send_escaped(*p++);
}
    5854:	28 96       	adiw	r28, 0x08	; 8
    5856:	0f b6       	in	r0, 0x3f	; 63
    5858:	f8 94       	cli
    585a:	de bf       	out	0x3e, r29	; 62
    585c:	0f be       	out	0x3f, r0	; 63
    585e:	cd bf       	out	0x3d, r28	; 61
    5860:	df 91       	pop	r29
    5862:	cf 91       	pop	r28
    5864:	08 95       	ret

00005866 <serial_to_sram>:

uint16_t serial_to_sram(void *dest, uint16_t n)
{
    5866:	cf 93       	push	r28
    5868:	df 93       	push	r29
    586a:	cd b7       	in	r28, 0x3d	; 61
    586c:	de b7       	in	r29, 0x3e	; 62
    586e:	2a 97       	sbiw	r28, 0x0a	; 10
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	0f be       	out	0x3f, r0	; 63
    5878:	cd bf       	out	0x3d, r28	; 61
    587a:	98 87       	std	Y+8, r25	; 0x08
    587c:	8f 83       	std	Y+7, r24	; 0x07
    587e:	7a 87       	std	Y+10, r23	; 0x0a
    5880:	69 87       	std	Y+9, r22	; 0x09
	uint16_t i;
	uint8_t *byte_p = (uint8_t*)dest;
    5882:	8f 81       	ldd	r24, Y+7	; 0x07
    5884:	98 85       	ldd	r25, Y+8	; 0x08
    5886:	9c 83       	std	Y+4, r25	; 0x04
    5888:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0; i<n; i++) {
    588a:	1a 82       	std	Y+2, r1	; 0x02
    588c:	19 82       	std	Y+1, r1	; 0x01
    588e:	16 c0       	rjmp	.+44     	; 0x58bc <serial_to_sram+0x56>
		read_t x = read_escaped();
    5890:	0e 94 83 2c 	call	0x5906	; 0x5906 <read_escaped>
    5894:	9e 83       	std	Y+6, r25	; 0x06
    5896:	8d 83       	std	Y+5, r24	; 0x05
		if (!x.good)
    5898:	8d 81       	ldd	r24, Y+5	; 0x05
    589a:	88 23       	and	r24, r24
    589c:	b1 f0       	breq	.+44     	; 0x58ca <serial_to_sram+0x64>
			break;
		*byte_p++ = x.byte;
    589e:	2e 81       	ldd	r18, Y+6	; 0x06
    58a0:	8b 81       	ldd	r24, Y+3	; 0x03
    58a2:	9c 81       	ldd	r25, Y+4	; 0x04
    58a4:	fc 01       	movw	r30, r24
    58a6:	20 83       	st	Z, r18
    58a8:	8b 81       	ldd	r24, Y+3	; 0x03
    58aa:	9c 81       	ldd	r25, Y+4	; 0x04
    58ac:	01 96       	adiw	r24, 0x01	; 1
    58ae:	9c 83       	std	Y+4, r25	; 0x04
    58b0:	8b 83       	std	Y+3, r24	; 0x03

uint16_t serial_to_sram(void *dest, uint16_t n)
{
	uint16_t i;
	uint8_t *byte_p = (uint8_t*)dest;
	for (i=0; i<n; i++) {
    58b2:	89 81       	ldd	r24, Y+1	; 0x01
    58b4:	9a 81       	ldd	r25, Y+2	; 0x02
    58b6:	01 96       	adiw	r24, 0x01	; 1
    58b8:	9a 83       	std	Y+2, r25	; 0x02
    58ba:	89 83       	std	Y+1, r24	; 0x01
    58bc:	29 81       	ldd	r18, Y+1	; 0x01
    58be:	3a 81       	ldd	r19, Y+2	; 0x02
    58c0:	89 85       	ldd	r24, Y+9	; 0x09
    58c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c4:	28 17       	cp	r18, r24
    58c6:	39 07       	cpc	r19, r25
    58c8:	18 f3       	brcs	.-58     	; 0x5890 <serial_to_sram+0x2a>
		read_t x = read_escaped();
		if (!x.good)
			break;
		*byte_p++ = x.byte;
	}
	return i;
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    58ce:	2a 96       	adiw	r28, 0x0a	; 10
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	de bf       	out	0x3e, r29	; 62
    58d6:	0f be       	out	0x3f, r0	; 63
    58d8:	cd bf       	out	0x3d, r28	; 61
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	08 95       	ret

000058e0 <send_escaped>:

void send_escaped(uint8_t byte) {
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	1f 92       	push	r1
    58e6:	cd b7       	in	r28, 0x3d	; 61
    58e8:	de b7       	in	r29, 0x3e	; 62
    58ea:	89 83       	std	Y+1, r24	; 0x01
	serial_send(byte);
    58ec:	89 81       	ldd	r24, Y+1	; 0x01
    58ee:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
	if (byte == ESCAPE) serial_send(LITERAL_ESCAPE);
    58f2:	89 81       	ldd	r24, Y+1	; 0x01
    58f4:	8e 37       	cpi	r24, 0x7E	; 126
    58f6:	19 f4       	brne	.+6      	; 0x58fe <send_escaped+0x1e>
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	0e 94 8c 2b 	call	0x5718	; 0x5718 <serial_send>
}
    58fe:	0f 90       	pop	r0
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	08 95       	ret

00005906 <read_escaped>:

read_t read_escaped() {
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	00 d0       	rcall	.+0      	; 0x590c <read_escaped+0x6>
    590c:	cd b7       	in	r28, 0x3d	; 61
    590e:	de b7       	in	r29, 0x3e	; 62
	read_t ret = {1,0};
    5910:	81 e0       	ldi	r24, 0x01	; 1
    5912:	89 83       	std	Y+1, r24	; 0x01
    5914:	1a 82       	std	Y+2, r1	; 0x02
	ret.byte = serial_read_blocking();
    5916:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <serial_read_blocking>
    591a:	8a 83       	std	Y+2, r24	; 0x02

	if (ret.byte == ESCAPE) {
    591c:	8a 81       	ldd	r24, Y+2	; 0x02
    591e:	8e 37       	cpi	r24, 0x7E	; 126
    5920:	69 f4       	brne	.+26     	; 0x593c <read_escaped+0x36>
		ret.byte = serial_read_blocking();
    5922:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <serial_read_blocking>
    5926:	8a 83       	std	Y+2, r24	; 0x02
		if (ret.byte != LITERAL_ESCAPE) {
    5928:	8a 81       	ldd	r24, Y+2	; 0x02
    592a:	88 23       	and	r24, r24
    592c:	39 f0       	breq	.+14     	; 0x593c <read_escaped+0x36>
			// Put bytes back and report that we got nothing.
			serial_ungetc(ret.byte);
    592e:	8a 81       	ldd	r24, Y+2	; 0x02
    5930:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <serial_ungetc>
			serial_ungetc(ESCAPE);
    5934:	8e e7       	ldi	r24, 0x7E	; 126
    5936:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <serial_ungetc>
			ret.good = 0;
    593a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return ret;
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5940:	0f 90       	pop	r0
    5942:	0f 90       	pop	r0
    5944:	df 91       	pop	r29
    5946:	cf 91       	pop	r28
    5948:	08 95       	ret

0000594a <__iCliRetVal.2323>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
    594e:	cd b7       	in	r28, 0x3d	; 61
    5950:	de b7       	in	r29, 0x3e	; 62
    cli();
    5952:	f8 94       	cli
    return 1;
    5954:	81 e0       	ldi	r24, 0x01	; 1
}
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	08 95       	ret

0000595c <__iSeiParam.2327>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	00 d0       	rcall	.+0      	; 0x5962 <__iSeiParam.2327+0x6>
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
    5966:	9a 83       	std	Y+2, r25	; 0x02
    5968:	89 83       	std	Y+1, r24	; 0x01
    sei();
    596a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    596c:	0f 90       	pop	r0
    596e:	0f 90       	pop	r0
    5970:	df 91       	pop	r29
    5972:	cf 91       	pop	r28
    5974:	08 95       	ret

00005976 <__vector_17>:
#ifdef ASM_ISRS
// Eliminating use of push and pop by using "cache register"
register uint16_t isr_z_cache asm ("r6");
ISR(SPI_STC_vect, ISR_NAKED)
{
	asm volatile(
    5976:	6f b6       	in	r6, 0x3f	; 63
    5978:	4a 94       	dec	r4
    597a:	41 f0       	breq	.+16     	; 0x598c <spi_stc_last_byte>
    597c:	6f be       	out	0x3f, r6	; 63
    597e:	3f 01       	movw	r6, r30
    5980:	f1 01       	movw	r30, r2
    5982:	21 90       	ld	r2, Z+
    5984:	2e bc       	out	0x2e, r2	; 46
    5986:	1f 01       	movw	r2, r30
    5988:	f3 01       	movw	r30, r6
    598a:	18 95       	reti

0000598c <spi_stc_last_byte>:
    598c:	6f be       	out	0x3f, r6	; 63
    598e:	18 95       	reti

00005990 <__vector_14>:
/*
 * BLANK timer interrupt Timer0
 * Interrupt if TCNT0 = OCR0A
 */
ISR(TIMER0_COMPA_vect)
{
    5990:	1f 92       	push	r1
    5992:	0f 92       	push	r0
    5994:	00 90 5f 00 	lds	r0, 0x005F
    5998:	0f 92       	push	r0
    599a:	11 24       	eor	r1, r1
    599c:	2f 93       	push	r18
    599e:	3f 93       	push	r19
    59a0:	4f 93       	push	r20
    59a2:	5f 93       	push	r21
    59a4:	6f 93       	push	r22
    59a6:	7f 93       	push	r23
    59a8:	8f 93       	push	r24
    59aa:	9f 93       	push	r25
    59ac:	af 93       	push	r26
    59ae:	bf 93       	push	r27
    59b0:	ef 93       	push	r30
    59b2:	ff 93       	push	r31
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	cd b7       	in	r28, 0x3d	; 61
    59ba:	de b7       	in	r29, 0x3e	; 62
	// Main screen turn off
	pin_high(BLANK);
    59bc:	85 e2       	ldi	r24, 0x25	; 37
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	25 e2       	ldi	r18, 0x25	; 37
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	f9 01       	movw	r30, r18
    59c6:	20 81       	ld	r18, Z
    59c8:	24 60       	ori	r18, 0x04	; 4
    59ca:	fc 01       	movw	r30, r24
    59cc:	20 83       	st	Z, r18

	// "Activate" previously uploaded data
	pin_high(XLAT);
    59ce:	85 e2       	ldi	r24, 0x25	; 37
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	25 e2       	ldi	r18, 0x25	; 37
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	f9 01       	movw	r30, r18
    59d8:	20 81       	ld	r18, Z
    59da:	22 60       	ori	r18, 0x02	; 2
    59dc:	fc 01       	movw	r30, r24
    59de:	20 83       	st	Z, r18
	pin_low(XLAT);
    59e0:	85 e2       	ldi	r24, 0x25	; 37
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	25 e2       	ldi	r18, 0x25	; 37
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	f9 01       	movw	r30, r18
    59ea:	20 81       	ld	r18, Z
    59ec:	2d 7f       	andi	r18, 0xFD	; 253
    59ee:	fc 01       	movw	r30, r24
    59f0:	20 83       	st	Z, r18

	// Main screen turn on and start PWM timers on TLC5940
	pin_low(BLANK);
    59f2:	85 e2       	ldi	r24, 0x25	; 37
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	25 e2       	ldi	r18, 0x25	; 37
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	f9 01       	movw	r30, r18
    59fc:	20 81       	ld	r18, Z
    59fe:	2b 7f       	andi	r18, 0xFB	; 251
    5a00:	fc 01       	movw	r30, r24
    5a02:	20 83       	st	Z, r18

	if (flags.layer != (1<<LAYER_BITS)-1) {
    5a04:	80 91 af 07 	lds	r24, 0x07AF
    5a08:	8c 71       	andi	r24, 0x1C	; 28
    5a0a:	8c 31       	cpi	r24, 0x1C	; 28
    5a0c:	89 f0       	breq	.+34     	; 0x5a30 <__vector_14+0xa0>
		// Advance layer
		flags.layer++;
    5a0e:	80 91 af 07 	lds	r24, 0x07AF
    5a12:	86 95       	lsr	r24
    5a14:	86 95       	lsr	r24
    5a16:	87 70       	andi	r24, 0x07	; 7
    5a18:	8f 5f       	subi	r24, 0xFF	; 255
    5a1a:	87 70       	andi	r24, 0x07	; 7
    5a1c:	87 70       	andi	r24, 0x07	; 7
    5a1e:	88 0f       	add	r24, r24
    5a20:	88 0f       	add	r24, r24
    5a22:	90 91 af 07 	lds	r25, 0x07AF
    5a26:	93 7e       	andi	r25, 0xE3	; 227
    5a28:	89 2b       	or	r24, r25
    5a2a:	80 93 af 07 	sts	0x07AF, r24
    5a2e:	16 c0       	rjmp	.+44     	; 0x5a5c <__vector_14+0xcc>
	} else {
		// Prepare drawing first layer
		flags.layer=0;
    5a30:	80 91 af 07 	lds	r24, 0x07AF
    5a34:	83 7e       	andi	r24, 0xE3	; 227
    5a36:	80 93 af 07 	sts	0x07AF, r24
		
		// If we have new buffer, flip to it
		if (flags.may_flip) {
    5a3a:	80 91 af 07 	lds	r24, 0x07AF
    5a3e:	81 70       	andi	r24, 0x01	; 1
    5a40:	88 23       	and	r24, r24
    5a42:	39 f0       	breq	.+14     	; 0x5a52 <__vector_14+0xc2>
			gs_buf_swap();
    5a44:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <gs_buf_swap>
			flags.may_flip = 0;
    5a48:	80 91 af 07 	lds	r24, 0x07AF
    5a4c:	8e 7f       	andi	r24, 0xFE	; 254
    5a4e:	80 93 af 07 	sts	0x07AF, r24
		}

		// Roll send_ptr back to start of buffer
		send_ptr = gs_buf_front;
    5a52:	80 91 00 01 	lds	r24, 0x0100
    5a56:	90 91 01 01 	lds	r25, 0x0101
    5a5a:	1c 01       	movw	r2, r24
	}

	// Send first byte
	SPDR = ~(1<<flags.layer);
    5a5c:	8e e4       	ldi	r24, 0x4E	; 78
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	20 91 af 07 	lds	r18, 0x07AF
    5a64:	26 95       	lsr	r18
    5a66:	26 95       	lsr	r18
    5a68:	27 70       	andi	r18, 0x07	; 7
    5a6a:	42 2f       	mov	r20, r18
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	21 e0       	ldi	r18, 0x01	; 1
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <__vector_14+0xe8>
    5a74:	22 0f       	add	r18, r18
    5a76:	33 1f       	adc	r19, r19
    5a78:	4a 95       	dec	r20
    5a7a:	e2 f7       	brpl	.-8      	; 0x5a74 <__vector_14+0xe4>
    5a7c:	20 95       	com	r18
    5a7e:	fc 01       	movw	r30, r24
    5a80:	20 83       	st	Z, r18

	// Set up byte counter for SPI interrupt
	layer_bytes_left = BYTES_PER_LAYER + 1;
    5a82:	0f 2e       	mov	r0, r31
    5a84:	f1 e6       	ldi	r31, 0x61	; 97
    5a86:	4f 2e       	mov	r4, r31
    5a88:	f0 2d       	mov	r31, r0
}
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	ff 91       	pop	r31
    5a90:	ef 91       	pop	r30
    5a92:	bf 91       	pop	r27
    5a94:	af 91       	pop	r26
    5a96:	9f 91       	pop	r25
    5a98:	8f 91       	pop	r24
    5a9a:	7f 91       	pop	r23
    5a9c:	6f 91       	pop	r22
    5a9e:	5f 91       	pop	r21
    5aa0:	4f 91       	pop	r20
    5aa2:	3f 91       	pop	r19
    5aa4:	2f 91       	pop	r18
    5aa6:	0f 90       	pop	r0
    5aa8:	00 92 5f 00 	sts	0x005F, r0
    5aac:	0f 90       	pop	r0
    5aae:	1f 90       	pop	r1
    5ab0:	18 95       	reti

00005ab2 <tlc5940_set_dimming>:

void tlc5940_set_dimming(uint8_t x)
{
    5ab2:	cf 93       	push	r28
    5ab4:	df 93       	push	r29
    5ab6:	1f 92       	push	r1
    5ab8:	cd b7       	in	r28, 0x3d	; 61
    5aba:	de b7       	in	r29, 0x3e	; 62
    5abc:	89 83       	std	Y+1, r24	; 0x01
	if (x <= MIN_BLANK_INTERVAL) {
    5abe:	89 81       	ldd	r24, Y+1	; 0x01
    5ac0:	80 31       	cpi	r24, 0x10	; 16
    5ac2:	30 f4       	brcc	.+12     	; 0x5ad0 <tlc5940_set_dimming+0x1e>
		/* It's dimmer than possible. Use the maximum BLANK
		   interval */
		OCR0A = 255;
    5ac4:	87 e4       	ldi	r24, 0x47	; 71
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	2f ef       	ldi	r18, 0xFF	; 255
    5aca:	fc 01       	movw	r30, r24
    5acc:	20 83       	st	Z, r18
    5ace:	0e c0       	rjmp	.+28     	; 0x5aec <tlc5940_set_dimming+0x3a>
	} else {
		/* Making BLANK happen slower */
		OCR0A = ((uint16_t)MIN_BLANK_INTERVAL << 8)/x;
    5ad0:	27 e4       	ldi	r18, 0x47	; 71
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	48 2f       	mov	r20, r24
    5ad8:	50 e0       	ldi	r21, 0x00	; 0
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	9f e0       	ldi	r25, 0x0F	; 15
    5ade:	ba 01       	movw	r22, r20
    5ae0:	0e 94 51 30 	call	0x60a2	; 0x60a2 <__udivmodhi4>
    5ae4:	ab 01       	movw	r20, r22
    5ae6:	ca 01       	movw	r24, r20
    5ae8:	f9 01       	movw	r30, r18
    5aea:	80 83       	st	Z, r24
	}
}
    5aec:	0f 90       	pop	r0
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	08 95       	ret

00005af4 <allow_flipping>:

void allow_flipping(bool state) {
    5af4:	cf 93       	push	r28
    5af6:	df 93       	push	r29
    5af8:	00 d0       	rcall	.+0      	; 0x5afa <allow_flipping+0x6>
    5afa:	1f 92       	push	r1
    5afc:	cd b7       	in	r28, 0x3d	; 61
    5afe:	de b7       	in	r29, 0x3e	; 62
    5b00:	8b 83       	std	Y+3, r24	; 0x03
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    5b02:	1a 82       	std	Y+2, r1	; 0x02
    5b04:	0e 94 a5 2c 	call	0x594a	; 0x594a <__iCliRetVal.2323>
    5b08:	89 83       	std	Y+1, r24	; 0x01
    5b0a:	09 c0       	rjmp	.+18     	; 0x5b1e <allow_flipping+0x2a>
		flags.may_flip = state;
    5b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b0e:	81 70       	andi	r24, 0x01	; 1
    5b10:	90 91 af 07 	lds	r25, 0x07AF
    5b14:	9e 7f       	andi	r25, 0xFE	; 254
    5b16:	89 2b       	or	r24, r25
    5b18:	80 93 af 07 	sts	0x07AF, r24
		OCR0A = ((uint16_t)MIN_BLANK_INTERVAL << 8)/x;
	}
}

void allow_flipping(bool state) {
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
    5b1c:	19 82       	std	Y+1, r1	; 0x01
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	88 23       	and	r24, r24
    5b22:	a1 f7       	brne	.-24     	; 0x5b0c <allow_flipping+0x18>
    5b24:	ce 01       	movw	r24, r28
    5b26:	02 96       	adiw	r24, 0x02	; 2
    5b28:	0e 94 ae 2c 	call	0x595c	; 0x595c <__iSeiParam.2327>
		flags.may_flip = state;
	}
}
    5b2c:	0f 90       	pop	r0
    5b2e:	0f 90       	pop	r0
    5b30:	0f 90       	pop	r0
    5b32:	df 91       	pop	r29
    5b34:	cf 91       	pop	r28
    5b36:	08 95       	ret

00005b38 <__subsf3>:
    5b38:	50 58       	subi	r21, 0x80	; 128

00005b3a <__addsf3>:
    5b3a:	bb 27       	eor	r27, r27
    5b3c:	aa 27       	eor	r26, r26
    5b3e:	0e d0       	rcall	.+28     	; 0x5b5c <__addsf3x>
    5b40:	70 c1       	rjmp	.+736    	; 0x5e22 <__fp_round>
    5b42:	61 d1       	rcall	.+706    	; 0x5e06 <__fp_pscA>
    5b44:	30 f0       	brcs	.+12     	; 0x5b52 <__addsf3+0x18>
    5b46:	66 d1       	rcall	.+716    	; 0x5e14 <__fp_pscB>
    5b48:	20 f0       	brcs	.+8      	; 0x5b52 <__addsf3+0x18>
    5b4a:	31 f4       	brne	.+12     	; 0x5b58 <__addsf3+0x1e>
    5b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b4e:	11 f4       	brne	.+4      	; 0x5b54 <__addsf3+0x1a>
    5b50:	1e f4       	brtc	.+6      	; 0x5b58 <__addsf3+0x1e>
    5b52:	56 c1       	rjmp	.+684    	; 0x5e00 <__fp_nan>
    5b54:	0e f4       	brtc	.+2      	; 0x5b58 <__addsf3+0x1e>
    5b56:	e0 95       	com	r30
    5b58:	e7 fb       	bst	r30, 7
    5b5a:	4c c1       	rjmp	.+664    	; 0x5df4 <__fp_inf>

00005b5c <__addsf3x>:
    5b5c:	e9 2f       	mov	r30, r25
    5b5e:	72 d1       	rcall	.+740    	; 0x5e44 <__fp_split3>
    5b60:	80 f3       	brcs	.-32     	; 0x5b42 <__addsf3+0x8>
    5b62:	ba 17       	cp	r27, r26
    5b64:	62 07       	cpc	r22, r18
    5b66:	73 07       	cpc	r23, r19
    5b68:	84 07       	cpc	r24, r20
    5b6a:	95 07       	cpc	r25, r21
    5b6c:	18 f0       	brcs	.+6      	; 0x5b74 <__addsf3x+0x18>
    5b6e:	71 f4       	brne	.+28     	; 0x5b8c <__addsf3x+0x30>
    5b70:	9e f5       	brtc	.+102    	; 0x5bd8 <__addsf3x+0x7c>
    5b72:	8a c1       	rjmp	.+788    	; 0x5e88 <__fp_zero>
    5b74:	0e f4       	brtc	.+2      	; 0x5b78 <__addsf3x+0x1c>
    5b76:	e0 95       	com	r30
    5b78:	0b 2e       	mov	r0, r27
    5b7a:	ba 2f       	mov	r27, r26
    5b7c:	a0 2d       	mov	r26, r0
    5b7e:	0b 01       	movw	r0, r22
    5b80:	b9 01       	movw	r22, r18
    5b82:	90 01       	movw	r18, r0
    5b84:	0c 01       	movw	r0, r24
    5b86:	ca 01       	movw	r24, r20
    5b88:	a0 01       	movw	r20, r0
    5b8a:	11 24       	eor	r1, r1
    5b8c:	ff 27       	eor	r31, r31
    5b8e:	59 1b       	sub	r21, r25
    5b90:	99 f0       	breq	.+38     	; 0x5bb8 <__addsf3x+0x5c>
    5b92:	59 3f       	cpi	r21, 0xF9	; 249
    5b94:	50 f4       	brcc	.+20     	; 0x5baa <__addsf3x+0x4e>
    5b96:	50 3e       	cpi	r21, 0xE0	; 224
    5b98:	68 f1       	brcs	.+90     	; 0x5bf4 <__addsf3x+0x98>
    5b9a:	1a 16       	cp	r1, r26
    5b9c:	f0 40       	sbci	r31, 0x00	; 0
    5b9e:	a2 2f       	mov	r26, r18
    5ba0:	23 2f       	mov	r18, r19
    5ba2:	34 2f       	mov	r19, r20
    5ba4:	44 27       	eor	r20, r20
    5ba6:	58 5f       	subi	r21, 0xF8	; 248
    5ba8:	f3 cf       	rjmp	.-26     	; 0x5b90 <__addsf3x+0x34>
    5baa:	46 95       	lsr	r20
    5bac:	37 95       	ror	r19
    5bae:	27 95       	ror	r18
    5bb0:	a7 95       	ror	r26
    5bb2:	f0 40       	sbci	r31, 0x00	; 0
    5bb4:	53 95       	inc	r21
    5bb6:	c9 f7       	brne	.-14     	; 0x5baa <__addsf3x+0x4e>
    5bb8:	7e f4       	brtc	.+30     	; 0x5bd8 <__addsf3x+0x7c>
    5bba:	1f 16       	cp	r1, r31
    5bbc:	ba 0b       	sbc	r27, r26
    5bbe:	62 0b       	sbc	r22, r18
    5bc0:	73 0b       	sbc	r23, r19
    5bc2:	84 0b       	sbc	r24, r20
    5bc4:	ba f0       	brmi	.+46     	; 0x5bf4 <__addsf3x+0x98>
    5bc6:	91 50       	subi	r25, 0x01	; 1
    5bc8:	a1 f0       	breq	.+40     	; 0x5bf2 <__addsf3x+0x96>
    5bca:	ff 0f       	add	r31, r31
    5bcc:	bb 1f       	adc	r27, r27
    5bce:	66 1f       	adc	r22, r22
    5bd0:	77 1f       	adc	r23, r23
    5bd2:	88 1f       	adc	r24, r24
    5bd4:	c2 f7       	brpl	.-16     	; 0x5bc6 <__addsf3x+0x6a>
    5bd6:	0e c0       	rjmp	.+28     	; 0x5bf4 <__addsf3x+0x98>
    5bd8:	ba 0f       	add	r27, r26
    5bda:	62 1f       	adc	r22, r18
    5bdc:	73 1f       	adc	r23, r19
    5bde:	84 1f       	adc	r24, r20
    5be0:	48 f4       	brcc	.+18     	; 0x5bf4 <__addsf3x+0x98>
    5be2:	87 95       	ror	r24
    5be4:	77 95       	ror	r23
    5be6:	67 95       	ror	r22
    5be8:	b7 95       	ror	r27
    5bea:	f7 95       	ror	r31
    5bec:	9e 3f       	cpi	r25, 0xFE	; 254
    5bee:	08 f0       	brcs	.+2      	; 0x5bf2 <__addsf3x+0x96>
    5bf0:	b3 cf       	rjmp	.-154    	; 0x5b58 <__addsf3+0x1e>
    5bf2:	93 95       	inc	r25
    5bf4:	88 0f       	add	r24, r24
    5bf6:	08 f0       	brcs	.+2      	; 0x5bfa <__addsf3x+0x9e>
    5bf8:	99 27       	eor	r25, r25
    5bfa:	ee 0f       	add	r30, r30
    5bfc:	97 95       	ror	r25
    5bfe:	87 95       	ror	r24
    5c00:	08 95       	ret

00005c02 <__cmpsf2>:
    5c02:	d4 d0       	rcall	.+424    	; 0x5dac <__fp_cmp>
    5c04:	08 f4       	brcc	.+2      	; 0x5c08 <__cmpsf2+0x6>
    5c06:	81 e0       	ldi	r24, 0x01	; 1
    5c08:	08 95       	ret

00005c0a <__divsf3>:
    5c0a:	0c d0       	rcall	.+24     	; 0x5c24 <__divsf3x>
    5c0c:	0a c1       	rjmp	.+532    	; 0x5e22 <__fp_round>
    5c0e:	02 d1       	rcall	.+516    	; 0x5e14 <__fp_pscB>
    5c10:	40 f0       	brcs	.+16     	; 0x5c22 <__divsf3+0x18>
    5c12:	f9 d0       	rcall	.+498    	; 0x5e06 <__fp_pscA>
    5c14:	30 f0       	brcs	.+12     	; 0x5c22 <__divsf3+0x18>
    5c16:	21 f4       	brne	.+8      	; 0x5c20 <__divsf3+0x16>
    5c18:	5f 3f       	cpi	r21, 0xFF	; 255
    5c1a:	19 f0       	breq	.+6      	; 0x5c22 <__divsf3+0x18>
    5c1c:	eb c0       	rjmp	.+470    	; 0x5df4 <__fp_inf>
    5c1e:	51 11       	cpse	r21, r1
    5c20:	34 c1       	rjmp	.+616    	; 0x5e8a <__fp_szero>
    5c22:	ee c0       	rjmp	.+476    	; 0x5e00 <__fp_nan>

00005c24 <__divsf3x>:
    5c24:	0f d1       	rcall	.+542    	; 0x5e44 <__fp_split3>
    5c26:	98 f3       	brcs	.-26     	; 0x5c0e <__divsf3+0x4>

00005c28 <__divsf3_pse>:
    5c28:	99 23       	and	r25, r25
    5c2a:	c9 f3       	breq	.-14     	; 0x5c1e <__divsf3+0x14>
    5c2c:	55 23       	and	r21, r21
    5c2e:	b1 f3       	breq	.-20     	; 0x5c1c <__divsf3+0x12>
    5c30:	95 1b       	sub	r25, r21
    5c32:	55 0b       	sbc	r21, r21
    5c34:	bb 27       	eor	r27, r27
    5c36:	aa 27       	eor	r26, r26
    5c38:	62 17       	cp	r22, r18
    5c3a:	73 07       	cpc	r23, r19
    5c3c:	84 07       	cpc	r24, r20
    5c3e:	38 f0       	brcs	.+14     	; 0x5c4e <__divsf3_pse+0x26>
    5c40:	9f 5f       	subi	r25, 0xFF	; 255
    5c42:	5f 4f       	sbci	r21, 0xFF	; 255
    5c44:	22 0f       	add	r18, r18
    5c46:	33 1f       	adc	r19, r19
    5c48:	44 1f       	adc	r20, r20
    5c4a:	aa 1f       	adc	r26, r26
    5c4c:	a9 f3       	breq	.-22     	; 0x5c38 <__divsf3_pse+0x10>
    5c4e:	33 d0       	rcall	.+102    	; 0x5cb6 <__divsf3_pse+0x8e>
    5c50:	0e 2e       	mov	r0, r30
    5c52:	3a f0       	brmi	.+14     	; 0x5c62 <__divsf3_pse+0x3a>
    5c54:	e0 e8       	ldi	r30, 0x80	; 128
    5c56:	30 d0       	rcall	.+96     	; 0x5cb8 <__divsf3_pse+0x90>
    5c58:	91 50       	subi	r25, 0x01	; 1
    5c5a:	50 40       	sbci	r21, 0x00	; 0
    5c5c:	e6 95       	lsr	r30
    5c5e:	00 1c       	adc	r0, r0
    5c60:	ca f7       	brpl	.-14     	; 0x5c54 <__divsf3_pse+0x2c>
    5c62:	29 d0       	rcall	.+82     	; 0x5cb6 <__divsf3_pse+0x8e>
    5c64:	fe 2f       	mov	r31, r30
    5c66:	27 d0       	rcall	.+78     	; 0x5cb6 <__divsf3_pse+0x8e>
    5c68:	66 0f       	add	r22, r22
    5c6a:	77 1f       	adc	r23, r23
    5c6c:	88 1f       	adc	r24, r24
    5c6e:	bb 1f       	adc	r27, r27
    5c70:	26 17       	cp	r18, r22
    5c72:	37 07       	cpc	r19, r23
    5c74:	48 07       	cpc	r20, r24
    5c76:	ab 07       	cpc	r26, r27
    5c78:	b0 e8       	ldi	r27, 0x80	; 128
    5c7a:	09 f0       	breq	.+2      	; 0x5c7e <__divsf3_pse+0x56>
    5c7c:	bb 0b       	sbc	r27, r27
    5c7e:	80 2d       	mov	r24, r0
    5c80:	bf 01       	movw	r22, r30
    5c82:	ff 27       	eor	r31, r31
    5c84:	93 58       	subi	r25, 0x83	; 131
    5c86:	5f 4f       	sbci	r21, 0xFF	; 255
    5c88:	2a f0       	brmi	.+10     	; 0x5c94 <__divsf3_pse+0x6c>
    5c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    5c8c:	51 05       	cpc	r21, r1
    5c8e:	68 f0       	brcs	.+26     	; 0x5caa <__divsf3_pse+0x82>
    5c90:	b1 c0       	rjmp	.+354    	; 0x5df4 <__fp_inf>
    5c92:	fb c0       	rjmp	.+502    	; 0x5e8a <__fp_szero>
    5c94:	5f 3f       	cpi	r21, 0xFF	; 255
    5c96:	ec f3       	brlt	.-6      	; 0x5c92 <__divsf3_pse+0x6a>
    5c98:	98 3e       	cpi	r25, 0xE8	; 232
    5c9a:	dc f3       	brlt	.-10     	; 0x5c92 <__divsf3_pse+0x6a>
    5c9c:	86 95       	lsr	r24
    5c9e:	77 95       	ror	r23
    5ca0:	67 95       	ror	r22
    5ca2:	b7 95       	ror	r27
    5ca4:	f7 95       	ror	r31
    5ca6:	9f 5f       	subi	r25, 0xFF	; 255
    5ca8:	c9 f7       	brne	.-14     	; 0x5c9c <__divsf3_pse+0x74>
    5caa:	88 0f       	add	r24, r24
    5cac:	91 1d       	adc	r25, r1
    5cae:	96 95       	lsr	r25
    5cb0:	87 95       	ror	r24
    5cb2:	97 f9       	bld	r25, 7
    5cb4:	08 95       	ret
    5cb6:	e1 e0       	ldi	r30, 0x01	; 1
    5cb8:	66 0f       	add	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	88 1f       	adc	r24, r24
    5cbe:	bb 1f       	adc	r27, r27
    5cc0:	62 17       	cp	r22, r18
    5cc2:	73 07       	cpc	r23, r19
    5cc4:	84 07       	cpc	r24, r20
    5cc6:	ba 07       	cpc	r27, r26
    5cc8:	20 f0       	brcs	.+8      	; 0x5cd2 <__divsf3_pse+0xaa>
    5cca:	62 1b       	sub	r22, r18
    5ccc:	73 0b       	sbc	r23, r19
    5cce:	84 0b       	sbc	r24, r20
    5cd0:	ba 0b       	sbc	r27, r26
    5cd2:	ee 1f       	adc	r30, r30
    5cd4:	88 f7       	brcc	.-30     	; 0x5cb8 <__divsf3_pse+0x90>
    5cd6:	e0 95       	com	r30
    5cd8:	08 95       	ret

00005cda <__fixunssfsi>:
    5cda:	bc d0       	rcall	.+376    	; 0x5e54 <__fp_splitA>
    5cdc:	88 f0       	brcs	.+34     	; 0x5d00 <__fixunssfsi+0x26>
    5cde:	9f 57       	subi	r25, 0x7F	; 127
    5ce0:	90 f0       	brcs	.+36     	; 0x5d06 <__fixunssfsi+0x2c>
    5ce2:	b9 2f       	mov	r27, r25
    5ce4:	99 27       	eor	r25, r25
    5ce6:	b7 51       	subi	r27, 0x17	; 23
    5ce8:	a0 f0       	brcs	.+40     	; 0x5d12 <__fixunssfsi+0x38>
    5cea:	d1 f0       	breq	.+52     	; 0x5d20 <__fixunssfsi+0x46>
    5cec:	66 0f       	add	r22, r22
    5cee:	77 1f       	adc	r23, r23
    5cf0:	88 1f       	adc	r24, r24
    5cf2:	99 1f       	adc	r25, r25
    5cf4:	1a f0       	brmi	.+6      	; 0x5cfc <__fixunssfsi+0x22>
    5cf6:	ba 95       	dec	r27
    5cf8:	c9 f7       	brne	.-14     	; 0x5cec <__fixunssfsi+0x12>
    5cfa:	12 c0       	rjmp	.+36     	; 0x5d20 <__fixunssfsi+0x46>
    5cfc:	b1 30       	cpi	r27, 0x01	; 1
    5cfe:	81 f0       	breq	.+32     	; 0x5d20 <__fixunssfsi+0x46>
    5d00:	c3 d0       	rcall	.+390    	; 0x5e88 <__fp_zero>
    5d02:	b1 e0       	ldi	r27, 0x01	; 1
    5d04:	08 95       	ret
    5d06:	c0 c0       	rjmp	.+384    	; 0x5e88 <__fp_zero>
    5d08:	67 2f       	mov	r22, r23
    5d0a:	78 2f       	mov	r23, r24
    5d0c:	88 27       	eor	r24, r24
    5d0e:	b8 5f       	subi	r27, 0xF8	; 248
    5d10:	39 f0       	breq	.+14     	; 0x5d20 <__fixunssfsi+0x46>
    5d12:	b9 3f       	cpi	r27, 0xF9	; 249
    5d14:	cc f3       	brlt	.-14     	; 0x5d08 <__fixunssfsi+0x2e>
    5d16:	86 95       	lsr	r24
    5d18:	77 95       	ror	r23
    5d1a:	67 95       	ror	r22
    5d1c:	b3 95       	inc	r27
    5d1e:	d9 f7       	brne	.-10     	; 0x5d16 <__fixunssfsi+0x3c>
    5d20:	3e f4       	brtc	.+14     	; 0x5d30 <__fixunssfsi+0x56>
    5d22:	90 95       	com	r25
    5d24:	80 95       	com	r24
    5d26:	70 95       	com	r23
    5d28:	61 95       	neg	r22
    5d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d30:	08 95       	ret

00005d32 <__floatunsisf>:
    5d32:	e8 94       	clt
    5d34:	09 c0       	rjmp	.+18     	; 0x5d48 <__floatsisf+0x12>

00005d36 <__floatsisf>:
    5d36:	97 fb       	bst	r25, 7
    5d38:	3e f4       	brtc	.+14     	; 0x5d48 <__floatsisf+0x12>
    5d3a:	90 95       	com	r25
    5d3c:	80 95       	com	r24
    5d3e:	70 95       	com	r23
    5d40:	61 95       	neg	r22
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8f 4f       	sbci	r24, 0xFF	; 255
    5d46:	9f 4f       	sbci	r25, 0xFF	; 255
    5d48:	99 23       	and	r25, r25
    5d4a:	a9 f0       	breq	.+42     	; 0x5d76 <__floatsisf+0x40>
    5d4c:	f9 2f       	mov	r31, r25
    5d4e:	96 e9       	ldi	r25, 0x96	; 150
    5d50:	bb 27       	eor	r27, r27
    5d52:	93 95       	inc	r25
    5d54:	f6 95       	lsr	r31
    5d56:	87 95       	ror	r24
    5d58:	77 95       	ror	r23
    5d5a:	67 95       	ror	r22
    5d5c:	b7 95       	ror	r27
    5d5e:	f1 11       	cpse	r31, r1
    5d60:	f8 cf       	rjmp	.-16     	; 0x5d52 <__floatsisf+0x1c>
    5d62:	fa f4       	brpl	.+62     	; 0x5da2 <__floatsisf+0x6c>
    5d64:	bb 0f       	add	r27, r27
    5d66:	11 f4       	brne	.+4      	; 0x5d6c <__floatsisf+0x36>
    5d68:	60 ff       	sbrs	r22, 0
    5d6a:	1b c0       	rjmp	.+54     	; 0x5da2 <__floatsisf+0x6c>
    5d6c:	6f 5f       	subi	r22, 0xFF	; 255
    5d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d70:	8f 4f       	sbci	r24, 0xFF	; 255
    5d72:	9f 4f       	sbci	r25, 0xFF	; 255
    5d74:	16 c0       	rjmp	.+44     	; 0x5da2 <__floatsisf+0x6c>
    5d76:	88 23       	and	r24, r24
    5d78:	11 f0       	breq	.+4      	; 0x5d7e <__floatsisf+0x48>
    5d7a:	96 e9       	ldi	r25, 0x96	; 150
    5d7c:	11 c0       	rjmp	.+34     	; 0x5da0 <__floatsisf+0x6a>
    5d7e:	77 23       	and	r23, r23
    5d80:	21 f0       	breq	.+8      	; 0x5d8a <__floatsisf+0x54>
    5d82:	9e e8       	ldi	r25, 0x8E	; 142
    5d84:	87 2f       	mov	r24, r23
    5d86:	76 2f       	mov	r23, r22
    5d88:	05 c0       	rjmp	.+10     	; 0x5d94 <__floatsisf+0x5e>
    5d8a:	66 23       	and	r22, r22
    5d8c:	71 f0       	breq	.+28     	; 0x5daa <__floatsisf+0x74>
    5d8e:	96 e8       	ldi	r25, 0x86	; 134
    5d90:	86 2f       	mov	r24, r22
    5d92:	70 e0       	ldi	r23, 0x00	; 0
    5d94:	60 e0       	ldi	r22, 0x00	; 0
    5d96:	2a f0       	brmi	.+10     	; 0x5da2 <__floatsisf+0x6c>
    5d98:	9a 95       	dec	r25
    5d9a:	66 0f       	add	r22, r22
    5d9c:	77 1f       	adc	r23, r23
    5d9e:	88 1f       	adc	r24, r24
    5da0:	da f7       	brpl	.-10     	; 0x5d98 <__floatsisf+0x62>
    5da2:	88 0f       	add	r24, r24
    5da4:	96 95       	lsr	r25
    5da6:	87 95       	ror	r24
    5da8:	97 f9       	bld	r25, 7
    5daa:	08 95       	ret

00005dac <__fp_cmp>:
    5dac:	99 0f       	add	r25, r25
    5dae:	00 08       	sbc	r0, r0
    5db0:	55 0f       	add	r21, r21
    5db2:	aa 0b       	sbc	r26, r26
    5db4:	e0 e8       	ldi	r30, 0x80	; 128
    5db6:	fe ef       	ldi	r31, 0xFE	; 254
    5db8:	16 16       	cp	r1, r22
    5dba:	17 06       	cpc	r1, r23
    5dbc:	e8 07       	cpc	r30, r24
    5dbe:	f9 07       	cpc	r31, r25
    5dc0:	c0 f0       	brcs	.+48     	; 0x5df2 <__fp_cmp+0x46>
    5dc2:	12 16       	cp	r1, r18
    5dc4:	13 06       	cpc	r1, r19
    5dc6:	e4 07       	cpc	r30, r20
    5dc8:	f5 07       	cpc	r31, r21
    5dca:	98 f0       	brcs	.+38     	; 0x5df2 <__fp_cmp+0x46>
    5dcc:	62 1b       	sub	r22, r18
    5dce:	73 0b       	sbc	r23, r19
    5dd0:	84 0b       	sbc	r24, r20
    5dd2:	95 0b       	sbc	r25, r21
    5dd4:	39 f4       	brne	.+14     	; 0x5de4 <__fp_cmp+0x38>
    5dd6:	0a 26       	eor	r0, r26
    5dd8:	61 f0       	breq	.+24     	; 0x5df2 <__fp_cmp+0x46>
    5dda:	23 2b       	or	r18, r19
    5ddc:	24 2b       	or	r18, r20
    5dde:	25 2b       	or	r18, r21
    5de0:	21 f4       	brne	.+8      	; 0x5dea <__fp_cmp+0x3e>
    5de2:	08 95       	ret
    5de4:	0a 26       	eor	r0, r26
    5de6:	09 f4       	brne	.+2      	; 0x5dea <__fp_cmp+0x3e>
    5de8:	a1 40       	sbci	r26, 0x01	; 1
    5dea:	a6 95       	lsr	r26
    5dec:	8f ef       	ldi	r24, 0xFF	; 255
    5dee:	81 1d       	adc	r24, r1
    5df0:	81 1d       	adc	r24, r1
    5df2:	08 95       	ret

00005df4 <__fp_inf>:
    5df4:	97 f9       	bld	r25, 7
    5df6:	9f 67       	ori	r25, 0x7F	; 127
    5df8:	80 e8       	ldi	r24, 0x80	; 128
    5dfa:	70 e0       	ldi	r23, 0x00	; 0
    5dfc:	60 e0       	ldi	r22, 0x00	; 0
    5dfe:	08 95       	ret

00005e00 <__fp_nan>:
    5e00:	9f ef       	ldi	r25, 0xFF	; 255
    5e02:	80 ec       	ldi	r24, 0xC0	; 192
    5e04:	08 95       	ret

00005e06 <__fp_pscA>:
    5e06:	00 24       	eor	r0, r0
    5e08:	0a 94       	dec	r0
    5e0a:	16 16       	cp	r1, r22
    5e0c:	17 06       	cpc	r1, r23
    5e0e:	18 06       	cpc	r1, r24
    5e10:	09 06       	cpc	r0, r25
    5e12:	08 95       	ret

00005e14 <__fp_pscB>:
    5e14:	00 24       	eor	r0, r0
    5e16:	0a 94       	dec	r0
    5e18:	12 16       	cp	r1, r18
    5e1a:	13 06       	cpc	r1, r19
    5e1c:	14 06       	cpc	r1, r20
    5e1e:	05 06       	cpc	r0, r21
    5e20:	08 95       	ret

00005e22 <__fp_round>:
    5e22:	09 2e       	mov	r0, r25
    5e24:	03 94       	inc	r0
    5e26:	00 0c       	add	r0, r0
    5e28:	11 f4       	brne	.+4      	; 0x5e2e <__fp_round+0xc>
    5e2a:	88 23       	and	r24, r24
    5e2c:	52 f0       	brmi	.+20     	; 0x5e42 <__fp_round+0x20>
    5e2e:	bb 0f       	add	r27, r27
    5e30:	40 f4       	brcc	.+16     	; 0x5e42 <__fp_round+0x20>
    5e32:	bf 2b       	or	r27, r31
    5e34:	11 f4       	brne	.+4      	; 0x5e3a <__fp_round+0x18>
    5e36:	60 ff       	sbrs	r22, 0
    5e38:	04 c0       	rjmp	.+8      	; 0x5e42 <__fp_round+0x20>
    5e3a:	6f 5f       	subi	r22, 0xFF	; 255
    5e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e40:	9f 4f       	sbci	r25, 0xFF	; 255
    5e42:	08 95       	ret

00005e44 <__fp_split3>:
    5e44:	57 fd       	sbrc	r21, 7
    5e46:	90 58       	subi	r25, 0x80	; 128
    5e48:	44 0f       	add	r20, r20
    5e4a:	55 1f       	adc	r21, r21
    5e4c:	59 f0       	breq	.+22     	; 0x5e64 <__fp_splitA+0x10>
    5e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    5e50:	71 f0       	breq	.+28     	; 0x5e6e <__fp_splitA+0x1a>
    5e52:	47 95       	ror	r20

00005e54 <__fp_splitA>:
    5e54:	88 0f       	add	r24, r24
    5e56:	97 fb       	bst	r25, 7
    5e58:	99 1f       	adc	r25, r25
    5e5a:	61 f0       	breq	.+24     	; 0x5e74 <__fp_splitA+0x20>
    5e5c:	9f 3f       	cpi	r25, 0xFF	; 255
    5e5e:	79 f0       	breq	.+30     	; 0x5e7e <__fp_splitA+0x2a>
    5e60:	87 95       	ror	r24
    5e62:	08 95       	ret
    5e64:	12 16       	cp	r1, r18
    5e66:	13 06       	cpc	r1, r19
    5e68:	14 06       	cpc	r1, r20
    5e6a:	55 1f       	adc	r21, r21
    5e6c:	f2 cf       	rjmp	.-28     	; 0x5e52 <__fp_split3+0xe>
    5e6e:	46 95       	lsr	r20
    5e70:	f1 df       	rcall	.-30     	; 0x5e54 <__fp_splitA>
    5e72:	08 c0       	rjmp	.+16     	; 0x5e84 <__fp_splitA+0x30>
    5e74:	16 16       	cp	r1, r22
    5e76:	17 06       	cpc	r1, r23
    5e78:	18 06       	cpc	r1, r24
    5e7a:	99 1f       	adc	r25, r25
    5e7c:	f1 cf       	rjmp	.-30     	; 0x5e60 <__fp_splitA+0xc>
    5e7e:	86 95       	lsr	r24
    5e80:	71 05       	cpc	r23, r1
    5e82:	61 05       	cpc	r22, r1
    5e84:	08 94       	sec
    5e86:	08 95       	ret

00005e88 <__fp_zero>:
    5e88:	e8 94       	clt

00005e8a <__fp_szero>:
    5e8a:	bb 27       	eor	r27, r27
    5e8c:	66 27       	eor	r22, r22
    5e8e:	77 27       	eor	r23, r23
    5e90:	cb 01       	movw	r24, r22
    5e92:	97 f9       	bld	r25, 7
    5e94:	08 95       	ret

00005e96 <__gesf2>:
    5e96:	8a df       	rcall	.-236    	; 0x5dac <__fp_cmp>
    5e98:	08 f4       	brcc	.+2      	; 0x5e9c <__gesf2+0x6>
    5e9a:	8f ef       	ldi	r24, 0xFF	; 255
    5e9c:	08 95       	ret

00005e9e <__mulsf3>:
    5e9e:	0b d0       	rcall	.+22     	; 0x5eb6 <__mulsf3x>
    5ea0:	c0 cf       	rjmp	.-128    	; 0x5e22 <__fp_round>
    5ea2:	b1 df       	rcall	.-158    	; 0x5e06 <__fp_pscA>
    5ea4:	28 f0       	brcs	.+10     	; 0x5eb0 <__mulsf3+0x12>
    5ea6:	b6 df       	rcall	.-148    	; 0x5e14 <__fp_pscB>
    5ea8:	18 f0       	brcs	.+6      	; 0x5eb0 <__mulsf3+0x12>
    5eaa:	95 23       	and	r25, r21
    5eac:	09 f0       	breq	.+2      	; 0x5eb0 <__mulsf3+0x12>
    5eae:	a2 cf       	rjmp	.-188    	; 0x5df4 <__fp_inf>
    5eb0:	a7 cf       	rjmp	.-178    	; 0x5e00 <__fp_nan>
    5eb2:	11 24       	eor	r1, r1
    5eb4:	ea cf       	rjmp	.-44     	; 0x5e8a <__fp_szero>

00005eb6 <__mulsf3x>:
    5eb6:	c6 df       	rcall	.-116    	; 0x5e44 <__fp_split3>
    5eb8:	a0 f3       	brcs	.-24     	; 0x5ea2 <__mulsf3+0x4>

00005eba <__mulsf3_pse>:
    5eba:	95 9f       	mul	r25, r21
    5ebc:	d1 f3       	breq	.-12     	; 0x5eb2 <__mulsf3+0x14>
    5ebe:	95 0f       	add	r25, r21
    5ec0:	50 e0       	ldi	r21, 0x00	; 0
    5ec2:	55 1f       	adc	r21, r21
    5ec4:	62 9f       	mul	r22, r18
    5ec6:	f0 01       	movw	r30, r0
    5ec8:	72 9f       	mul	r23, r18
    5eca:	bb 27       	eor	r27, r27
    5ecc:	f0 0d       	add	r31, r0
    5ece:	b1 1d       	adc	r27, r1
    5ed0:	63 9f       	mul	r22, r19
    5ed2:	aa 27       	eor	r26, r26
    5ed4:	f0 0d       	add	r31, r0
    5ed6:	b1 1d       	adc	r27, r1
    5ed8:	aa 1f       	adc	r26, r26
    5eda:	64 9f       	mul	r22, r20
    5edc:	66 27       	eor	r22, r22
    5ede:	b0 0d       	add	r27, r0
    5ee0:	a1 1d       	adc	r26, r1
    5ee2:	66 1f       	adc	r22, r22
    5ee4:	82 9f       	mul	r24, r18
    5ee6:	22 27       	eor	r18, r18
    5ee8:	b0 0d       	add	r27, r0
    5eea:	a1 1d       	adc	r26, r1
    5eec:	62 1f       	adc	r22, r18
    5eee:	73 9f       	mul	r23, r19
    5ef0:	b0 0d       	add	r27, r0
    5ef2:	a1 1d       	adc	r26, r1
    5ef4:	62 1f       	adc	r22, r18
    5ef6:	83 9f       	mul	r24, r19
    5ef8:	a0 0d       	add	r26, r0
    5efa:	61 1d       	adc	r22, r1
    5efc:	22 1f       	adc	r18, r18
    5efe:	74 9f       	mul	r23, r20
    5f00:	33 27       	eor	r19, r19
    5f02:	a0 0d       	add	r26, r0
    5f04:	61 1d       	adc	r22, r1
    5f06:	23 1f       	adc	r18, r19
    5f08:	84 9f       	mul	r24, r20
    5f0a:	60 0d       	add	r22, r0
    5f0c:	21 1d       	adc	r18, r1
    5f0e:	82 2f       	mov	r24, r18
    5f10:	76 2f       	mov	r23, r22
    5f12:	6a 2f       	mov	r22, r26
    5f14:	11 24       	eor	r1, r1
    5f16:	9f 57       	subi	r25, 0x7F	; 127
    5f18:	50 40       	sbci	r21, 0x00	; 0
    5f1a:	8a f0       	brmi	.+34     	; 0x5f3e <__mulsf3_pse+0x84>
    5f1c:	e1 f0       	breq	.+56     	; 0x5f56 <__mulsf3_pse+0x9c>
    5f1e:	88 23       	and	r24, r24
    5f20:	4a f0       	brmi	.+18     	; 0x5f34 <__mulsf3_pse+0x7a>
    5f22:	ee 0f       	add	r30, r30
    5f24:	ff 1f       	adc	r31, r31
    5f26:	bb 1f       	adc	r27, r27
    5f28:	66 1f       	adc	r22, r22
    5f2a:	77 1f       	adc	r23, r23
    5f2c:	88 1f       	adc	r24, r24
    5f2e:	91 50       	subi	r25, 0x01	; 1
    5f30:	50 40       	sbci	r21, 0x00	; 0
    5f32:	a9 f7       	brne	.-22     	; 0x5f1e <__mulsf3_pse+0x64>
    5f34:	9e 3f       	cpi	r25, 0xFE	; 254
    5f36:	51 05       	cpc	r21, r1
    5f38:	70 f0       	brcs	.+28     	; 0x5f56 <__mulsf3_pse+0x9c>
    5f3a:	5c cf       	rjmp	.-328    	; 0x5df4 <__fp_inf>
    5f3c:	a6 cf       	rjmp	.-180    	; 0x5e8a <__fp_szero>
    5f3e:	5f 3f       	cpi	r21, 0xFF	; 255
    5f40:	ec f3       	brlt	.-6      	; 0x5f3c <__mulsf3_pse+0x82>
    5f42:	98 3e       	cpi	r25, 0xE8	; 232
    5f44:	dc f3       	brlt	.-10     	; 0x5f3c <__mulsf3_pse+0x82>
    5f46:	86 95       	lsr	r24
    5f48:	77 95       	ror	r23
    5f4a:	67 95       	ror	r22
    5f4c:	b7 95       	ror	r27
    5f4e:	f7 95       	ror	r31
    5f50:	e7 95       	ror	r30
    5f52:	9f 5f       	subi	r25, 0xFF	; 255
    5f54:	c1 f7       	brne	.-16     	; 0x5f46 <__mulsf3_pse+0x8c>
    5f56:	fe 2b       	or	r31, r30
    5f58:	88 0f       	add	r24, r24
    5f5a:	91 1d       	adc	r25, r1
    5f5c:	96 95       	lsr	r25
    5f5e:	87 95       	ror	r24
    5f60:	97 f9       	bld	r25, 7
    5f62:	08 95       	ret

00005f64 <sin>:
    5f64:	9f 93       	push	r25
    5f66:	05 d0       	rcall	.+10     	; 0x5f72 <__fp_rempio2>
    5f68:	0f 90       	pop	r0
    5f6a:	07 fc       	sbrc	r0, 7
    5f6c:	ee 5f       	subi	r30, 0xFE	; 254
    5f6e:	28 c0       	rjmp	.+80     	; 0x5fc0 <__fp_sinus>
    5f70:	47 cf       	rjmp	.-370    	; 0x5e00 <__fp_nan>

00005f72 <__fp_rempio2>:
    5f72:	70 df       	rcall	.-288    	; 0x5e54 <__fp_splitA>
    5f74:	e8 f3       	brcs	.-6      	; 0x5f70 <sin+0xc>
    5f76:	e8 94       	clt
    5f78:	e0 e0       	ldi	r30, 0x00	; 0
    5f7a:	bb 27       	eor	r27, r27
    5f7c:	9f 57       	subi	r25, 0x7F	; 127
    5f7e:	f0 f0       	brcs	.+60     	; 0x5fbc <__fp_rempio2+0x4a>
    5f80:	2a ed       	ldi	r18, 0xDA	; 218
    5f82:	3f e0       	ldi	r19, 0x0F	; 15
    5f84:	49 ec       	ldi	r20, 0xC9	; 201
    5f86:	06 c0       	rjmp	.+12     	; 0x5f94 <__fp_rempio2+0x22>
    5f88:	ee 0f       	add	r30, r30
    5f8a:	bb 0f       	add	r27, r27
    5f8c:	66 1f       	adc	r22, r22
    5f8e:	77 1f       	adc	r23, r23
    5f90:	88 1f       	adc	r24, r24
    5f92:	28 f0       	brcs	.+10     	; 0x5f9e <__fp_rempio2+0x2c>
    5f94:	b2 3a       	cpi	r27, 0xA2	; 162
    5f96:	62 07       	cpc	r22, r18
    5f98:	73 07       	cpc	r23, r19
    5f9a:	84 07       	cpc	r24, r20
    5f9c:	28 f0       	brcs	.+10     	; 0x5fa8 <__fp_rempio2+0x36>
    5f9e:	b2 5a       	subi	r27, 0xA2	; 162
    5fa0:	62 0b       	sbc	r22, r18
    5fa2:	73 0b       	sbc	r23, r19
    5fa4:	84 0b       	sbc	r24, r20
    5fa6:	e3 95       	inc	r30
    5fa8:	9a 95       	dec	r25
    5faa:	72 f7       	brpl	.-36     	; 0x5f88 <__fp_rempio2+0x16>
    5fac:	80 38       	cpi	r24, 0x80	; 128
    5fae:	30 f4       	brcc	.+12     	; 0x5fbc <__fp_rempio2+0x4a>
    5fb0:	9a 95       	dec	r25
    5fb2:	bb 0f       	add	r27, r27
    5fb4:	66 1f       	adc	r22, r22
    5fb6:	77 1f       	adc	r23, r23
    5fb8:	88 1f       	adc	r24, r24
    5fba:	d2 f7       	brpl	.-12     	; 0x5fb0 <__fp_rempio2+0x3e>
    5fbc:	90 48       	sbci	r25, 0x80	; 128
    5fbe:	13 c0       	rjmp	.+38     	; 0x5fe6 <__fp_mpack_finite>

00005fc0 <__fp_sinus>:
    5fc0:	ef 93       	push	r30
    5fc2:	e0 ff       	sbrs	r30, 0
    5fc4:	06 c0       	rjmp	.+12     	; 0x5fd2 <__fp_sinus+0x12>
    5fc6:	a2 ea       	ldi	r26, 0xA2	; 162
    5fc8:	2a ed       	ldi	r18, 0xDA	; 218
    5fca:	3f e0       	ldi	r19, 0x0F	; 15
    5fcc:	49 ec       	ldi	r20, 0xC9	; 201
    5fce:	5f eb       	ldi	r21, 0xBF	; 191
    5fd0:	c5 dd       	rcall	.-1142   	; 0x5b5c <__addsf3x>
    5fd2:	27 df       	rcall	.-434    	; 0x5e22 <__fp_round>
    5fd4:	0f 90       	pop	r0
    5fd6:	03 94       	inc	r0
    5fd8:	01 fc       	sbrc	r0, 1
    5fda:	90 58       	subi	r25, 0x80	; 128
    5fdc:	e8 e6       	ldi	r30, 0x68	; 104
    5fde:	f0 e0       	ldi	r31, 0x00	; 0
    5fe0:	0e c0       	rjmp	.+28     	; 0x5ffe <__fp_powsodd>

00005fe2 <__fp_mpack>:
    5fe2:	9f 3f       	cpi	r25, 0xFF	; 255
    5fe4:	31 f0       	breq	.+12     	; 0x5ff2 <__fp_mpack_finite+0xc>

00005fe6 <__fp_mpack_finite>:
    5fe6:	91 50       	subi	r25, 0x01	; 1
    5fe8:	20 f4       	brcc	.+8      	; 0x5ff2 <__fp_mpack_finite+0xc>
    5fea:	87 95       	ror	r24
    5fec:	77 95       	ror	r23
    5fee:	67 95       	ror	r22
    5ff0:	b7 95       	ror	r27
    5ff2:	88 0f       	add	r24, r24
    5ff4:	91 1d       	adc	r25, r1
    5ff6:	96 95       	lsr	r25
    5ff8:	87 95       	ror	r24
    5ffa:	97 f9       	bld	r25, 7
    5ffc:	08 95       	ret

00005ffe <__fp_powsodd>:
    5ffe:	9f 93       	push	r25
    6000:	8f 93       	push	r24
    6002:	7f 93       	push	r23
    6004:	6f 93       	push	r22
    6006:	ff 93       	push	r31
    6008:	ef 93       	push	r30
    600a:	9b 01       	movw	r18, r22
    600c:	ac 01       	movw	r20, r24
    600e:	47 df       	rcall	.-370    	; 0x5e9e <__mulsf3>
    6010:	ef 91       	pop	r30
    6012:	ff 91       	pop	r31
    6014:	05 d0       	rcall	.+10     	; 0x6020 <__fp_powser>
    6016:	2f 91       	pop	r18
    6018:	3f 91       	pop	r19
    601a:	4f 91       	pop	r20
    601c:	5f 91       	pop	r21
    601e:	3f cf       	rjmp	.-386    	; 0x5e9e <__mulsf3>

00006020 <__fp_powser>:
    6020:	df 93       	push	r29
    6022:	cf 93       	push	r28
    6024:	1f 93       	push	r17
    6026:	0f 93       	push	r16
    6028:	ff 92       	push	r15
    602a:	ef 92       	push	r14
    602c:	df 92       	push	r13
    602e:	7b 01       	movw	r14, r22
    6030:	8c 01       	movw	r16, r24
    6032:	68 94       	set
    6034:	05 c0       	rjmp	.+10     	; 0x6040 <__fp_powser+0x20>
    6036:	da 2e       	mov	r13, r26
    6038:	ef 01       	movw	r28, r30
    603a:	3d df       	rcall	.-390    	; 0x5eb6 <__mulsf3x>
    603c:	fe 01       	movw	r30, r28
    603e:	e8 94       	clt
    6040:	a5 91       	lpm	r26, Z+
    6042:	25 91       	lpm	r18, Z+
    6044:	35 91       	lpm	r19, Z+
    6046:	45 91       	lpm	r20, Z+
    6048:	55 91       	lpm	r21, Z+
    604a:	ae f3       	brts	.-22     	; 0x6036 <__fp_powser+0x16>
    604c:	ef 01       	movw	r28, r30
    604e:	86 dd       	rcall	.-1268   	; 0x5b5c <__addsf3x>
    6050:	fe 01       	movw	r30, r28
    6052:	97 01       	movw	r18, r14
    6054:	a8 01       	movw	r20, r16
    6056:	da 94       	dec	r13
    6058:	79 f7       	brne	.-34     	; 0x6038 <__fp_powser+0x18>
    605a:	df 90       	pop	r13
    605c:	ef 90       	pop	r14
    605e:	ff 90       	pop	r15
    6060:	0f 91       	pop	r16
    6062:	1f 91       	pop	r17
    6064:	cf 91       	pop	r28
    6066:	df 91       	pop	r29
    6068:	08 95       	ret

0000606a <__umulhisi3>:
    606a:	a2 9f       	mul	r26, r18
    606c:	b0 01       	movw	r22, r0
    606e:	b3 9f       	mul	r27, r19
    6070:	c0 01       	movw	r24, r0
    6072:	a3 9f       	mul	r26, r19
    6074:	01 d0       	rcall	.+2      	; 0x6078 <__umulhisi3+0xe>
    6076:	b2 9f       	mul	r27, r18
    6078:	70 0d       	add	r23, r0
    607a:	81 1d       	adc	r24, r1
    607c:	11 24       	eor	r1, r1
    607e:	91 1d       	adc	r25, r1
    6080:	08 95       	ret

00006082 <__mulsi3>:
    6082:	db 01       	movw	r26, r22
    6084:	8f 93       	push	r24
    6086:	9f 93       	push	r25
    6088:	0e 94 9b 30 	call	0x6136	; 0x6136 <__muluhisi3>
    608c:	bf 91       	pop	r27
    608e:	af 91       	pop	r26
    6090:	a2 9f       	mul	r26, r18
    6092:	80 0d       	add	r24, r0
    6094:	91 1d       	adc	r25, r1
    6096:	a3 9f       	mul	r26, r19
    6098:	90 0d       	add	r25, r0
    609a:	b2 9f       	mul	r27, r18
    609c:	90 0d       	add	r25, r0
    609e:	11 24       	eor	r1, r1
    60a0:	08 95       	ret

000060a2 <__udivmodhi4>:
    60a2:	aa 1b       	sub	r26, r26
    60a4:	bb 1b       	sub	r27, r27
    60a6:	51 e1       	ldi	r21, 0x11	; 17
    60a8:	07 c0       	rjmp	.+14     	; 0x60b8 <__udivmodhi4_ep>

000060aa <__udivmodhi4_loop>:
    60aa:	aa 1f       	adc	r26, r26
    60ac:	bb 1f       	adc	r27, r27
    60ae:	a6 17       	cp	r26, r22
    60b0:	b7 07       	cpc	r27, r23
    60b2:	10 f0       	brcs	.+4      	; 0x60b8 <__udivmodhi4_ep>
    60b4:	a6 1b       	sub	r26, r22
    60b6:	b7 0b       	sbc	r27, r23

000060b8 <__udivmodhi4_ep>:
    60b8:	88 1f       	adc	r24, r24
    60ba:	99 1f       	adc	r25, r25
    60bc:	5a 95       	dec	r21
    60be:	a9 f7       	brne	.-22     	; 0x60aa <__udivmodhi4_loop>
    60c0:	80 95       	com	r24
    60c2:	90 95       	com	r25
    60c4:	bc 01       	movw	r22, r24
    60c6:	cd 01       	movw	r24, r26
    60c8:	08 95       	ret

000060ca <__divmodhi4>:
    60ca:	97 fb       	bst	r25, 7
    60cc:	07 2e       	mov	r0, r23
    60ce:	16 f4       	brtc	.+4      	; 0x60d4 <__divmodhi4+0xa>
    60d0:	00 94       	com	r0
    60d2:	07 d0       	rcall	.+14     	; 0x60e2 <__divmodhi4_neg1>
    60d4:	77 fd       	sbrc	r23, 7
    60d6:	09 d0       	rcall	.+18     	; 0x60ea <__divmodhi4_neg2>
    60d8:	0e 94 51 30 	call	0x60a2	; 0x60a2 <__udivmodhi4>
    60dc:	07 fc       	sbrc	r0, 7
    60de:	05 d0       	rcall	.+10     	; 0x60ea <__divmodhi4_neg2>
    60e0:	3e f4       	brtc	.+14     	; 0x60f0 <__divmodhi4_exit>

000060e2 <__divmodhi4_neg1>:
    60e2:	90 95       	com	r25
    60e4:	81 95       	neg	r24
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	08 95       	ret

000060ea <__divmodhi4_neg2>:
    60ea:	70 95       	com	r23
    60ec:	61 95       	neg	r22
    60ee:	7f 4f       	sbci	r23, 0xFF	; 255

000060f0 <__divmodhi4_exit>:
    60f0:	08 95       	ret

000060f2 <__udivmodsi4>:
    60f2:	a1 e2       	ldi	r26, 0x21	; 33
    60f4:	1a 2e       	mov	r1, r26
    60f6:	aa 1b       	sub	r26, r26
    60f8:	bb 1b       	sub	r27, r27
    60fa:	fd 01       	movw	r30, r26
    60fc:	0d c0       	rjmp	.+26     	; 0x6118 <__udivmodsi4_ep>

000060fe <__udivmodsi4_loop>:
    60fe:	aa 1f       	adc	r26, r26
    6100:	bb 1f       	adc	r27, r27
    6102:	ee 1f       	adc	r30, r30
    6104:	ff 1f       	adc	r31, r31
    6106:	a2 17       	cp	r26, r18
    6108:	b3 07       	cpc	r27, r19
    610a:	e4 07       	cpc	r30, r20
    610c:	f5 07       	cpc	r31, r21
    610e:	20 f0       	brcs	.+8      	; 0x6118 <__udivmodsi4_ep>
    6110:	a2 1b       	sub	r26, r18
    6112:	b3 0b       	sbc	r27, r19
    6114:	e4 0b       	sbc	r30, r20
    6116:	f5 0b       	sbc	r31, r21

00006118 <__udivmodsi4_ep>:
    6118:	66 1f       	adc	r22, r22
    611a:	77 1f       	adc	r23, r23
    611c:	88 1f       	adc	r24, r24
    611e:	99 1f       	adc	r25, r25
    6120:	1a 94       	dec	r1
    6122:	69 f7       	brne	.-38     	; 0x60fe <__udivmodsi4_loop>
    6124:	60 95       	com	r22
    6126:	70 95       	com	r23
    6128:	80 95       	com	r24
    612a:	90 95       	com	r25
    612c:	9b 01       	movw	r18, r22
    612e:	ac 01       	movw	r20, r24
    6130:	bd 01       	movw	r22, r26
    6132:	cf 01       	movw	r24, r30
    6134:	08 95       	ret

00006136 <__muluhisi3>:
    6136:	0e 94 35 30 	call	0x606a	; 0x606a <__umulhisi3>
    613a:	a5 9f       	mul	r26, r21
    613c:	90 0d       	add	r25, r0
    613e:	b4 9f       	mul	r27, r20
    6140:	90 0d       	add	r25, r0
    6142:	a4 9f       	mul	r26, r20
    6144:	80 0d       	add	r24, r0
    6146:	91 1d       	adc	r25, r1
    6148:	11 24       	eor	r1, r1
    614a:	08 95       	ret

0000614c <do_rand>:
    614c:	8f 92       	push	r8
    614e:	9f 92       	push	r9
    6150:	af 92       	push	r10
    6152:	bf 92       	push	r11
    6154:	cf 92       	push	r12
    6156:	df 92       	push	r13
    6158:	ef 92       	push	r14
    615a:	ff 92       	push	r15
    615c:	cf 93       	push	r28
    615e:	df 93       	push	r29
    6160:	ec 01       	movw	r28, r24
    6162:	68 81       	ld	r22, Y
    6164:	79 81       	ldd	r23, Y+1	; 0x01
    6166:	8a 81       	ldd	r24, Y+2	; 0x02
    6168:	9b 81       	ldd	r25, Y+3	; 0x03
    616a:	61 15       	cp	r22, r1
    616c:	71 05       	cpc	r23, r1
    616e:	81 05       	cpc	r24, r1
    6170:	91 05       	cpc	r25, r1
    6172:	21 f4       	brne	.+8      	; 0x617c <do_rand+0x30>
    6174:	64 e2       	ldi	r22, 0x24	; 36
    6176:	79 ed       	ldi	r23, 0xD9	; 217
    6178:	8b e5       	ldi	r24, 0x5B	; 91
    617a:	97 e0       	ldi	r25, 0x07	; 7
    617c:	2d e1       	ldi	r18, 0x1D	; 29
    617e:	33 ef       	ldi	r19, 0xF3	; 243
    6180:	41 e0       	ldi	r20, 0x01	; 1
    6182:	50 e0       	ldi	r21, 0x00	; 0
    6184:	0e 94 48 31 	call	0x6290	; 0x6290 <__divmodsi4>
    6188:	49 01       	movw	r8, r18
    618a:	5a 01       	movw	r10, r20
    618c:	9b 01       	movw	r18, r22
    618e:	ac 01       	movw	r20, r24
    6190:	a7 ea       	ldi	r26, 0xA7	; 167
    6192:	b1 e4       	ldi	r27, 0x41	; 65
    6194:	0e 94 9b 30 	call	0x6136	; 0x6136 <__muluhisi3>
    6198:	6b 01       	movw	r12, r22
    619a:	7c 01       	movw	r14, r24
    619c:	ac ee       	ldi	r26, 0xEC	; 236
    619e:	b4 ef       	ldi	r27, 0xF4	; 244
    61a0:	a5 01       	movw	r20, r10
    61a2:	94 01       	movw	r18, r8
    61a4:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulohisi3>
    61a8:	c6 0e       	add	r12, r22
    61aa:	d7 1e       	adc	r13, r23
    61ac:	e8 1e       	adc	r14, r24
    61ae:	f9 1e       	adc	r15, r25
    61b0:	f7 fe       	sbrs	r15, 7
    61b2:	06 c0       	rjmp	.+12     	; 0x61c0 <do_rand+0x74>
    61b4:	81 e0       	ldi	r24, 0x01	; 1
    61b6:	c8 1a       	sub	r12, r24
    61b8:	d1 08       	sbc	r13, r1
    61ba:	e1 08       	sbc	r14, r1
    61bc:	80 e8       	ldi	r24, 0x80	; 128
    61be:	f8 0a       	sbc	r15, r24
    61c0:	c8 82       	st	Y, r12
    61c2:	d9 82       	std	Y+1, r13	; 0x01
    61c4:	ea 82       	std	Y+2, r14	; 0x02
    61c6:	fb 82       	std	Y+3, r15	; 0x03
    61c8:	e8 94       	clt
    61ca:	d7 f8       	bld	r13, 7
    61cc:	ee 24       	eor	r14, r14
    61ce:	ff 24       	eor	r15, r15
    61d0:	c6 01       	movw	r24, r12
    61d2:	df 91       	pop	r29
    61d4:	cf 91       	pop	r28
    61d6:	ff 90       	pop	r15
    61d8:	ef 90       	pop	r14
    61da:	df 90       	pop	r13
    61dc:	cf 90       	pop	r12
    61de:	bf 90       	pop	r11
    61e0:	af 90       	pop	r10
    61e2:	9f 90       	pop	r9
    61e4:	8f 90       	pop	r8
    61e6:	08 95       	ret

000061e8 <rand_r>:
    61e8:	0e 94 a6 30 	call	0x614c	; 0x614c <do_rand>
    61ec:	08 95       	ret

000061ee <rand>:
    61ee:	8a e0       	ldi	r24, 0x0A	; 10
    61f0:	91 e0       	ldi	r25, 0x01	; 1
    61f2:	0e 94 a6 30 	call	0x614c	; 0x614c <do_rand>
    61f6:	08 95       	ret

000061f8 <srand>:
    61f8:	a0 e0       	ldi	r26, 0x00	; 0
    61fa:	b0 e0       	ldi	r27, 0x00	; 0
    61fc:	80 93 0a 01 	sts	0x010A, r24
    6200:	90 93 0b 01 	sts	0x010B, r25
    6204:	a0 93 0c 01 	sts	0x010C, r26
    6208:	b0 93 0d 01 	sts	0x010D, r27
    620c:	08 95       	ret

0000620e <memset>:
    620e:	dc 01       	movw	r26, r24
    6210:	01 c0       	rjmp	.+2      	; 0x6214 <memset+0x6>
    6212:	6d 93       	st	X+, r22
    6214:	41 50       	subi	r20, 0x01	; 1
    6216:	50 40       	sbci	r21, 0x00	; 0
    6218:	e0 f7       	brcc	.-8      	; 0x6212 <memset+0x4>
    621a:	08 95       	ret

0000621c <__eerd_block_m328p>:
    621c:	dc 01       	movw	r26, r24
    621e:	cb 01       	movw	r24, r22

00006220 <__eerd_blraw_m328p>:
    6220:	fc 01       	movw	r30, r24
    6222:	f9 99       	sbic	0x1f, 1	; 31
    6224:	fe cf       	rjmp	.-4      	; 0x6222 <__eerd_blraw_m328p+0x2>
    6226:	06 c0       	rjmp	.+12     	; 0x6234 <__eerd_blraw_m328p+0x14>
    6228:	f2 bd       	out	0x22, r31	; 34
    622a:	e1 bd       	out	0x21, r30	; 33
    622c:	f8 9a       	sbi	0x1f, 0	; 31
    622e:	31 96       	adiw	r30, 0x01	; 1
    6230:	00 b4       	in	r0, 0x20	; 32
    6232:	0d 92       	st	X+, r0
    6234:	41 50       	subi	r20, 0x01	; 1
    6236:	50 40       	sbci	r21, 0x00	; 0
    6238:	b8 f7       	brcc	.-18     	; 0x6228 <__eerd_blraw_m328p+0x8>
    623a:	08 95       	ret

0000623c <__eeupd_block_m328p>:
    623c:	dc 01       	movw	r26, r24
    623e:	a4 0f       	add	r26, r20
    6240:	b5 1f       	adc	r27, r21
    6242:	41 50       	subi	r20, 0x01	; 1
    6244:	50 40       	sbci	r21, 0x00	; 0
    6246:	48 f0       	brcs	.+18     	; 0x625a <__eeupd_block_m328p+0x1e>
    6248:	cb 01       	movw	r24, r22
    624a:	84 0f       	add	r24, r20
    624c:	95 1f       	adc	r25, r21
    624e:	2e 91       	ld	r18, -X
    6250:	0e 94 2f 31 	call	0x625e	; 0x625e <__eeupd_r18_m328p>
    6254:	41 50       	subi	r20, 0x01	; 1
    6256:	50 40       	sbci	r21, 0x00	; 0
    6258:	d0 f7       	brcc	.-12     	; 0x624e <__eeupd_block_m328p+0x12>
    625a:	08 95       	ret

0000625c <__eeupd_byte_m328p>:
    625c:	26 2f       	mov	r18, r22

0000625e <__eeupd_r18_m328p>:
    625e:	f9 99       	sbic	0x1f, 1	; 31
    6260:	fe cf       	rjmp	.-4      	; 0x625e <__eeupd_r18_m328p>
    6262:	92 bd       	out	0x22, r25	; 34
    6264:	81 bd       	out	0x21, r24	; 33
    6266:	f8 9a       	sbi	0x1f, 0	; 31
    6268:	01 97       	sbiw	r24, 0x01	; 1
    626a:	00 b4       	in	r0, 0x20	; 32
    626c:	02 16       	cp	r0, r18
    626e:	39 f0       	breq	.+14     	; 0x627e <__eeupd_r18_m328p+0x20>
    6270:	1f ba       	out	0x1f, r1	; 31
    6272:	20 bd       	out	0x20, r18	; 32
    6274:	0f b6       	in	r0, 0x3f	; 63
    6276:	f8 94       	cli
    6278:	fa 9a       	sbi	0x1f, 2	; 31
    627a:	f9 9a       	sbi	0x1f, 1	; 31
    627c:	0f be       	out	0x3f, r0	; 63
    627e:	08 95       	ret

00006280 <__mulshisi3>:
    6280:	b7 ff       	sbrs	r27, 7
    6282:	0c 94 9b 30 	jmp	0x6136	; 0x6136 <__muluhisi3>

00006286 <__mulohisi3>:
    6286:	0e 94 9b 30 	call	0x6136	; 0x6136 <__muluhisi3>
    628a:	82 1b       	sub	r24, r18
    628c:	93 0b       	sbc	r25, r19
    628e:	08 95       	ret

00006290 <__divmodsi4>:
    6290:	05 2e       	mov	r0, r21
    6292:	97 fb       	bst	r25, 7
    6294:	16 f4       	brtc	.+4      	; 0x629a <__divmodsi4+0xa>
    6296:	00 94       	com	r0
    6298:	07 d0       	rcall	.+14     	; 0x62a8 <__divmodsi4_neg1>
    629a:	57 fd       	sbrc	r21, 7
    629c:	0d d0       	rcall	.+26     	; 0x62b8 <__divmodsi4_neg2>
    629e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__udivmodsi4>
    62a2:	07 fc       	sbrc	r0, 7
    62a4:	09 d0       	rcall	.+18     	; 0x62b8 <__divmodsi4_neg2>
    62a6:	7e f4       	brtc	.+30     	; 0x62c6 <__divmodsi4_exit>

000062a8 <__divmodsi4_neg1>:
    62a8:	90 95       	com	r25
    62aa:	80 95       	com	r24
    62ac:	70 95       	com	r23
    62ae:	61 95       	neg	r22
    62b0:	7f 4f       	sbci	r23, 0xFF	; 255
    62b2:	8f 4f       	sbci	r24, 0xFF	; 255
    62b4:	9f 4f       	sbci	r25, 0xFF	; 255
    62b6:	08 95       	ret

000062b8 <__divmodsi4_neg2>:
    62b8:	50 95       	com	r21
    62ba:	40 95       	com	r20
    62bc:	30 95       	com	r19
    62be:	21 95       	neg	r18
    62c0:	3f 4f       	sbci	r19, 0xFF	; 255
    62c2:	4f 4f       	sbci	r20, 0xFF	; 255
    62c4:	5f 4f       	sbci	r21, 0xFF	; 255

000062c6 <__divmodsi4_exit>:
    62c6:	08 95       	ret

000062c8 <_exit>:
    62c8:	f8 94       	cli

000062ca <__stop_program>:
    62ca:	ff cf       	rjmp	.-2      	; 0x62ca <__stop_program>
