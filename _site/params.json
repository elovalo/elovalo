{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Outdoor Pedestal with a LED Cube","name":"Elovalo","body":"<!-- -*- mode: markdown; coding: utf-8 -*- -->\r\n\r\nElovalo is a joint project between [Hacklab JKL](http://hacklabjkl.org/), [Koodilehto Co-op](http://koodilehto.fi/), and [IhmeMedia](http://www.ihmemedia.fi/). Financing, aesthetic support and mentoring have been provided by [Live Herring](http://www.liveherring.org/).\r\n\r\nThe lighting system will be installed in Jyväskylä's central Church Park in Fall 2012. It consists of three lighting pedestals that house a red, green and blue 3D display. These low-resolution light displays play different effects that are influenced by ambient conditions, such as sound, light and proximity. The display's resolution is 512 [voxels](http://en.wikipedia.org/wiki/Voxel) (3d \"pixels\").\r\n\r\nElovalo is a custom design. We came up with our own hardware and software. The development kit also includes a [Blender](http://www.blender.org/) based simulation tool that may be used to preview effects before actually uploading them on the device.\r\n\r\n## Technical Details\r\n\r\n### Hardware\r\n\r\n* Processor: ATMEGA328p 2kb SRAM 32kb FLASH @16MHZ\r\n* Sensors: Proximity, Ambient sound, Ambient Light.\r\n* Media: 8x8x8 voxel 512 LED 3D matrix with 12 bit grayscale.\r\n* Communication: USART/RS232 bidirectional serial communications protocol for debugging and sending/receiving data to and from the processor.\r\n\r\n### Software\r\n\r\n* Effects simulator that is implemented with Blender3d, allowing to demo real time effects without the Elovalo hardware. After verifying the effects with the simulator, they can be uploaded to the firmware of the equipment. This helps development by allowing to separate effect and hardware development.\r\n* A RS232 interface that abstracts the hexadecimal-form communication to the matrix to more developer friendly functions.\r\n\r\n### Firmware\r\n* Fully custom and bottom-up designed firmware that is extremely efficiently optimized to squeeze all the juice out of the 8 bit processor:\r\n* 768 byte double buffered display buffer that guarantees a stable and smooth interface for animating without pacing issues.\r\n* Buffered USART communications.\r\n* Multitasking with interrupts and hardware peripheral modules.\r\n* SLEEP and HIBERNATE modes with remote starting.\r\n* Real time clock with scheduling (for timed turning on).\r\n* Self test: Simple test protocol for detecting errors with the SPI-bus, RS232, faulty LEDs and other LED driver-related problems. Error codes are saved on the memory for later debugging.\r\n\r\n### Features yet to be implemented\r\n\r\n* Zigbee support\r\n* WLAN/LAN support\r\n* DMX-support.\r\n\r\n## Credits\r\n\r\n* [Joni Katajamäki](https://github.com/katis) - Embedded programming, hardware design \r\n* [Jukka Kinnunen](https://github.com/resutoor) - Hardware design and debugging\r\n* [Joel Lehtonen](https://github.com/Zouppen/) - Embedded programming, effect engine programming\r\n* Lasse Saari - Management, pedestal fabrication\r\n* [Marko Silokunnas](https://github.com/marant) - Soldering\r\n* [Mio Taalas](https://github.com/mtaalas/) - LED driver interface design, PCB design,\r\n  embedded programming\r\n* [Ilkka Turunen](https://github.com/ile2/) - Management, soldering, pedestal\r\n  tests and aesthetic design\r\n* [Juho Vepsäläinen](https://github.com/bebraw/) - 3D simulator, effect programming, pedestal\r\n  design\r\n\r\n## License\r\n\r\nWe use GPLv3 for software. Create Commons Attribution-ShareAlike is used for hardware and accompanying documentation. See LICENSE files for more details.\r\n\r\nIf you create a derivative, please let us know. It would be interesting to hear what you are doing."}