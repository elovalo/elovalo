# -*- mode: python; coding: utf-8 -*-
import os
from generators.build import *

# Build default environment with optimization enabled
env = avr_build_env(flags = '-O2')

# Add AVR variant name
Import('build_type')
env.Append(CPPDEFINES = 'AVR_'+build_type.upper())

# Make elf
env.Program(Elf,avr_source_files())

# Make hexes
env.Command("flash.hex", Elf, 'avr-objcopy -j .text -j .data -O ihex $SOURCE $TARGET')
env.Command("eeprom.hex", Elf, 'avr-objcopy -j .eeprom -O ihex $SOURCE $TARGET')
env.Command("fuse.hex", Elf, 'avr-objcopy -j .fuse -O ihex $SOURCE $TARGET')

# Dump assembly code
env.Command("assembly.lss", Elf, 'avr-objdump -h -S $SOURCE >$TARGET')

# Show memory usage
env.Command(None, Elf, 'echo "'+build_type.upper()+' environment";avr-size -C --mcu=atmega328p $SOURCE')

# Program the thing
if GetOption('program-'+build_type):
    pgm = env.Command('pgm', ["flash.hex","eeprom.hex","fuse.hex"],
                      'avrdude -pm328p -cusbasp -y -u '+
                      '-Uflash:w:${SOURCES[0]}:a '+
                      '-Ueeprom:w:${SOURCES[1]}:a '+
                      '-Ulfuse:w:0xbf:m -Uhfuse:w:0xdb:m -Uefuse:w:0x5:m '+
                      '-Ulock:w:0xf:m')
    env.AlwaysBuild(pgm)
